'(expression:
  (letrec ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
           (sat-solve-4
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
    (app sat-solve-4 phi)))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 (app not x2) (app not x3))
   (app or (app not x2) (app not x3))
   (-> (app or x4 x2) <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2) (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x4 (-> x2 <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
     <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x4 x2)
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 (app not x2) (app not x3))
   (-> (app or (app not x2) (app not x3)) <-)
   (app or x4 x2))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list '(#t ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> sat-solve-4 <-) phi) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x1 <-) (app not x2) (app not x3))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x3 <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app not x2) <-) (app not x3))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list '(#t ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x3 <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (-> (app or x1 (app not x2) (app not x3)) <-)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list '(#t ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (-> (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))) <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))) <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (app not x2) (-> (app not x3) <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list '(#t ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (flatenv '((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
     <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2) (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            phi
            =
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2)))
            <-)
           try
           sat-solve-4)
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app not x2) (app not x3))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           (-> try = (λ (f) (app or (app f (app #t)) (app f (app #f)))) <-)
           sat-solve-4)
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-4
           (app sat-solve-4 phi)
           ((phi
             (λ (x1 x2 x3 x4)
               (app
                and
                (app or x1 (app not x2) (app not x3))
                (app or (app not x2) (app not x3))
                (app or x4 x2))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (-> (app not x2) <-) (app not x3))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list '(#t ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app sat-solve-4 (-> phi <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> and <-)
   (app or x1 (app not x2) (app not x3))
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n1)
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
 (flatenv
  '(((let-bod
      letrec
      ((phi
        (λ (x1 x2 x3 x4)
          (app
           and
           (app or x1 (app not x2) (app not x3))
           (app or (app not x2) (app not x3))
           (app or x4 x2))))
       (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
       (sat-solve-4
        (λ (p)
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
      (top))
     app
     sat-solve-4
     phi))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           try
           (->
            sat-solve-4
            =
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
            <-))
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
    <-))
 (flatenv
  '(((let-bod
      letrec
      ((phi
        (λ (x1 x2 x3 x4)
          (app
           and
           (app or x1 (app not x2) (app not x3))
           (app or (app not x2) (app not x3))
           (app or x4 x2))))
       (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
       (sat-solve-4
        (λ (p)
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
      (top))
     app
     sat-solve-4
     phi))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (flatenv '((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x1 (app not x2) (app not x3))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1 x2 x3 x4)
    (->
     (app
      and
      (app or x1 (app not x2) (app not x3))
      (app or (app not x2) (app not x3))
      (app or x4 x2))
     <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-4
             (app sat-solve-4 phi)
             ((phi
               (λ (x1 x2 x3 x4)
                 (app
                  and
                  (app or x1 (app not x2) (app not x3))
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4) (app p n1 n2 n3 n4))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x4 <-) x2)
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-4
       (app sat-solve-4 phi)
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (flatenv '((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (-> (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))) <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))) <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app not x2) (-> (app not x3) <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-4
               (app sat-solve-4 phi)
               ((phi
                 (λ (x1 x2 x3 x4)
                   (app
                    and
                    (app or x1 (app not x2) (app not x3))
                    (app or (app not x2) (app not x3))
                    (app or x4 x2))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     p
     n1
     n2
     n3
     n4))))
(list
 'clos/con:
 (list
  (list '(#t ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-4
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (p)
    (->
     (app
      try
      (λ (n1)
        (app
         try
         (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
     <-))
 (flatenv
  '(((let-bod
      letrec
      ((phi
        (λ (x1 x2 x3 x4)
          (app
           and
           (app or x1 (app not x2) (app not x3))
           (app or (app not x2) (app not x3))
           (app or x4 x2))))
       (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
       (sat-solve-4
        (λ (p)
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
      (top))
     app
     sat-solve-4
     phi))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2)))))
        ((sat-solve-4
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv '((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
         <-)))))
  (list '(#f ()) (flatenv '((λ (n4) (-> (app p n1 n2 n3 n4) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
