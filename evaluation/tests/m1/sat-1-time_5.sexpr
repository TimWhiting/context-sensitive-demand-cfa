'(clean-cache
  sat-1
  1
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  56
  34
  11
  11
  16
  6
  22
  1
  21/34
  23
  #f
  45/34
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  25
  12
  6
  7
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  64
  40
  11
  13
  20
  6
  26
  1
  9/14
  26
  #f
  27/20
  ((3 3 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  15
  8
  13
  9
  6
  15
  1
  9/13
  13
  #f
  17/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  11
  12
  7
  5
  12
  1
  7/12
  13
  #t
  19/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  36
  14
  7
  15
  7
  4
  11
  1
  7/10
  11
  #f
  17/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  59
  27
  13
  19
  11
  6
  17
  1
  7/12
  21
  #f
  11/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  52
  23
  10
  19
  12
  7
  19
  1
  2/3
  18
  #f
  28/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  64
  33
  12
  19
  16
  7
  23
  1
  12/17
  23
  #f
  43/33
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  37
  20
  6
  11
  11
  4
  15
  1
  9/14
  16
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  64
  40
  11
  13
  20
  6
  26
  1
  9/14
  26
  #f
  27/20
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  25
  12
  6
  7
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  59
  35
  11
  13
  17
  6
  23
  1
  12/19
  24
  #f
  46/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  60
  36
  11
  13
  17
  6
  23
  1
  3/5
  24
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  61
  37
  11
  13
  17
  6
  23
  1
  7/12
  25
  #t
  49/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  62
  38
  11
  13
  17
  6
  23
  1
  67/120
  25
  #f
  51/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  75
  43
  16
  16
  17
  7
  24
  1
  67/138
  29
  #f
  65/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  71
  42
  12
  17
  20
  6
  26
  1
  9/14
  27
  #f
  19/14
  ((3 3 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  57
  33
  11
  13
  15
  6
  21
  1
  10/17
  23
  #f
  43/33
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  97
  58
  22
  17
  19
  8
  27
  1
  1/2
  38
  #f
  39/29
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  100
  61
  22
  17
  21
  8
  29
  1
  12/23
  39
  #f
  83/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  56
  34
  11
  11
  16
  6
  22
  1
  21/34
  23
  #f
  45/34
  ((3 3 0) (3 3 0) (5 5 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  58
  29
  12
  17
  15
  6
  21
  1
  5/8
  22
  #f
  36/29
  ((1 1 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  63
  32
  14
  17
  17
  8
  25
  1
  12/19
  25
  #t
  39/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  53
  22
  12
  19
  12
  7
  19
  1
  2/3
  17
  #f
  27/22
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  54
  23
  12
  19
  12
  7
  19
  1
  23/36
  18
  #t
  28/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  55
  27
  11
  17
  14
  9
  23
  1
  2/3
  19
  #f
  35/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  31
  14
  6
  11
  7
  4
  11
  1
  3/5
  12
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  42
  17
  11
  14
  7
  5
  12
  1
  1/2
  15
  #t
  21/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  70
  38
  16
  16
  15
  7
  22
  1
  31/60
  28
  #f
  28/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  92
  55
  20
  17
  19
  9
  28
  1
  21/46
  40
  #f
  89/55
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  5
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
