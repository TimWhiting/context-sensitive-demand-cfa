'(clean-cache
  blur
  1
  5
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  103
  75
  23
  5
  67
  13
  80
  1
  14/15
  50
  #f
  124/25
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  5
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  96
  71
  20
  5
  64
  13
  77
  1
  103/111
  47
  #f
  353/71
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  63
  36
  23
  4
  29
  13
  42
  1
  5/6
  36
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  49
  25
  20
  4
  24
  13
  37
  1
  15/16
  25
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  5
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  96
  70
  21
  5
  58
  13
  71
  1
  197/222
  48
  #f
  174/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  94
  68
  21
  5
  57
  13
  70
  1
  199/222
  48
  #f
  84/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  90
  64
  21
  5
  55
  13
  68
  1
  203/222
  46
  #f
  157/32
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  28
  16
  10
  2
  12
  6
  18
  1
  17/21
  6
  #f
  35/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  20/21
  5
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  28
  12
  12
  4
  4
  4
  8
  1
  1/3
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  34
  22
  10
  2
  18
  6
  24
  1
  9/11
  8
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  7/8
  5
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  65
  37
  23
  5
  30
  13
  43
  1
  31/36
  36
  #f
  186/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  102
  74
  23
  5
  66
  13
  79
  1
  109/117
  50
  #f
  183/37
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  5
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  33
  21
  10
  2
  16
  6
  22
  1
  8/11
  13
  #f
  97/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  70
  46
  20
  4
  40
  13
  53
  1
  13/15
  38
  #t
  111/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  79
  55
  20
  4
  48
  13
  61
  1
  73/84
  47
  #t
  267/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  81
  56
  20
  5
  48
  13
  61
  1
  289/336
  47
  #f
  39/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  86
  61
  20
  5
  52
  13
  65
  1
  313/372
  52
  #t
  298/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  112
  86
  20
  6
  77
  13
  90
  1
  161/176
  63
  #f
  429/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  112
  86
  20
  6
  77
  13
  90
  1
  161/176
  63
  #t
  429/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  113
  87
  20
  6
  77
  13
  90
  1
  479/528
  64
  #t
  434/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  114
  88
  20
  6
  77
  13
  90
  1
  119/132
  64
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  115
  89
  20
  6
  78
  13
  91
  1
  122/135
  64
  #f
  446/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  116
  90
  20
  6
  78
  13
  91
  1
  121/135
  64
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  117
  91
  20
  6
  78
  13
  91
  1
  8/9
  64
  #f
  456/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  118
  92
  20
  6
  78
  13
  91
  1
  119/135
  65
  #t
  461/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  119
  93
  20
  6
  78
  13
  91
  1
  118/135
  66
  #t
  466/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  120
  94
  20
  6
  78
  13
  91
  1
  13/15
  66
  #f
  236/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  121
  95
  20
  6
  78
  13
  91
  1
  116/135
  67
  #t
  477/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  122
  96
  20
  6
  78
  13
  91
  1
  23/27
  68
  #t
  241/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  123
  97
  20
  6
  78
  13
  91
  1
  38/45
  68
  #f
  488/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  124
  98
  20
  6
  78
  13
  91
  1
  113/135
  68
  #f
  246/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  125
  99
  20
  6
  78
  13
  91
  1
  112/135
  68
  #f
  166/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  126
  100
  20
  6
  78
  13
  91
  1
  37/45
  68
  #f
  126/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  68
  41
  23
  4
  32
  13
  45
  1
  47/60
  41
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  71
  44
  23
  4
  34
  13
  47
  1
  25/33
  44
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  104
  76
  23
  5
  64
  13
  77
  1
  106/123
  59
  #f
  379/76
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  105
  77
  23
  5
  64
  13
  77
  1
  421/492
  59
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  109
  81
  23
  5
  67
  13
  80
  1
  415/492
  60
  #f
  404/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  110
  82
  23
  5
  67
  13
  80
  1
  137/164
  60
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  111
  83
  23
  5
  67
  13
  80
  1
  407/492
  60
  #f
  414/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  115
  86
  23
  6
  69
  13
  82
  1
  137/164
  62
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  116
  87
  23
  6
  69
  13
  82
  1
  407/492
  63
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  117
  88
  23
  6
  69
  13
  82
  1
  403/492
  63
  #f
  439/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  118
  89
  23
  6
  69
  13
  82
  1
  133/164
  63
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  118
  89
  23
  6
  69
  13
  82
  1
  133/164
  63
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  118
  89
  23
  6
  69
  13
  82
  1
  133/164
  63
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  119
  90
  23
  6
  69
  13
  82
  1
  395/492
  63
  #f
  449/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  122
  93
  23
  6
  71
  13
  84
  1
  131/164
  64
  #f
  466/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  123
  94
  23
  6
  71
  13
  84
  1
  389/492
  65
  #t
  471/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  127
  98
  23
  6
  74
  13
  87
  1
  199/252
  69
  #t
  491/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  127
  98
  23
  6
  74
  13
  87
  1
  199/252
  69
  #t
  491/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  130
  101
  23
  6
  77
  13
  90
  1
  53/66
  70
  #f
  508/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  131
  102
  23
  6
  77
  13
  90
  1
  35/44
  71
  #t
  171/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  132
  103
  23
  6
  77
  13
  90
  1
  26/33
  72
  #t
  518/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  5
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  133
  104
  23
  6
  78
  13
  91
  1
  107/135
  72
  #f
  131/26
  ((0 0 0) (0 0 0) (0 0 0)))
