'(clean-cache
  blur
  1
  600
  43
  letrec
  "'(eval ((top) letrec (id ... lp) ...) (env ()))"
  #f
  99
  75
  23
  1
  67
  13
  80
  1
  14/15
  59
  #f
  91/75
  (2 2 0))
'(clean-cache
  blur
  1
  600
  43
  lambda
  "'(eval (letrec (... blur (lp (-> (λ (a n) ...) <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  match
  "'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))"
  #f
  92
  71
  20
  1
  64
  13
  77
  1
  103/111
  56
  #f
  86/71
  (1 1 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))"
  #f
  60
  36
  23
  1
  29
  13
  42
  1
  5/6
  36
  #t
  1
  (1 1 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app id (-> a <-)) (env ((□? (a n)))))"
  #f
  46
  25
  20
  1
  24
  13
  37
  1
  15/16
  25
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> id <-) a) (env ((□? (a n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  let*
  "'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  92
  70
  21
  1
  58
  13
  71
  1
  197/222
  55
  #f
  17/14
  (2 2 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))"
  #f
  24
  11
  12
  1
  4
  4
  8
  1
  4/11
  11
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))"
  #f
  11
  6
  4
  1
  3
  1
  4
  1
  1/2
  6
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))"
  #f
  24
  11
  12
  1
  4
  4
  8
  1
  4/11
  11
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))"
  #f
  11
  6
  4
  1
  3
  1
  4
  1
  1/2
  6
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval\n  (let* (r ... s) (-> (app not (app (app blur ...) s (app - ...))) <-))\n  (env ((□? (a n)))))"
  #f
  90
  68
  21
  1
  57
  13
  70
  1
  199/222
  55
  #f
  81/68
  (2 2 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))"
  #f
  86
  64
  21
  1
  55
  13
  68
  1
  203/222
  53
  #f
  75/64
  (1 1 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))"
  #f
  27
  16
  10
  1
  12
  6
  18
  1
  17/21
  12
  #f
  5/4
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (a n)))))"
  #f
  24
  13
  10
  1
  12
  6
  18
  1
  20/21
  10
  #f
  16/13
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))"
  #f
  25
  12
  12
  1
  4
  4
  8
  1
  1/3
  12
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))"
  #f
  11
  6
  4
  1
  3
  1
  4
  1
  1/2
  6
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app blur (-> lp <-)) (env ((□? (a n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) lp) (env ((□? (a n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> not <-) (app (app blur lp) s (app - n 1))) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))"
  #f
  33
  22
  10
  1
  18
  6
  24
  1
  9/11
  17
  #f
  27/22
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  number
  "'(eval (app <= n (-> 1 <-)) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))"
  #f
  24
  13
  10
  1
  12
  6
  18
  1
  7/8
  10
  #f
  16/13
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> <= <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  lambda
  "'(eval (letrec (... id (blur (-> (λ (y) ...) <-)) lp ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (λ (y) (-> y <-)) (env ((□? (y)))))"
  #f
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  lambda
  "'(eval (letrec (... () (id (-> (λ (x) ...) <-)) blur ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)))))"
  #f
  62
  37
  23
  2
  30
  13
  43
  1
  31/36
  36
  #f
  38/37
  (1 1 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))"
  #f
  98
  74
  23
  1
  66
  13
  79
  1
  109/117
  59
  #f
  89/74
  (2 2 0))
'(clean-cache
  blur
  1
  600
  43
  number
  "'(eval (app lp (app #f) (-> 2 <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  app
  "'(eval (app lp (-> (app #f) <-) 2) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  1
  600
  43
  ref-or-constructor
  "'(eval (app (-> lp <-) (app #f) 2) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
