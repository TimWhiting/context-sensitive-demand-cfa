'(clean-cache
  primtest
  1
  25
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  361
  339
  14
  8
  318
  6
  324
  1
  703/728
  160
  #f
  554/339
  ((18 18 0) (35/2 35/2 1/2) (18 18 1/2)))
'(clean-cache
  primtest
  1
  25
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  368
  346
  14
  8
  314
  6
  320
  1
  2027/2148
  162
  #f
  283/173
  ((37/2 37/2 0) (19 19 0) (37/2 37/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  15
  11
  3
  1
  8
  2
  10
  1
  13/18
  10
  #f
  12/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  366
  344
  14
  8
  313
  6
  319
  1
  677/716
  162
  #f
  281/172
  ((39/2 39/2 0) (39/2 39/2 0) (19 19 1/2)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  348
  326
  14
  8
  303
  6
  309
  1
  2063/2148
  156
  #f
  266/163
  ((35/2 35/2 1/2) (18 18 1/2) (18 18 1/2)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  351
  330
  14
  7
  302
  6
  308
  1
  655/692
  159
  #f
  179/110
  ((18 18 1/2) (35/2 35/2 1/2) (19 19 1/2)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  261
  243
  12
  6
  222
  5
  227
  1
  1117/1200
  112
  #f
  410/243
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  101
  94
  5
  2
  86
  3
  89
  1
  227/237
  56
  #f
  66/47
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  95
  88
  5
  2
  82
  3
  85
  1
  223/231
  53
  #f
  123/88
  ((17/2 17/2 0) (8 8 0) (17/2 17/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  257
  239
  12
  6
  219
  5
  224
  1
  1103/1176
  110
  #f
  404/239
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  262
  244
  12
  6
  213
  5
  218
  1
  353/392
  110
  #f
  207/122
  ((19/2 19/2 0) (19/2 19/2 0) (10 10 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  62
  54
  6
  2
  38
  3
  41
  1
  5/7
  26
  #f
  44/27
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  56
  48
  6
  2
  34
  3
  37
  1
  41/57
  23
  #f
  79/48
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  53
  45
  6
  2
  32
  3
  35
  1
  13/18
  23
  #f
  73/45
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  47
  39
  6
  2
  28
  3
  31
  1
  35/48
  20
  #f
  20/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  34
  26
  6
  2
  18
  3
  21
  1
  23/33
  13
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  260
  242
  12
  6
  212
  5
  217
  1
  1063/1176
  110
  #f
  205/121
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  240
  222
  12
  6
  204
  5
  209
  1
  1111/1176
  100
  #f
  190/111
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  15
  #f
  23/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  25
  17
  6
  2
  14
  3
  17
  1
  7/8
  13
  #f
  21/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  10
  #f
  28/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  219
  202
  12
  5
  177
  5
  182
  1
  89/100
  84
  #f
  178/101
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  210
  193
  12
  5
  171
  5
  176
  1
  259/288
  78
  #f
  344/193
  ((15/2 15/2 0) (8 8 0) (8 8 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  37
  29
  6
  2
  20
  3
  23
  1
  25/36
  16
  #f
  42/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  65
  57
  6
  2
  40
  3
  43
  1
  47/66
  26
  #f
  94/57
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  34
  26
  6
  2
  20
  3
  23
  1
  7/9
  20
  #f
  16/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  25
  17
  6
  2
  14
  3
  17
  1
  22/27
  13
  #f
  21/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  106
  99
  5
  2
  78
  3
  81
  1
  191/222
  54
  #f
  16/11
  ((33/2 33/2 1/2) (33/2 33/2 1/2) (33/2 33/2 1/2)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  206
  189
  12
  5
  168
  5
  173
  1
  51/56
  76
  #f
  16/9
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(clean-cache
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  199
  182
  12
  5
  162
  5
  167
  1
  32/35
  71
  #f
  327/182
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  199
  182
  12
  5
  153
  5
  158
  1
  733/840
  71
  #f
  327/182
  ((15/2 15/2 0) (8 8 0) (8 8 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  43
  30
  10
  3
  22
  4
  26
  1
  35/48
  10
  #f
  5/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  193
  176
  12
  5
  150
  5
  155
  1
  53/60
  69
  #f
  317/176
  ((7 7 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  186
  169
  12
  5
  147
  5
  152
  1
  127/140
  68
  #f
  306/169
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  43
  30
  10
  3
  22
  4
  26
  1
  17/22
  10
  #f
  5/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  73
  60
  10
  3
  46
  4
  50
  1
  63/80
  30
  #f
  19/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  33/40
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  80
  67
  10
  3
  48
  4
  52
  1
  107/144
  26
  #f
  114/67
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  80
  67
  10
  3
  48
  4
  52
  1
  217/300
  26
  #f
  114/67
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  127
  110
  12
  5
  88
  5
  93
  1
  467/552
  61
  #f
  181/110
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  43
  30
  10
  3
  22
  4
  26
  1
  35/48
  10
  #f
  5/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  105
  88
  12
  5
  71
  5
  76
  1
  137/160
  54
  #t
  18/11
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  89
  75
  10
  4
  60
  4
  64
  1
  37/44
  41
  #t
  131/75
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  42
  29
  10
  3
  22
  4
  26
  1
  35/44
  10
  #f
  48/29
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  72
  59
  10
  3
  46
  4
  50
  1
  4/5
  30
  #f
  110/59
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  33/40
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  79
  66
  10
  3
  48
  4
  52
  1
  217/288
  26
  #f
  56/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  78
  65
  10
  3
  52
  4
  56
  1
  73/92
  32
  #f
  124/65
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  67/84
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  82
  69
  10
  3
  55
  4
  59
  1
  19/24
  36
  #f
  128/69
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  67/84
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  102
  85
  12
  5
  66
  5
  71
  1
  30/37
  51
  #t
  141/85
  ((7/2 7/2 0) (7/2 7/2 0) (4 4 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  96
  79
  12
  5
  63
  5
  68
  1
  57/68
  45
  #t
  135/79
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  96
  79
  12
  5
  63
  5
  68
  1
  57/68
  45
  #t
  135/79
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  360
  338
  14
  8
  317
  6
  323
  1
  699/724
  160
  #f
  276/169
  ((18 18 1/2) (18 18 1/2) (18 18 1/2)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  43
  36
  5
  2
  24
  3
  27
  1
  44/63
  22
  #f
  25/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  53
  42
  8
  3
  28
  4
  32
  1
  49/72
  22
  #f
  31/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  54
  43
  8
  3
  28
  4
  32
  1
  2/3
  23
  #t
  63/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  59
  48
  8
  3
  32
  4
  36
  1
  2/3
  25
  #f
  71/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  124
  104
  14
  6
  81
  6
  87
  1
  83/106
  58
  #t
  43/26
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  145
  125
  14
  6
  101
  6
  107
  1
  307/378
  68
  #f
  208/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  159
  139
  14
  6
  114
  6
  120
  1
  313/390
  77
  #t
  227/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  168
  148
  14
  6
  122
  6
  128
  1
  655/804
  77
  #f
  245/148
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  325
  301
  14
  10
  273
  6
  279
  1
  1997/2124
  164
  #f
  464/301
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  326
  302
  14
  10
  273
  6
  279
  1
  1991/2124
  164
  #f
  233/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  327
  303
  14
  10
  273
  6
  279
  1
  1987/2124
  164
  #f
  156/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  328
  304
  14
  10
  273
  6
  279
  1
  1981/2124
  164
  #f
  235/152
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  331
  307
  14
  10
  275
  6
  281
  1
  1975/2124
  167
  #t
  473/307
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  332
  308
  14
  10
  275
  6
  281
  1
  1969/2124
  167
  #f
  475/308
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  333
  309
  14
  10
  275
  6
  281
  1
  655/708
  167
  #f
  159/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  334
  310
  14
  10
  275
  6
  281
  1
  653/708
  167
  #f
  479/310
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  341
  317
  14
  10
  281
  6
  287
  1
  163/177
  171
  #f
  489/317
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  342
  318
  14
  10
  281
  6
  287
  1
  488/531
  171
  #f
  491/318
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  342
  318
  14
  10
  281
  6
  287
  1
  488/531
  171
  #t
  491/318
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  343
  319
  14
  10
  281
  6
  287
  1
  973/1062
  171
  #f
  17/11
  ((7 7 0) (7 7 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  344
  320
  14
  10
  281
  6
  287
  1
  971/1062
  171
  #f
  99/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  345
  321
  14
  10
  281
  6
  287
  1
  484/531
  171
  #f
  497/321
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  346
  322
  14
  10
  281
  6
  287
  1
  1933/2124
  171
  #f
  499/322
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  347
  323
  14
  10
  281
  6
  287
  1
  965/1062
  171
  #f
  501/323
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  347
  323
  14
  10
  281
  6
  287
  1
  965/1062
  171
  #t
  501/323
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  348
  324
  14
  10
  281
  6
  287
  1
  481/531
  171
  #f
  503/324
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  362
  338
  14
  10
  295
  6
  301
  1
  325/358
  176
  #f
  263/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  362
  338
  14
  10
  295
  6
  301
  1
  325/358
  176
  #f
  263/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  363
  339
  14
  10
  295
  6
  301
  1
  973/1074
  177
  #t
  527/339
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  364
  340
  14
  10
  295
  6
  301
  1
  971/1074
  177
  #f
  529/340
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  384
  360
  14
  10
  313
  6
  319
  1
  490/543
  183
  #f
  563/360
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  384
  360
  14
  10
  313
  6
  319
  1
  490/543
  183
  #f
  563/360
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  385
  361
  14
  10
  313
  6
  319
  1
  163/181
  183
  #f
  565/361
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  385
  361
  14
  10
  313
  6
  319
  1
  163/181
  183
  #f
  565/361
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  386
  362
  14
  10
  313
  6
  319
  1
  488/543
  184
  #t
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  387
  363
  14
  10
  313
  6
  319
  1
  487/543
  184
  #f
  568/363
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  388
  364
  14
  10
  313
  6
  319
  1
  162/181
  184
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  389
  365
  14
  10
  313
  6
  319
  1
  323/362
  184
  #f
  572/365
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  390
  366
  14
  10
  313
  6
  319
  1
  967/1086
  184
  #f
  287/183
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  391
  367
  14
  10
  313
  6
  319
  1
  482/543
  184
  #f
  576/367
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  392
  368
  14
  10
  313
  6
  319
  1
  1925/2172
  184
  #f
  145/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  393
  369
  14
  10
  313
  6
  319
  1
  1919/2172
  185
  #t
  581/369
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  394
  370
  14
  10
  313
  6
  319
  1
  1913/2172
  185
  #f
  583/370
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  395
  371
  14
  10
  313
  6
  319
  1
  1909/2172
  185
  #f
  585/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  396
  372
  14
  10
  313
  6
  319
  1
  1903/2172
  185
  #f
  587/372
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  397
  373
  14
  10
  313
  6
  319
  1
  633/724
  185
  #f
  589/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  398
  374
  14
  10
  313
  6
  319
  1
  158/181
  185
  #f
  591/374
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  399
  375
  14
  10
  313
  6
  319
  1
  315/362
  185
  #f
  593/375
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  400
  376
  14
  10
  313
  6
  319
  1
  943/1086
  185
  #f
  597/376
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  401
  377
  14
  10
  313
  6
  319
  1
  941/1086
  185
  #f
  599/377
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  402
  378
  14
  10
  313
  6
  319
  1
  469/543
  185
  #f
  601/378
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  403
  379
  14
  10
  313
  6
  319
  1
  156/181
  185
  #f
  603/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  404
  380
  14
  10
  313
  6
  319
  1
  623/724
  185
  #f
  121/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  404
  380
  14
  10
  313
  6
  319
  1
  623/724
  185
  #f
  121/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  404
  380
  14
  10
  313
  6
  319
  1
  623/724
  185
  #f
  121/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  405
  381
  14
  10
  313
  6
  319
  1
  621/724
  186
  #t
  202/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  406
  382
  14
  10
  313
  6
  319
  1
  619/724
  186
  #f
  304/191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  407
  383
  14
  10
  313
  6
  319
  1
  1853/2172
  186
  #f
  610/383
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  408
  384
  14
  10
  313
  6
  319
  1
  925/1086
  186
  #f
  51/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  409
  385
  14
  10
  313
  6
  319
  1
  461/543
  186
  #f
  614/385
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  410
  386
  14
  10
  313
  6
  319
  1
  1841/2172
  186
  #f
  309/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  411
  387
  14
  10
  313
  6
  319
  1
  1837/2172
  186
  #f
  620/387
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  412
  388
  14
  10
  313
  6
  319
  1
  611/724
  186
  #f
  311/194
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  412
  388
  14
  10
  313
  6
  319
  1
  611/724
  186
  #f
  311/194
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  413
  389
  14
  10
  313
  6
  319
  1
  609/724
  186
  #f
  624/389
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  414
  390
  14
  10
  313
  6
  319
  1
  607/724
  186
  #f
  313/195
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  415
  391
  14
  10
  313
  6
  319
  1
  303/362
  186
  #f
  628/391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  416
  392
  14
  10
  313
  6
  319
  1
  907/1086
  187
  #t
  629/392
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  417
  393
  14
  10
  313
  6
  319
  1
  452/543
  187
  #f
  631/393
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  418
  394
  14
  10
  313
  6
  319
  1
  901/1086
  187
  #f
  633/394
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  419
  395
  14
  10
  313
  6
  319
  1
  899/1086
  187
  #f
  127/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  420
  396
  14
  10
  314
  6
  320
  1
  905/1092
  187
  #f
  637/396
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  421
  397
  14
  10
  314
  6
  320
  1
  451/546
  187
  #f
  639/397
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  422
  398
  14
  10
  314
  6
  320
  1
  899/1092
  187
  #f
  641/398
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  423
  399
  14
  10
  314
  6
  320
  1
  1795/2184
  187
  #f
  215/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  423
  399
  14
  10
  314
  6
  320
  1
  1795/2184
  187
  #f
  215/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  424
  400
  14
  10
  314
  6
  320
  1
  32/39
  187
  #f
  647/400
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  425
  401
  14
  10
  314
  6
  320
  1
  149/182
  187
  #f
  649/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  426
  402
  14
  10
  314
  6
  320
  1
  223/273
  187
  #f
  217/134
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  427
  403
  14
  10
  314
  6
  320
  1
  445/546
  187
  #f
  653/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  428
  404
  14
  10
  314
  6
  320
  1
  887/1092
  187
  #f
  655/404
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  429
  405
  14
  10
  314
  6
  320
  1
  295/364
  187
  #f
  73/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  429
  405
  14
  10
  314
  6
  320
  1
  295/364
  187
  #f
  73/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  430
  406
  14
  10
  314
  6
  320
  1
  883/1092
  187
  #f
  659/406
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  431
  407
  14
  10
  314
  6
  320
  1
  1763/2184
  187
  #f
  661/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  432
  408
  14
  10
  314
  6
  320
  1
  220/273
  187
  #f
  13/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  433
  409
  14
  10
  314
  6
  320
  1
  439/546
  187
  #f
  665/409
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  433
  409
  14
  10
  314
  6
  320
  1
  439/546
  187
  #f
  665/409
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  434
  410
  14
  10
  314
  6
  320
  1
  1753/2184
  187
  #f
  667/410
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  435
  411
  14
  10
  314
  6
  320
  1
  1747/2184
  187
  #f
  223/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  436
  412
  14
  10
  314
  6
  320
  1
  83/104
  187
  #f
  671/412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  437
  413
  14
  10
  314
  6
  320
  1
  579/728
  187
  #f
  673/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  438
  414
  14
  10
  314
  6
  320
  1
  289/364
  187
  #f
  677/414
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  193
  176
  12
  5
  150
  5
  155
  1
  53/60
  69
  #f
  317/176
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  194
  177
  12
  5
  150
  5
  155
  1
  739/840
  69
  #f
  107/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  195
  178
  12
  5
  150
  5
  155
  1
  7/8
  69
  #f
  325/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  207
  187
  14
  6
  155
  6
  161
  1
  17/20
  73
  #f
  339/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  208
  188
  14
  6
  155
  6
  161
  1
  255/304
  73
  #f
  341/188
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  225
  205
  14
  6
  169
  6
  175
  1
  853/1020
  86
  #f
  362/205
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  376
  353
  14
  9
  317
  6
  323
  1
  2027/2172
  164
  #f
  580/353
  ((19/2 19/2 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  376
  353
  14
  9
  317
  6
  323
  1
  2027/2172
  164
  #f
  580/353
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  377
  354
  14
  9
  317
  6
  323
  1
  2021/2172
  164
  #f
  97/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  378
  355
  14
  9
  317
  6
  323
  1
  2015/2172
  164
  #f
  584/355
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  379
  356
  14
  9
  317
  6
  323
  1
  2011/2172
  164
  #f
  293/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  380
  357
  14
  9
  317
  6
  323
  1
  669/724
  164
  #f
  28/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  381
  358
  14
  9
  317
  6
  323
  1
  167/181
  164
  #f
  295/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  382
  359
  14
  9
  317
  6
  323
  1
  667/724
  164
  #f
  594/359
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  383
  360
  14
  9
  317
  6
  323
  1
  333/362
  164
  #f
  149/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  384
  361
  14
  9
  317
  6
  323
  1
  166/181
  164
  #f
  598/361
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  384
  361
  14
  9
  317
  6
  323
  1
  166/181
  164
  #f
  598/361
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  384
  361
  14
  9
  317
  6
  323
  1
  166/181
  164
  #f
  598/361
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  385
  362
  14
  9
  317
  6
  323
  1
  497/543
  164
  #f
  300/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  386
  363
  14
  9
  317
  6
  323
  1
  496/543
  164
  #f
  602/363
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  387
  364
  14
  9
  317
  6
  323
  1
  989/1086
  164
  #f
  151/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  387
  364
  14
  9
  317
  6
  323
  1
  989/1086
  164
  #f
  151/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  388
  365
  14
  9
  317
  6
  323
  1
  493/543
  164
  #f
  606/365
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  389
  366
  14
  9
  317
  6
  323
  1
  164/181
  164
  #f
  304/183
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  390
  367
  14
  9
  317
  6
  323
  1
  491/543
  164
  #f
  610/367
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  391
  368
  14
  9
  317
  6
  323
  1
  490/543
  164
  #f
  153/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  391
  368
  14
  9
  317
  6
  323
  1
  490/543
  164
  #f
  153/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  392
  369
  14
  9
  317
  6
  323
  1
  977/1086
  164
  #f
  614/369
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  393
  370
  14
  9
  317
  6
  323
  1
  1951/2172
  164
  #f
  308/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  394
  371
  14
  9
  317
  6
  323
  1
  1945/2172
  164
  #f
  618/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  395
  372
  14
  9
  317
  6
  323
  1
  647/724
  164
  #f
  5/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  396
  373
  14
  9
  317
  6
  323
  1
  323/362
  164
  #f
  622/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  397
  374
  14
  9
  317
  6
  323
  1
  645/724
  164
  #f
  313/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  398
  375
  14
  9
  317
  6
  323
  1
  1931/2172
  164
  #f
  628/375
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  398
  375
  14
  9
  317
  6
  323
  1
  1931/2172
  164
  #f
  628/375
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  399
  376
  14
  9
  317
  6
  323
  1
  1927/2172
  164
  #f
  315/188
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  400
  377
  14
  9
  317
  6
  323
  1
  481/543
  164
  #f
  632/377
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  401
  378
  14
  9
  317
  6
  323
  1
  959/1086
  164
  #f
  317/189
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  401
  378
  14
  9
  317
  6
  323
  1
  959/1086
  164
  #f
  317/189
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  402
  379
  14
  9
  317
  6
  323
  1
  478/543
  164
  #f
  636/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  403
  380
  14
  9
  317
  6
  323
  1
  953/1086
  164
  #f
  319/190
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  404
  381
  14
  9
  317
  6
  323
  1
  317/362
  164
  #f
  640/381
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  405
  382
  14
  9
  317
  6
  323
  1
  158/181
  164
  #f
  321/191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  406
  383
  14
  9
  317
  6
  323
  1
  473/543
  164
  #f
  644/383
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  407
  384
  14
  9
  317
  6
  323
  1
  943/1086
  164
  #f
  323/192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  408
  385
  14
  9
  317
  6
  323
  1
  941/1086
  165
  #t
  647/385
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  409
  386
  14
  9
  317
  6
  323
  1
  469/543
  165
  #f
  649/386
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  410
  387
  14
  9
  318
  6
  324
  1
  236/273
  165
  #f
  217/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  411
  388
  14
  9
  318
  6
  324
  1
  941/1092
  165
  #f
  653/388
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  412
  389
  14
  9
  318
  6
  324
  1
  67/78
  165
  #f
  655/389
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  413
  390
  14
  9
  318
  6
  324
  1
  6/7
  165
  #f
  219/130
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  414
  391
  14
  9
  318
  6
  324
  1
  89/104
  165
  #f
  659/391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  414
  391
  14
  9
  318
  6
  324
  1
  89/104
  165
  #f
  659/391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  414
  391
  14
  9
  318
  6
  324
  1
  89/104
  165
  #f
  659/391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  415
  392
  14
  9
  318
  6
  324
  1
  621/728
  165
  #f
  661/392
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  417
  393
  14
  10
  318
  6
  324
  1
  619/728
  165
  #f
  221/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  417
  393
  14
  10
  318
  6
  324
  1
  619/728
  165
  #f
  221/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  417
  393
  14
  10
  318
  6
  324
  1
  619/728
  165
  #f
  221/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  418
  394
  14
  10
  318
  6
  324
  1
  1853/2184
  166
  #t
  332/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  418
  394
  14
  10
  318
  6
  324
  1
  1853/2184
  166
  #f
  332/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  419
  395
  14
  10
  318
  6
  324
  1
  1847/2184
  166
  #f
  666/395
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  420
  396
  14
  10
  318
  6
  324
  1
  461/546
  166
  #f
  167/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  420
  396
  14
  10
  318
  6
  324
  1
  461/546
  166
  #f
  167/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  421
  397
  14
  10
  318
  6
  324
  1
  230/273
  166
  #f
  670/397
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  422
  398
  14
  10
  318
  6
  324
  1
  131/156
  166
  #f
  336/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  423
  399
  14
  10
  318
  6
  324
  1
  1831/2184
  166
  #f
  674/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  423
  399
  14
  10
  318
  6
  324
  1
  1831/2184
  166
  #f
  674/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  423
  399
  14
  10
  318
  6
  324
  1
  1831/2184
  166
  #f
  674/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  424
  400
  14
  10
  318
  6
  324
  1
  87/104
  167
  #t
  27/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  425
  401
  14
  10
  318
  6
  324
  1
  607/728
  167
  #f
  677/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  425
  401
  14
  10
  318
  6
  324
  1
  607/728
  167
  #f
  677/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  425
  401
  14
  10
  318
  6
  324
  1
  607/728
  167
  #f
  677/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  426
  402
  14
  10
  318
  6
  324
  1
  303/364
  167
  #f
  227/134
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  427
  403
  14
  10
  318
  6
  324
  1
  151/182
  167
  #f
  683/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  427
  403
  14
  10
  318
  6
  324
  1
  151/182
  167
  #f
  683/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  428
  404
  14
  10
  318
  6
  324
  1
  226/273
  167
  #f
  685/404
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  428
  404
  14
  10
  318
  6
  324
  1
  226/273
  167
  #t
  685/404
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  428
  404
  14
  10
  318
  6
  324
  1
  226/273
  167
  #f
  685/404
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  429
  405
  14
  10
  318
  6
  324
  1
  901/1092
  167
  #f
  229/135
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  430
  406
  14
  10
  318
  6
  324
  1
  899/1092
  167
  #f
  689/406
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  431
  407
  14
  10
  318
  6
  324
  1
  32/39
  167
  #f
  691/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  432
  408
  14
  10
  318
  6
  324
  1
  1789/2184
  167
  #f
  231/136
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  432
  408
  14
  10
  318
  6
  324
  1
  1789/2184
  167
  #f
  231/136
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  433
  409
  14
  10
  318
  6
  324
  1
  1783/2184
  167
  #f
  695/409
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  434
  410
  14
  10
  318
  6
  324
  1
  1777/2184
  167
  #f
  17/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  435
  411
  14
  10
  318
  6
  324
  1
  887/1092
  167
  #f
  233/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  436
  412
  14
  10
  318
  6
  324
  1
  295/364
  167
  #f
  701/412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  437
  413
  14
  10
  318
  6
  324
  1
  883/1092
  167
  #f
  703/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  438
  414
  14
  10
  318
  6
  324
  1
  1763/2184
  167
  #f
  235/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  439
  415
  14
  10
  318
  6
  324
  1
  251/312
  167
  #f
  707/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  439
  415
  14
  10
  318
  6
  324
  1
  251/312
  167
  #t
  707/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  440
  416
  14
  10
  318
  6
  324
  1
  877/1092
  167
  #f
  709/416
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  441
  417
  14
  10
  318
  6
  324
  1
  437/546
  167
  #f
  237/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  442
  418
  14
  10
  318
  6
  324
  1
  67/84
  167
  #f
  713/418
  ((0 0 0) (0 0 0) (0 0 0)))
