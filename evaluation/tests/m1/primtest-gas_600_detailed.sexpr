'(clean-cache
  primtest
  1
  600
  219
  letrec*
  "'(eval ((top) letrec* (square ... byte-size) ...) (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (letrec* (... iterations (byte-size (-> 15 <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval\n  (letrec*\n   (... generate-fermat-prime (iterations (-> 10 <-)) byte-size ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-fermat-prime?\n    (generate-fermat-prime (-> (λ (byte-size iterations) ...) <-))\n    iterations\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  let
  "'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))"
  #f
  15
  11
  3
  1
  8
  2
  10
  1
  13/18
  10
  #f
  12/11
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))"
  #f
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  5
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (let (n) (-> (match (match (app not ...) ...) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  5
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  5
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> generate-fermat-prime <-) byte-size iterations)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match (-> (match (app not (app is-trivial-composite? ...)) ...) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app not (app is-trivial-composite? n))\n   (#f)\n   (_ (-> (match (app is-fermat-prime? n iterations) ...) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (-> (app is-fermat-prime? n iterations) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  5
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n iterations)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app not (app is-trivial-composite? n)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (-> (app not (app is-trivial-composite? n)) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  128
  121
  5
  2
  113
  3
  116
  1
  154/159
  75
  #f
  167/121
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  120
  113
  5
  2
  107
  3
  110
  1
  149/153
  70
  #f
  156/113
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-trivial-composite? <-) n)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> not <-) (app is-trivial-composite? n))\n  (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-trivial-composite?\n    (is-fermat-prime? (-> (λ (n iterations) ...) <-))\n    generate-fermat-prime\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (λ (n iterations) (-> (match (app <= iterations 0) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app <= iterations 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app <= iterations 0)\n   ((#f) (-> (match (let* (byte-size ... a) ...) ...) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  let*
  "'(eval\n  (match (-> (let* (byte-size ... a) ...) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))"
  #f
  62
  54
  6
  2
  38
  3
  41
  1
  5/7
  29
  #f
  79/54
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))"
  #f
  56
  48
  6
  2
  34
  3
  37
  1
  41/57
  26
  #f
  35/24
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log ...) (app log ...))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  53
  45
  6
  2
  32
  3
  35
  1
  13/18
  26
  #f
  64/45
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))"
  #f
  47
  39
  6
  2
  28
  3
  31
  1
  35/48
  23
  #f
  55/39
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app log (-> 2 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> log <-) 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))"
  #f
  34
  26
  6
  2
  18
  3
  21
  1
  23/33
  13
  #f
  3/2
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app log (-> n <-)) (env ((□? (n iterations)))))"
  #f
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> log <-) n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> / <-) (app log n) (app log 2)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> ceiling <-) (app / (app log n) (app log 2)))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (let* (byte-size ... a) (-> (match (app = (app modulo-power ...) 1) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))"
  #f
  244
  226
  12
  6
  208
  5
  213
  1
  1159/1224
  105
  #f
  347/226
  (7 7 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))"
  #f
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  15
  #f
  23/19
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app - iterations (-> 1 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))"
  #f
  25
  17
  6
  2
  14
  3
  17
  1
  7/8
  13
  #f
  21/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> - <-) iterations 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #f
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  10
  #f
  28/19
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (-> (app = (app modulo-power a (app - ...) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  219
  202
  12
  5
  177
  5
  182
  1
  89/100
  86
  #f
  159/101
  (7 7 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval\n  (app = (app modulo-power a (app - n 1) n) (-> 1 <-))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))"
  #f
  210
  193
  12
  5
  171
  5
  176
  1
  259/288
  80
  #f
  306/193
  (7 7 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))"
  #f
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))"
  #f
  37
  29
  6
  2
  20
  3
  23
  1
  25/36
  16
  #f
  42/29
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))"
  #f
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))"
  #f
  65
  57
  6
  2
  40
  3
  43
  1
  47/66
  29
  #f
  85/57
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) a (app - n 1) n) (env ((□? (n iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> = <-) (app modulo-power a (app - n 1) n) 1)\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (-> (app <= iterations 0) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  34
  26
  6
  2
  20
  3
  23
  1
  7/9
  20
  #f
  16/13
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app <= iterations (-> 0 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))"
  #f
  25
  17
  6
  2
  14
  3
  17
  1
  22/27
  13
  #f
  21/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> <= <-) iterations 0) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    modulo-power\n    (is-trivial-composite? (-> (λ (n) ...) <-))\n    is-fermat-prime?\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval (λ (n) (-> (match (app = (app modulo ...) 0) ...) <-)) (env ((□? (n)))))"
  #f
  124
  117
  5
  2
  103
  3
  106
  1
  553/594
  71
  #f
  163/117
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 2) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 2) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  114
  107
  5
  2
  93
  3
  96
  1
  493/534
  65
  #f
  149/107
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 3) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 3) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  104
  97
  5
  2
  83
  3
  86
  1
  433/474
  59
  #f
  135/97
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 5) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 5) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  94
  87
  5
  2
  73
  3
  76
  1
  373/414
  53
  #f
  121/87
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 7) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 7) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  84
  77
  5
  2
  63
  3
  66
  1
  313/354
  47
  #f
  107/77
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 11) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 11) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  74
  67
  5
  2
  53
  3
  56
  1
  253/294
  41
  #f
  93/67
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 13) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 13) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  64
  57
  5
  2
  43
  3
  46
  1
  193/234
  35
  #f
  79/57
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 17) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 17) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  54
  47
  5
  2
  33
  3
  36
  1
  133/174
  29
  #f
  65/47
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 19) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 19) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  44
  37
  5
  2
  23
  3
  26
  1
  73/114
  24
  #f
  50/37
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 23) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 23) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 23 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 23) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 23) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 19) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 19) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 19 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 19) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 19) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 17) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 17) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 17 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 17) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 17) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 13) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 13) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 13 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 13) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 13) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 11) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 11) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 11 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 11) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 11) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 7) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 7) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 7 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 7) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 7) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 5) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 5) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 5 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 5) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 5) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 3) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 3) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 3 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 3) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 3) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 2) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = (app modulo n 2) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))"
  #f
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app modulo n (-> 2 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))"
  #f
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 2) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 2) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    square\n    (modulo-power (-> (λ (base exp n) ...) <-))\n    is-trivial-composite?\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))"
  #f
  206
  189
  12
  5
  168
  5
  173
  1
  51/56
  78
  #f
  100/63
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (match (app = exp 0) (#f) (_ (-> 1 <-))) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  match
  "'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))"
  #f
  199
  182
  12
  5
  162
  5
  167
  1
  32/35
  73
  #f
  291/182
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_ (-> (app modulo (app * base (app modulo-power ...)) n) <-)))\n  (env ((□? (base exp n)))))"
  #f
  199
  182
  12
  5
  153
  5
  158
  1
  733/840
  74
  #f
  145/91
  (7 7 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo (app * base (app modulo-power base (app - ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  43
  30
  10
  3
  22
  4
  26
  1
  35/48
  10
  #f
  5/3
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  193
  176
  12
  5
  150
  5
  155
  1
  53/60
  72
  #f
  35/22
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  186
  169
  12
  5
  147
  5
  152
  1
  127/140
  70
  #f
  268/169
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  43
  30
  10
  3
  22
  4
  26
  1
  17/22
  10
  #f
  5/3
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  73
  60
  10
  3
  46
  4
  50
  1
  63/80
  30
  #f
  3/2
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app - exp (-> 1 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))"
  #f
  70
  57
  10
  3
  46
  4
  50
  1
  33/40
  28
  #f
  86/57
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> - <-) exp 1) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #f
  80
  67
  10
  3
  48
  4
  52
  1
  107/144
  29
  #f
  105/67
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #f
  80
  67
  10
  3
  48
  4
  52
  1
  217/300
  29
  #f
  105/67
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> * <-) base (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app * base (app modulo-power base (app - ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (match\n   (app odd? exp)\n   ((#f) (-> (app modulo (app square (app modulo-power ...)) n) <-))\n   _)\n  (env ((□? (base exp n)))))"
  #f
  191
  174
  12
  5
  150
  5
  155
  1
  9/10
  73
  #f
  275/174
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo (app square (app modulo-power base (app / ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  43
  30
  10
  3
  22
  4
  26
  1
  35/48
  10
  #f
  5/3
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app modulo (-> (app square (app modulo-power base (app / ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  185
  168
  12
  5
  147
  5
  152
  1
  51/56
  71
  #f
  265/168
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  182
  165
  12
  5
  146
  5
  151
  1
  193/210
  69
  #f
  87/55
  (5 5 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  42
  29
  10
  3
  22
  4
  26
  1
  35/44
  10
  #f
  48/29
  (1 1 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  72
  59
  10
  3
  46
  4
  50
  1
  4/5
  30
  #f
  88/59
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app / exp (-> 2 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))"
  #f
  70
  57
  10
  3
  46
  4
  50
  1
  33/40
  28
  #f
  86/57
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> / <-) exp 2) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #f
  79
  66
  10
  3
  48
  4
  52
  1
  217/288
  29
  #f
  103/66
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> square <-) (app modulo-power base (app / exp 2) n))\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app square (app modulo-power base (app / ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  78
  65
  10
  3
  52
  4
  56
  1
  73/92
  32
  #f
  98/65
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))"
  #f
  70
  57
  10
  3
  46
  4
  50
  1
  67/84
  28
  #f
  86/57
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> odd? <-) exp) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  82
  69
  10
  3
  55
  4
  59
  1
  19/24
  36
  #f
  34/23
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  number
  "'(eval (app = exp (-> 0 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))"
  #f
  70
  57
  10
  3
  46
  4
  50
  1
  67/84
  28
  #f
  86/57
  (2 2 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) exp 0) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  lambda
  "'(eval\n  (letrec* (... () (square (-> (λ (x) ...) <-)) modulo-power ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))"
  #f
  187
  169
  12
  6
  146
  5
  151
  1
  187/210
  70
  #f
  268/169
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app * x (-> x <-)) (env ((□? (x)))))"
  #f
  184
  166
  12
  6
  146
  5
  151
  1
  383/420
  69
  #f
  263/166
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app * (-> x <-) x) (env ((□? (x)))))"
  #f
  184
  166
  12
  6
  146
  5
  151
  1
  383/420
  69
  #f
  263/166
  (6 6 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> * <-) x x) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  app
  "'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  1
  600
  219
  ref-or-constructor
  "'(eval (app (-> generate-fermat-prime <-) byte-size iterations) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
