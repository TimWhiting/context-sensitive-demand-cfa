'(clean-cache
  map
  1
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(clean-cache
  map
  1
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  #f)
'(clean-cache
  map
  1
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  32
  20
  7
  5
  13
  6
  19
  1
  3/4
  16
  #f
  26/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  30
  17
  7
  6
  12
  6
  18
  1
  101/120
  13
  #f
  89/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  1
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  1
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  1
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  #f)
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  #f)
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  31
  #f
  308/59
  ((12 25/2 0) (25/2 25/2 0) (12 12 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  29
  #f
  282/53
  ((12 12 0) (13 13 0) (23/2 12 0)))
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  #f)
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  31
  #f
  308/59
  ((12 12 0) (12 12 0) (23/2 12 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  29
  #f
  282/53
  ((25/2 25/2 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  map
  1
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  29
  #f
  282/53
  ((11 23/2 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  88
  54
  26
  8
  34
  16
  50
  1
  157/192
  29
  #f
  145/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  88
  54
  26
  8
  34
  16
  50
  1
  157/192
  29
  #f
  145/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  135
  95
  30
  10
  63
  18
  81
  1
  793/918
  53
  #f
  547/95
  ((25/2 13 0) (13 13 0) (13 27/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  136
  96
  30
  10
  63
  18
  81
  1
  793/918
  53
  #f
  93/16
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  136
  96
  30
  10
  63
  18
  81
  1
  793/918
  53
  #t
  93/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  169
  124
  32
  13
  87
  19
  106
  1
  1225/1368
  68
  #f
  727/124
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  169
  124
  32
  13
  87
  19
  106
  1
  1225/1368
  68
  #f
  727/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  184
  138
  32
  14
  100
  19
  119
  1
  8/9
  76
  #f
  134/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  184
  138
  32
  14
  100
  19
  119
  1
  8/9
  76
  #t
  134/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  186
  140
  32
  14
  101
  19
  120
  1
  2423/2736
  76
  #f
  204/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  191
  145
  32
  14
  101
  19
  120
  1
  2387/2736
  80
  #f
  842/145
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  194
  147
  32
  15
  101
  19
  120
  1
  2351/2736
  80
  #f
  857/147
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  233
  186
  32
  15
  111
  19
  130
  1
  737/912
  108
  #f
  539/93
  ((15/2 15/2 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  247
  200
  32
  15
  119
  19
  138
  1
  3703/4680
  117
  #f
  1157/200
  ((7/2 7/2 0) (7/2 7/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  248
  201
  32
  15
  119
  19
  138
  1
  3673/4680
  117
  #f
  1166/201
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  252
  205
  32
  15
  122
  19
  141
  1
  3823/4860
  118
  #f
  1183/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  253
  206
  32
  15
  122
  19
  141
  1
  11459/14580
  118
  #f
  1189/206
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  258
  210
  32
  16
  122
  19
  141
  1
  11099/14580
  120
  #f
  608/105
  ((3 3 0) (3 7/2 0) (3 7/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  258
  210
  32
  16
  122
  19
  141
  1
  11099/14580
  120
  #f
  608/105
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  259
  211
  32
  16
  122
  19
  141
  1
  11039/14580
  120
  #f
  1222/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  259
  211
  32
  16
  122
  19
  141
  1
  11039/14580
  120
  #t
  1222/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  260
  212
  32
  16
  122
  19
  141
  1
  10949/14580
  120
  #f
  1231/212
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  260
  212
  32
  16
  122
  19
  141
  1
  10949/14580
  120
  #t
  1231/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  263
  215
  32
  16
  122
  19
  141
  1
  76313/102060
  122
  #f
  250/43
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  263
  215
  32
  16
  122
  19
  141
  1
  76313/102060
  122
  #t
  250/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  264
  216
  32
  16
  122
  19
  141
  1
  75683/102060
  122
  #f
  209/36
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  267
  219
  32
  16
  125
  19
  144
  1
  78413/104580
  123
  #f
  1271/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  277
  223
  37
  17
  127
  23
  150
  1
  78413/105840
  126
  #f
  1290/223
  ((3 3 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  277
  223
  37
  17
  127
  23
  150
  1
  78413/105840
  126
  #t
  1290/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  278
  224
  37
  17
  127
  23
  150
  1
  78343/105840
  127
  #t
  185/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  282
  228
  37
  17
  128
  23
  151
  1
  39119/53550
  129
  #f
  439/76
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  286
  232
  37
  17
  131
  23
  154
  1
  20347/27720
  130
  #f
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  287
  233
  37
  17
  131
  23
  154
  1
  10121/13860
  130
  #f
  1341/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  289
  235
  37
  17
  133
  23
  156
  1
  10436/14175
  130
  #f
  1353/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  289
  235
  37
  17
  133
  23
  156
  1
  10436/14175
  130
  #t
  1353/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  296
  241
  37
  18
  138
  23
  161
  1
  22132/29925
  136
  #t
  1383/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  297
  242
  37
  18
  138
  23
  161
  1
  14743/19950
  137
  #t
  1391/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  306
  249
  37
  20
  140
  23
  163
  1
  14953/20160
  137
  #f
  1427/249
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  306
  249
  37
  20
  140
  23
  163
  1
  14953/20160
  137
  #t
  1427/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  306
  249
  37
  20
  140
  23
  163
  1
  14953/20160
  137
  #t
  1427/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  307
  250
  37
  20
  140
  23
  163
  1
  4961/6720
  137
  #f
  717/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  307
  250
  37
  20
  140
  23
  163
  1
  4961/6720
  137
  #f
  717/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  308
  251
  37
  20
  140
  23
  163
  1
  4961/6720
  137
  #f
  1445/251
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  314
  257
  37
  20
  145
  23
  168
  1
  5031/6860
  143
  #t
  1475/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  314
  257
  37
  20
  145
  23
  168
  1
  5031/6860
  143
  #t
  1475/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  317
  259
  37
  21
  145
  23
  168
  1
  14953/20580
  145
  #t
  1485/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  318
  260
  37
  21
  146
  23
  169
  1
  15163/20790
  145
  #f
  1491/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  318
  260
  37
  21
  146
  23
  169
  1
  15163/20790
  145
  #t
  1491/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  31
  #f
  308/59
  ((25/2 25/2 0) (12 12 0) (25/2 25/2 0)))
'(shuffled-cache
  1
  map
  1
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  148
  108
  30
  10
  68
  18
  86
  1
  401/495
  58
  #f
  152/27
  ((7/2 7/2 0) (3 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  155
  114
  30
  11
  73
  18
  91
  1
  437/540
  64
  #t
  319/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  224
  180
  32
  12
  102
  19
  121
  1
  1081/1422
  111
  #f
  509/90
  ((21/2 11 0) (21/2 11 0) (25/2 13 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  238
  192
  32
  14
  114
  19
  133
  1
  3112/3915
  115
  #f
  181/32
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  239
  193
  32
  14
  114
  19
  133
  1
  12403/15660
  115
  #f
  1092/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  255
  203
  37
  15
  120
  23
  143
  1
  12883/16560
  120
  #f
  1137/203
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  255
  203
  37
  15
  120
  23
  143
  1
  12883/16560
  120
  #f
  1137/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  255
  203
  37
  15
  120
  23
  143
  1
  12883/16560
  120
  #f
  1137/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  255
  203
  37
  15
  120
  23
  143
  1
  12883/16560
  120
  #t
  1137/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  263
  210
  37
  16
  126
  23
  149
  1
  2579/3312
  124
  #f
  28/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  264
  211
  37
  16
  126
  23
  149
  1
  2567/3312
  124
  #f
  1182/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  265
  212
  37
  16
  126
  23
  149
  1
  17957/23184
  125
  #t
  1187/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  265
  212
  37
  16
  126
  23
  149
  1
  17957/23184
  125
  #t
  1187/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  270
  216
  37
  17
  126
  23
  149
  1
  17453/23184
  127
  #f
  607/108
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  273
  218
  37
  18
  126
  23
  149
  1
  17201/23184
  129
  #t
  612/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  287
  232
  37
  18
  134
  23
  157
  1
  1371/1880
  138
  #f
  1303/232
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  287
  232
  37
  18
  134
  23
  157
  1
  1371/1880
  138
  #f
  1303/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  287
  232
  37
  18
  134
  23
  157
  1
  1371/1880
  138
  #t
  1303/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  296
  239
  37
  20
  136
  23
  159
  1
  1391/1900
  138
  #f
  1339/239
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  296
  239
  37
  20
  136
  23
  159
  1
  1391/1900
  138
  #f
  1339/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  296
  239
  37
  20
  136
  23
  159
  1
  1391/1900
  138
  #t
  1339/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  298
  240
  37
  21
  136
  23
  159
  1
  1381/1900
  138
  #f
  45/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  299
  241
  37
  21
  136
  23
  159
  1
  1371/1900
  138
  #f
  1359/241
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  299
  241
  37
  21
  136
  23
  159
  1
  1371/1900
  138
  #f
  1359/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  300
  242
  37
  21
  136
  23
  159
  1
  683/950
  138
  #f
  1365/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  301
  243
  37
  21
  136
  23
  159
  1
  3071/4275
  138
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  302
  244
  37
  21
  136
  23
  159
  1
  323/450
  138
  #f
  1377/244
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  304
  246
  37
  21
  137
  23
  160
  1
  6107/8550
  138
  #f
  695/123
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  306
  248
  37
  21
  138
  23
  161
  1
  6077/8550
  138
  #f
  1403/248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  306
  248
  37
  21
  138
  23
  161
  1
  6077/8550
  138
  #t
  1403/248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  312
  254
  37
  21
  143
  23
  166
  1
  6197/8730
  144
  #t
  1433/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  312
  254
  37
  21
  143
  23
  166
  1
  6197/8730
  144
  #f
  1433/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  312
  254
  37
  21
  143
  23
  166
  1
  6197/8730
  144
  #t
  1433/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  312
  254
  37
  21
  143
  23
  166
  1
  6197/8730
  144
  #t
  1433/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  313
  255
  37
  21
  143
  23
  166
  1
  6197/8730
  144
  #f
  1444/255
  ((3/2 3/2 0) (3/2 3/2 0) (1 3/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  313
  255
  37
  21
  143
  23
  166
  1
  6197/8730
  144
  #t
  1444/255
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  314
  256
  37
  21
  143
  23
  166
  1
  3076/4365
  144
  #f
  1453/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  314
  256
  37
  21
  143
  23
  166
  1
  3076/4365
  144
  #f
  1453/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  314
  256
  37
  21
  143
  23
  166
  1
  3076/4365
  144
  #t
  1453/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  314
  256
  37
  21
  143
  23
  166
  1
  3076/4365
  144
  #t
  1453/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  316
  258
  37
  21
  145
  23
  168
  1
  6257/8820
  144
  #f
  1465/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  316
  258
  37
  21
  145
  23
  168
  1
  6257/8820
  144
  #t
  1465/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  316
  258
  37
  21
  145
  23
  168
  1
  6257/8820
  144
  #t
  1465/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  317
  259
  37
  21
  145
  23
  168
  1
  6257/8820
  144
  #f
  1476/259
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  317
  259
  37
  21
  145
  23
  168
  1
  6257/8820
  144
  #f
  1476/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  317
  259
  37
  21
  145
  23
  168
  1
  6257/8820
  144
  #f
  1476/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  318
  260
  37
  21
  145
  23
  168
  1
  521/735
  145
  #t
  371/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  321
  263
  37
  21
  145
  23
  168
  1
  14533/20580
  147
  #f
  1503/263
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  322
  264
  37
  21
  146
  23
  169
  1
  14743/20790
  147
  #f
  503/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  322
  264
  37
  21
  146
  23
  169
  1
  14743/20790
  147
  #f
  503/88
  ((0 0 0) (0 0 0) (0 0 0)))
