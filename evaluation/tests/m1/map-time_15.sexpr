'(clean-cache
  map
  1
  15
  97
  lettypes
  "'(eval ((top) lettypes (cons ... nil) ...) (env ()))"
  #f
  109
  85
  16
  8
  65
  9
  74
  1
  509/540
  51
  #f
  189/85
  ((8 8 0)))
'(clean-cache
  map
  1
  15
  97
  letrec*
  "'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))"
  #f
  108
  84
  16
  8
  64
  9
  73
  1
  500/531
  51
  #f
  187/84
  ((8 8 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval (letrec* (... id (my-map (-> (λ (f l) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  let
  "'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))"
  #f
  130
  105
  16
  9
  71
  9
  80
  1
  407/486
  65
  #f
  229/105
  ((10 10 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))"
  #f
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> debug-trace <-)) (env ((□? (f l)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  letrec
  "'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))"
  #f
  127
  102
  16
  9
  69
  9
  78
  1
  401/477
  65
  #f
  13/6
  ((10 10 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval\n  (letrec (... () (lp (-> (λ (lst) ...) <-)) () ...) ...)\n  (env ((□? (f l)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  match
  "'(eval\n  (λ (lst) (-> (match (app not (app pair? ...)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  146
  124
  16
  6
  65
  9
  74
  1
  50/63
  85
  #f
  251/124
  ((12 12 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (lst)) (□? (f l)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id ...) (app car ...)) (app lp (app cdr ...))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  126
  101
  16
  9
  65
  9
  74
  1
  389/468
  67
  #f
  219/101
  ((10 10 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  34
  #f
  31/13
  ((5 5 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  34
  #f
  31/13
  ((6 6 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> cdr <-) lst) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> lp <-) (app cdr lst)) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  160
  115
  35
  10
  76
  22
  98
  1
  161/183
  70
  #f
  221/115
  ((10 10 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  88
  66
  16
  6
  40
  9
  49
  1
  284/333
  40
  #f
  27/11
  ((9 9 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  34
  #f
  31/13
  ((6 6 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> car <-) lst) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))"
  #f
  32
  20
  7
  5
  13
  6
  19
  1
  3/4
  16
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  13/12
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> id <-) f) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app (app id f) (app car lst)) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  107
  85
  16
  6
  49
  9
  58
  1
  37/44
  55
  #f
  37/17
  ((9 9 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  91
  69
  16
  6
  43
  9
  52
  1
  311/360
  44
  #f
  164/69
  ((9 9 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  34
  #f
  31/13
  ((6 6 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> pair? <-) lst) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> not <-) (app pair? lst)) (env ((□? (lst)) (□? (f l)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))"
  #f
  124
  99
  16
  9
  67
  9
  76
  1
  395/468
  65
  #f
  71/33
  ((10 10 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app lp (-> l <-)) (env ((□? (f l)))))"
  #f
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> lp <-) l) (env ((□? (f l)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval\n  (letrec* (... debug-trace (id (-> (λ (xx) ...) <-)) my-map ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  let
  "'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))"
  #f
  30
  17
  7
  6
  12
  6
  18
  1
  101/120
  13
  #f
  21/17
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))"
  #f
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> debug-trace <-)) (env ((□? (xx)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))"
  #f
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  17/15
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval\n  (letrec* (... pair? (debug-trace (-> (λ () ...) <-)) id ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  constructor
  "'(eval (app (-> #f <-)) (env ((□? ()))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval\n  (letrec* (... cdr (pair? (-> (λ (pair?-v) ...) <-)) debug-trace ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))"
  #f
  85
  63
  16
  6
  41
  9
  50
  1
  187/222
  39
  #f
  53/21
  ((7 7 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))"
  #f
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  33
  #f
  144/55
  ((7 7 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval\n  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) pair? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  73
  53
  14
  6
  36
  8
  44
  1
  157/180
  33
  #f
  135/53
  ((5 5 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  72
  52
  14
  6
  36
  8
  44
  1
  8/9
  33
  #f
  5/2
  ((5 5 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  71
  51
  14
  6
  36
  8
  44
  1
  163/180
  33
  #f
  125/51
  ((5 5 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  81
  59
  16
  6
  38
  9
  47
  1
  43/51
  33
  #f
  157/59
  ((7 7 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  79
  57
  16
  6
  37
  9
  46
  1
  169/198
  33
  #f
  51/19
  ((7 7 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  33
  #f
  144/55
  ((6 6 0)))
'(clean-cache
  map
  1
  15
  97
  let
  "'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))"
  #f
  107
  83
  16
  8
  63
  9
  72
  1
  491/522
  51
  #f
  185/83
  ((8 8 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (let (...\n        ()\n        (_\n         (-> (app my-map (app id (λ (a) ...)) (app cons 1 (app cons ...))) <-))\n        ()\n        ...)\n    ...)\n  (env ()))"
  #f
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  51
  #f
  183/82
  ((8 8 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app cons 3 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app cons (-> 3 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 3 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app cons (-> 2 <-) (app cons 3 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 2 (app cons 3 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app cons (-> 1 <-) (app cons 2 (app cons 3 (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 1 (app cons 2 (app cons 3 (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons ...))))\n  (env ()))"
  #f
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval (app id (-> (λ (a) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))"
  #f
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  36
  #f
  99/59
  ((4 4 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app + 1 (-> a <-)) (env ((□? (a)))))"
  #f
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  32
  #f
  91/53
  ((4 4 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app + (-> 1 <-) a) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> + <-) 1 a) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (a) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval\n  (app\n   (-> my-map <-)\n   (app id (λ (a) ...))\n   (app cons 1 (app cons 2 (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (let (_)\n    (-> (app my-map (app id (λ (b) ...)) (app cons 7 (app cons ...))) <-))\n  (env ()))"
  #f
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  51
  #f
  183/82
  ((9 9 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (app cons 9 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app cons (-> 9 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 9 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app cons (-> 8 <-) (app cons 9 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 8 (app cons 9 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app cons (-> 7 <-) (app cons 8 (app cons 9 (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 7 (app cons 8 (app cons 9 (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons ...))))\n  (env ()))"
  #f
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  lambda
  "'(eval (app id (-> (λ (b) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  app
  "'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))"
  #f
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  36
  #f
  99/59
  ((4 4 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app + 1 (-> b <-)) (env ((□? (b)))))"
  #f
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  32
  #f
  91/53
  ((4 4 0)))
'(clean-cache
  map
  1
  15
  97
  number
  "'(eval (app + (-> 1 <-) b) (env ((□? (b)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> + <-) 1 b) (env ((□? (b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (b) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  map
  1
  15
  97
  ref-or-constructor
  "'(eval\n  (app\n   (-> my-map <-)\n   (app id (λ (b) ...))\n   (app cons 7 (app cons 8 (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
