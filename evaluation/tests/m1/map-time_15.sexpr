'(clean-cache
  map
  1
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  109
  85
  16
  8
  65
  9
  74
  1
  509/540
  45
  #f
  523/85
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  108
  84
  16
  8
  64
  9
  73
  1
  500/531
  45
  #f
  517/84
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  130
  105
  16
  9
  71
  9
  80
  1
  407/486
  59
  #f
  643/105
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  127
  102
  16
  9
  69
  9
  78
  1
  401/477
  59
  #f
  623/102
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  map
  1
  15
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  146
  124
  16
  6
  65
  9
  74
  1
  50/63
  79
  #f
  741/124
  ((13 13 0) (25/2 25/2 0) (13 13 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  126
  101
  16
  9
  65
  9
  74
  1
  389/468
  61
  #f
  617/101
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  28
  #f
  163/26
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  28
  #f
  163/26
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  160
  115
  35
  10
  76
  22
  98
  1
  161/183
  62
  #f
  641/115
  ((12 12 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  88
  66
  16
  6
  40
  9
  49
  1
  284/333
  34
  #f
  69/11
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  28
  #f
  163/26
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  32
  20
  7
  5
  13
  6
  19
  1
  3/4
  16
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  107
  85
  16
  6
  49
  9
  58
  1
  37/44
  49
  #f
  519/85
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  91
  69
  16
  6
  43
  9
  52
  1
  311/360
  38
  #f
  434/69
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  28
  #f
  163/26
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  124
  99
  16
  9
  67
  9
  76
  1
  395/468
  59
  #f
  67/11
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  30
  17
  7
  6
  12
  6
  18
  1
  101/120
  13
  #f
  89/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  85
  63
  16
  6
  41
  9
  50
  1
  187/222
  33
  #f
  45/7
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  27
  #f
  358/55
  ((7 7 0) (7 7 0) (15/2 15/2 0)))
'(clean-cache
  map
  1
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  73
  53
  14
  6
  36
  8
  44
  1
  157/180
  27
  #f
  341/53
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  72
  52
  14
  6
  36
  8
  44
  1
  8/9
  27
  #f
  83/13
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  71
  51
  14
  6
  36
  8
  44
  1
  163/180
  27
  #f
  19/3
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(clean-cache
  map
  1
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  81
  59
  16
  6
  38
  9
  47
  1
  43/51
  27
  #f
  381/59
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  79
  57
  16
  6
  37
  9
  46
  1
  169/198
  27
  #f
  373/57
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  27
  #f
  358/55
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  map
  1
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  107
  83
  16
  8
  63
  9
  72
  1
  491/522
  45
  #f
  511/83
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  45
  #f
  505/82
  ((19/2 19/2 0) (9 9 0) (9 9 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  31
  #f
  308/59
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  29
  #f
  282/53
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  45
  #f
  505/82
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  31
  #f
  308/59
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  29
  #f
  282/53
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  115
  90
  18
  7
  60
  12
  72
  1
  421/486
  57
  #f
  266/45
  ((13/2 13/2 0) (13/2 13/2 0) (7 7 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  168
  126
  32
  10
  79
  19
  98
  1
  1007/1224
  73
  #f
  359/63
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  168
  126
  32
  10
  79
  19
  98
  1
  1007/1224
  73
  #t
  359/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  171
  128
  32
  11
  79
  19
  98
  1
  989/1224
  73
  #f
  733/128
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  189
  144
  32
  13
  95
  19
  114
  1
  619/729
  80
  #f
  137/24
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  189
  144
  32
  13
  95
  19
  114
  1
  619/729
  80
  #t
  137/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  200
  149
  37
  14
  98
  23
  121
  1
  628/747
  84
  #f
  846/149
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  205
  154
  37
  14
  98
  23
  121
  1
  6163/7470
  89
  #t
  437/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  210
  159
  37
  14
  98
  23
  121
  1
  6133/7470
  91
  #f
  902/159
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  211
  160
  37
  14
  98
  23
  121
  1
  3044/3735
  91
  #f
  453/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  216
  165
  37
  14
  98
  23
  121
  1
  5971/7470
  96
  #t
  931/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  216
  165
  37
  14
  98
  23
  121
  1
  5971/7470
  96
  #t
  931/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  216
  165
  37
  14
  98
  23
  121
  1
  5971/7470
  96
  #t
  931/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  219
  167
  37
  15
  98
  23
  121
  1
  5881/7470
  98
  #t
  941/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  222
  169
  37
  16
  98
  23
  121
  1
  5791/7470
  98
  #f
  961/169
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  225
  171
  37
  17
  98
  23
  121
  1
  5791/7650
  100
  #t
  971/171
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  226
  172
  37
  17
  98
  23
  121
  1
  169/225
  100
  #f
  245/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  238
  183
  37
  18
  108
  23
  131
  1
  4054/5355
  107
  #f
  1040/183
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  239
  184
  37
  18
  108
  23
  131
  1
  4054/5355
  107
  #f
  1051/184
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  261
  206
  37
  18
  124
  23
  147
  1
  976/1305
  122
  #f
  586/103
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  261
  206
  37
  18
  124
  23
  147
  1
  976/1305
  122
  #f
  586/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  263
  208
  37
  18
  124
  23
  147
  1
  961/1305
  124
  #t
  591/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  267
  212
  37
  18
  128
  23
  151
  1
  1957/2640
  124
  #f
  603/106
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  275
  219
  37
  19
  134
  23
  157
  1
  2047/2730
  131
  #t
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  275
  219
  37
  19
  134
  23
  157
  1
  2047/2730
  131
  #t
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  279
  223
  37
  19
  137
  23
  160
  1
  1061/1410
  132
  #f
  1258/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  279
  223
  37
  19
  137
  23
  160
  1
  1061/1410
  132
  #t
  1258/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  292
  236
  37
  19
  137
  23
  160
  1
  521/705
  140
  #f
  1343/236
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  293
  237
  37
  19
  137
  23
  160
  1
  1037/1410
  140
  #f
  1349/237
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  294
  238
  37
  19
  137
  23
  160
  1
  172/235
  140
  #f
  678/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  294
  238
  37
  19
  137
  23
  160
  1
  172/235
  140
  #f
  678/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  295
  239
  37
  19
  137
  23
  160
  1
  6187/8460
  140
  #f
  1360/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  295
  239
  37
  19
  137
  23
  160
  1
  6187/8460
  140
  #f
  1360/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  296
  240
  37
  19
  137
  23
  160
  1
  6187/8460
  140
  #f
  457/80
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  297
  241
  37
  19
  138
  23
  161
  1
  6277/8550
  140
  #f
  1377/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  297
  241
  37
  19
  138
  23
  161
  1
  6277/8550
  140
  #f
  1377/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  302
  246
  37
  19
  140
  23
  163
  1
  12539/17280
  142
  #f
  1405/246
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  302
  246
  37
  19
  140
  23
  163
  1
  12539/17280
  142
  #t
  1405/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  307
  251
  37
  19
  144
  23
  167
  1
  12779/17640
  147
  #t
  1430/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  316
  258
  37
  21
  146
  23
  169
  1
  12959/17820
  147
  #f
  733/129
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  319
  261
  37
  21
  146
  23
  169
  1
  90383/124740
  149
  #f
  165/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  319
  261
  37
  21
  146
  23
  169
  1
  90383/124740
  149
  #t
  165/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  320
  262
  37
  21
  146
  23
  169
  1
  89963/124740
  149
  #f
  746/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  321
  263
  37
  21
  146
  23
  169
  1
  89333/124740
  149
  #f
  1503/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  321
  263
  37
  21
  146
  23
  169
  1
  89333/124740
  149
  #f
  1503/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  322
  264
  37
  21
  146
  23
  169
  1
  44509/62370
  149
  #f
  503/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  322
  264
  37
  21
  146
  23
  169
  1
  44509/62370
  149
  #f
  503/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  322
  264
  37
  21
  146
  23
  169
  1
  44509/62370
  149
  #t
  503/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  322
  264
  37
  21
  146
  23
  169
  1
  44509/62370
  149
  #f
  503/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  323
  265
  37
  21
  146
  23
  169
  1
  22097/31185
  149
  #f
  303/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  323
  265
  37
  21
  146
  23
  169
  1
  22097/31185
  149
  #t
  303/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  88
  66
  16
  6
  40
  9
  49
  1
  284/333
  34
  #f
  69/11
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  131
  92
  31
  8
  57
  18
  75
  1
  695/828
  47
  #f
  531/92
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  168
  124
  33
  11
  85
  19
  104
  1
  1199/1350
  63
  #f
  723/124
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  172
  127
  33
  12
  85
  19
  104
  1
  586/675
  63
  #f
  742/127
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  172
  127
  33
  12
  85
  19
  104
  1
  586/675
  63
  #t
  742/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  173
  128
  33
  12
  85
  19
  104
  1
  586/675
  63
  #f
  753/128
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  173
  128
  33
  12
  85
  19
  104
  1
  586/675
  63
  #t
  753/128
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  189
  143
  33
  13
  95
  19
  114
  1
  646/747
  74
  #f
  64/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  189
  143
  33
  13
  95
  19
  114
  1
  646/747
  74
  #f
  64/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  196
  149
  33
  14
  100
  19
  119
  1
  31/36
  80
  #t
  862/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  196
  149
  33
  14
  100
  19
  119
  1
  31/36
  80
  #t
  862/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  196
  149
  33
  14
  100
  19
  119
  1
  31/36
  80
  #f
  862/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  244
  197
  33
  14
  115
  19
  134
  1
  3167/3960
  116
  #f
  1129/197
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  260
  212
  33
  15
  124
  19
  143
  1
  17887/22680
  126
  #f
  1213/212
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  263
  214
  33
  16
  124
  19
  143
  1
  3527/4536
  126
  #f
  1233/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  263
  214
  33
  16
  124
  19
  143
  1
  3527/4536
  126
  #f
  1233/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  263
  214
  33
  16
  124
  19
  143
  1
  3527/4536
  126
  #f
  1233/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  263
  214
  33
  16
  124
  19
  143
  1
  3527/4536
  126
  #t
  1233/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  263
  214
  33
  16
  124
  19
  143
  1
  3527/4536
  126
  #t
  1233/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  269
  220
  33
  16
  129
  19
  148
  1
  6277/8100
  129
  #f
  1267/220
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  274
  225
  33
  16
  133
  19
  152
  1
  6367/8280
  134
  #t
  1292/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  275
  226
  33
  16
  133
  19
  152
  1
  6367/8280
  134
  #f
  649/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  275
  226
  33
  16
  133
  19
  152
  1
  6367/8280
  134
  #t
  649/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  275
  226
  33
  16
  133
  19
  152
  1
  6367/8280
  134
  #f
  649/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  278
  228
  33
  17
  133
  19
  152
  1
  6307/8280
  136
  #t
  109/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  279
  229
  33
  17
  133
  19
  152
  1
  3131/4140
  136
  #f
  1317/229
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  279
  229
  33
  17
  133
  19
  152
  1
  3131/4140
  136
  #f
  1317/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  282
  231
  33
  18
  133
  19
  152
  1
  1543/2070
  138
  #t
  1327/231
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  286
  235
  33
  18
  137
  19
  156
  1
  6277/8370
  138
  #f
  1351/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  303
  246
  38
  19
  143
  23
  166
  1
  3206/4365
  144
  #f
  467/82
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  304
  247
  38
  19
  143
  23
  166
  1
  3191/4365
  144
  #f
  1408/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  305
  248
  38
  19
  143
  23
  166
  1
  6377/8730
  145
  #t
  1413/248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  305
  248
  38
  19
  143
  23
  166
  1
  6377/8730
  145
  #f
  1413/248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  305
  248
  38
  19
  143
  23
  166
  1
  6377/8730
  145
  #f
  1413/248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  306
  249
  38
  19
  143
  23
  166
  1
  354/485
  145
  #f
  473/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  306
  249
  38
  19
  143
  23
  166
  1
  354/485
  145
  #f
  473/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  307
  250
  38
  19
  143
  23
  166
  1
  6367/8730
  146
  #t
  1427/250
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  307
  250
  38
  19
  143
  23
  166
  1
  6367/8730
  146
  #t
  1427/250
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  308
  251
  38
  19
  143
  23
  166
  1
  6337/8730
  146
  #f
  1434/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  308
  251
  38
  19
  143
  23
  166
  1
  6337/8730
  146
  #f
  1434/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  309
  252
  38
  19
  143
  23
  166
  1
  6337/8730
  146
  #f
  1445/252
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  310
  253
  38
  19
  143
  23
  166
  1
  3166/4365
  146
  #f
  1451/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  311
  254
  38
  19
  143
  23
  166
  1
  6287/8730
  146
  #f
  731/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  323
  264
  38
  21
  146
  23
  169
  1
  12739/17820
  148
  #f
  757/132
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  323
  264
  38
  21
  146
  23
  169
  1
  12739/17820
  148
  #t
  757/132
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  323
  264
  38
  21
  146
  23
  169
  1
  12739/17820
  148
  #t
  757/132
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  324
  265
  38
  21
  146
  23
  169
  1
  12739/17820
  148
  #f
  304/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  325
  266
  38
  21
  146
  23
  169
  1
  577/810
  148
  #f
  109/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  326
  267
  38
  21
  146
  23
  169
  1
  3151/4455
  149
  #t
  1531/267
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  326
  267
  38
  21
  146
  23
  169
  1
  3151/4455
  149
  #f
  1531/267
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  327
  268
  38
  21
  146
  23
  169
  1
  6257/8910
  149
  #f
  1537/268
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
