'(clean-cache
  ack
  1
  5
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  146
  139
  5
  2
  134
  2
  136
  1
  39/40
  83
  #f
  195/139
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  5
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  147
  140
  5
  2
  133
  2
  135
  1
  71/74
  85
  #f
  39/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  133
  126
  5
  2
  122
  2
  124
  1
  723/740
  76
  #f
  88/63
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  71
  #f
  169/120
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  ack
  1
  5
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  141
  134
  5
  2
  127
  2
  129
  1
  425/444
  80
  #f
  94/67
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  139
  132
  5
  2
  121
  2
  123
  1
  104/111
  77
  #f
  17/12
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  24
  #f
  58/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  22
  #f
  27/19
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  134
  127
  5
  2
  120
  2
  122
  1
  711/740
  75
  #f
  179/127
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  131
  124
  5
  2
  119
  2
  121
  1
  36/37
  72
  #f
  44/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  130
  123
  5
  2
  119
  2
  121
  1
  181/185
  73
  #f
  173/123
  ((2 2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  184/185
  71
  #f
  169/120
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  22
  #f
  27/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  24
  #f
  58/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  22
  #f
  27/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  133
  126
  5
  2
  122
  2
  124
  1
  723/740
  76
  #f
  88/63
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  71
  #f
  169/120
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  59
  53
  5
  1
  49
  2
  51
  1
  31/35
  33
  #f
  73/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  10/11
  22
  #f
  27/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  5
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  145
  138
  5
  2
  133
  2
  135
  1
  38/39
  83
  #f
  193/138
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  71
  #f
  169/120
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  131
  124
  5
  2
  122
  2
  124
  1
  731/740
  74
  #f
  87/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  132
  125
  5
  2
  122
  2
  124
  1
  363/370
  74
  #f
  176/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  134
  127
  5
  2
  123
  2
  125
  1
  721/740
  75
  #f
  179/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  145
  138
  5
  2
  134
  2
  136
  1
  49/50
  81
  #f
  65/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  146
  139
  5
  2
  134
  2
  136
  1
  39/40
  81
  #f
  197/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  147
  140
  5
  2
  134
  2
  136
  1
  97/100
  81
  #f
  199/140
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  148
  141
  5
  2
  134
  2
  136
  1
  193/200
  81
  #f
  67/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  149
  142
  5
  2
  134
  2
  136
  1
  24/25
  81
  #f
  203/142
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  150
  143
  5
  2
  134
  2
  136
  1
  191/200
  81
  #f
  205/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  153
  146
  5
  2
  136
  2
  138
  1
  71/75
  83
  #f
  209/146
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  154
  147
  5
  2
  136
  2
  138
  1
  113/120
  83
  #f
  211/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  155
  148
  5
  2
  136
  2
  138
  1
  281/300
  83
  #f
  213/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  159
  152
  5
  2
  139
  2
  141
  1
  2233/2400
  86
  #f
  109/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  160
  153
  5
  2
  139
  2
  141
  1
  2221/2400
  86
  #f
  220/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  160
  153
  5
  2
  139
  2
  141
  1
  2221/2400
  86
  #f
  220/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  161
  154
  5
  2
  139
  2
  141
  1
  2209/2400
  86
  #f
  111/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  162
  155
  5
  2
  139
  2
  141
  1
  2197/2400
  86
  #f
  224/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  163
  156
  5
  2
  139
  2
  141
  1
  437/480
  86
  #f
  113/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  5
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  164
  157
  5
  2
  139
  2
  141
  1
  2173/2400
  86
  #f
  228/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  71
  #f
  169/120
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  130
  123
  5
  2
  121
  2
  123
  1
  437/444
  73
  #f
  173/123
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  131
  124
  5
  2
  121
  2
  123
  1
  2173/2220
  73
  #f
  175/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  132
  125
  5
  2
  121
  2
  123
  1
  1079/1110
  73
  #f
  177/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  139
  132
  5
  2
  127
  2
  129
  1
  2143/2220
  78
  #f
  31/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  143
  136
  5
  2
  130
  2
  132
  1
  2131/2220
  81
  #f
  191/136
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  144
  137
  5
  2
  130
  2
  132
  1
  2119/2220
  81
  #f
  193/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  145
  138
  5
  2
  130
  2
  132
  1
  2107/2220
  81
  #f
  65/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  146
  139
  5
  2
  130
  2
  132
  1
  419/444
  81
  #f
  197/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  147
  140
  5
  2
  130
  2
  132
  1
  2083/2220
  81
  #f
  199/140
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  151
  144
  5
  2
  133
  2
  135
  1
  2071/2220
  84
  #f
  17/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  152
  145
  5
  2
  133
  2
  135
  1
  2059/2220
  84
  #f
  206/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  158
  151
  5
  2
  139
  2
  141
  1
  449/480
  86
  #f
  216/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  159
  152
  5
  2
  139
  2
  141
  1
  2233/2400
  86
  #f
  109/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  160
  153
  5
  2
  139
  2
  141
  1
  2221/2400
  86
  #f
  220/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  161
  154
  5
  2
  139
  2
  141
  1
  2209/2400
  86
  #f
  111/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  162
  155
  5
  2
  139
  2
  141
  1
  2197/2400
  86
  #f
  224/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  163
  156
  5
  2
  139
  2
  141
  1
  437/480
  86
  #f
  113/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  163
  156
  5
  2
  139
  2
  141
  1
  437/480
  86
  #f
  113/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  5
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  164
  157
  5
  2
  139
  2
  141
  1
  2173/2400
  86
  #f
  228/157
  ((0 0 0) (0 0 0) (0 0 0)))
