'(clean-cache
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  183
  154
  20
  9
  115
  16
  131
  1
  13/15
  91
  #f
  31/22
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  183
  154
  20
  9
  111
  16
  127
  1
  67/84
  90
  #f
  109/77
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  31/42
  49
  #f
  109/79
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  215
  183
  22
  10
  106
  16
  122
  1
  25/36
  110
  #f
  90/61
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  230
  198
  22
  10
  104
  16
  120
  1
  1711/2520
  119
  #f
  289/198
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  151
  123
  20
  8
  82
  16
  98
  1
  52/63
  75
  #f
  57/41
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  32/45
  55
  #f
  125/87
  ((7 7 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  203
  171
  22
  10
  99
  16
  115
  1
  5483/7560
  104
  #f
  28/19
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  131
  97
  27
  7
  50
  16
  66
  1
  23/40
  61
  #f
  155/97
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  631/900
  55
  #f
  125/87
  ((7 7 0) (7 7 0) (15/2 15/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  16
  #f
  30/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  213
  181
  22
  10
  105
  16
  121
  1
  59/84
  110
  #f
  266/181
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  91/120
  49
  #f
  109/79
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  139
  103
  27
  9
  50
  16
  66
  1
  8/15
  63
  #f
  156/103
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  127
  91
  27
  9
  50
  16
  66
  1
  19/30
  58
  #f
  137/91
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  16
  #f
  30/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  182
  153
  20
  9
  114
  16
  130
  1
  19/22
  91
  #f
  215/153
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  230
  198
  22
  10
  104
  16
  120
  1
  1711/2520
  119
  #f
  289/198
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  230
  198
  22
  10
  104
  16
  120
  1
  1711/2520
  119
  #f
  289/198
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  232
  199
  22
  11
  104
  16
  120
  1
  1691/2520
  119
  #f
  291/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  245
  212
  22
  11
  117
  16
  133
  1
  113/162
  125
  #f
  311/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  260
  224
  23
  13
  117
  16
  133
  1
  529/810
  130
  #f
  165/112
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  261
  225
  23
  13
  117
  16
  133
  1
  523/810
  130
  #f
  332/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  262
  226
  23
  13
  117
  16
  133
  1
  29/45
  131
  #t
  167/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  263
  227
  23
  13
  117
  16
  133
  1
  19/30
  131
  #f
  336/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  264
  228
  23
  13
  117
  16
  133
  1
  19/30
  131
  #f
  169/114
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  265
  229
  23
  13
  117
  16
  133
  1
  256/405
  131
  #f
  340/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  265
  229
  23
  13
  117
  16
  133
  1
  256/405
  131
  #f
  340/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  265
  229
  23
  13
  117
  16
  133
  1
  256/405
  131
  #f
  340/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  265
  229
  23
  13
  117
  16
  133
  1
  256/405
  131
  #t
  340/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  266
  230
  23
  13
  117
  16
  133
  1
  1271/2025
  131
  #f
  171/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  267
  231
  23
  13
  117
  16
  133
  1
  1256/2025
  131
  #f
  344/231
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  267
  231
  23
  13
  117
  16
  133
  1
  1256/2025
  131
  #f
  344/231
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  268
  232
  23
  13
  117
  16
  133
  1
  1256/2025
  131
  #f
  173/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  269
  233
  23
  13
  117
  16
  133
  1
  1241/2025
  131
  #f
  348/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  269
  233
  23
  13
  117
  16
  133
  1
  1241/2025
  131
  #f
  348/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  269
  233
  23
  13
  117
  16
  133
  1
  1241/2025
  131
  #f
  348/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  270
  234
  23
  13
  117
  16
  133
  1
  1226/2025
  131
  #f
  175/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  271
  235
  23
  13
  117
  16
  133
  1
  2447/4050
  131
  #f
  352/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  271
  235
  23
  13
  117
  16
  133
  1
  2447/4050
  131
  #f
  352/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  272
  236
  23
  13
  117
  16
  133
  1
  2417/4050
  131
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  272
  236
  23
  13
  117
  16
  133
  1
  2417/4050
  131
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  272
  236
  23
  13
  117
  16
  133
  1
  2417/4050
  131
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  183
  154
  20
  9
  115
  16
  131
  1
  13/15
  91
  #f
  31/22
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  190
  161
  20
  9
  115
  16
  131
  1
  1613/1890
  96
  #f
  226/161
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  195
  166
  20
  9
  115
  16
  131
  1
  1571/1890
  100
  #f
  116/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  196
  167
  20
  9
  115
  16
  131
  1
  173/210
  100
  #f
  234/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  227
  198
  20
  9
  117
  16
  133
  1
  1168/1575
  117
  #f
  47/33
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  228
  199
  20
  9
  117
  16
  133
  1
  3494/4725
  118
  #t
  284/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  245
  212
  21
  12
  117
  16
  133
  1
  361/525
  123
  #f
  305/212
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  246
  213
  21
  12
  117
  16
  133
  1
  2131/3150
  123
  #f
  307/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  246
  213
  21
  12
  117
  16
  133
  1
  2131/3150
  123
  #f
  307/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  246
  213
  21
  12
  117
  16
  133
  1
  2131/3150
  123
  #f
  307/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  247
  214
  21
  12
  117
  16
  133
  1
  6323/9450
  123
  #f
  309/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  248
  215
  21
  12
  117
  16
  133
  1
  9467/14175
  123
  #f
  311/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  249
  216
  21
  12
  117
  16
  133
  1
  9362/14175
  123
  #f
  313/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  249
  216
  21
  12
  117
  16
  133
  1
  9362/14175
  123
  #f
  313/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  252
  219
  21
  12
  117
  16
  133
  1
  9292/14175
  125
  #f
  319/219
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  252
  219
  21
  12
  117
  16
  133
  1
  9292/14175
  125
  #f
  319/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  253
  220
  21
  12
  117
  16
  133
  1
  229/350
  125
  #f
  321/220
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  254
  221
  21
  12
  117
  16
  133
  1
  9257/14175
  125
  #f
  19/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  254
  221
  21
  12
  117
  16
  133
  1
  9257/14175
  125
  #f
  19/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  255
  222
  21
  12
  117
  16
  133
  1
  9152/14175
  125
  #f
  325/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  256
  223
  21
  12
  117
  16
  133
  1
  9122/14175
  126
  #t
  327/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  257
  224
  21
  12
  117
  16
  133
  1
  9017/14175
  126
  #f
  47/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  258
  225
  21
  12
  117
  16
  133
  1
  17999/28350
  126
  #f
  331/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  259
  226
  21
  12
  117
  16
  133
  1
  17789/28350
  126
  #f
  333/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  260
  227
  21
  12
  117
  16
  133
  1
  17663/28350
  126
  #f
  335/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  260
  227
  21
  12
  117
  16
  133
  1
  17663/28350
  126
  #f
  335/227
  ((0 0 0) (0 0 0) (0 0 0)))
