'(clean-cache
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  188
  159
  20
  9
  120
  16
  136
  1
  13/15
  51
  #f
  233/53
  ((47/2 24 0) (49/2 49/2 0) (43/2 22 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  188
  159
  20
  9
  116
  16
  132
  1
  101/126
  50
  #f
  700/159
  ((47/2 24 0) (23 47/2 0) (49/2 49/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  31/42
  32
  #f
  348/79
  ((27/2 14 0) (15 31/2 0) (14 29/2 0)))
'(clean-cache
  loop2-1
  1
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  153
  125
  20
  8
  84
  16
  100
  1
  367/441
  47
  #f
  553/125
  ((20 41/2 0) (19 39/2 0) (21 43/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  32/45
  38
  #f
  392/87
  ((17 35/2 0) (39/2 20 0) (37/2 19 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  131
  97
  27
  7
  50
  16
  66
  1
  23/40
  44
  #f
  454/97
  ((47/2 24 0) (24 49/2 0) (47/2 24 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  631/900
  38
  #f
  392/87
  ((35/2 18 0) (17 35/2 0) (35/2 35/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  6
  #f
  100/23
  ((2 2 0) (2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  91/120
  32
  #f
  348/79
  ((14 29/2 0) (14 14 0) (14 14 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  139
  103
  27
  9
  50
  16
  66
  1
  8/15
  45
  #f
  470/103
  ((43/2 22 0) (21 43/2 0) (21 43/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  127
  91
  27
  9
  50
  16
  66
  1
  19/30
  41
  #f
  418/91
  ((43/2 22 0) (21 21 0) (45/2 23 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  6
  #f
  100/23
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  187
  158
  20
  9
  119
  16
  135
  1
  19/22
  51
  #f
  695/158
  ((43/2 22 0) (43/2 22 0) (23 47/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  85
  69
  12
  4
  31
  6
  37
  1
  22/45
  17
  #f
  293/69
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 10 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  154
  126
  22
  6
  68
  16
  84
  1
  299/450
  47
  #f
  557/126
  ((12 25/2 0) (25/2 25/2 0) (12 12 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  206
  175
  22
  9
  116
  16
  132
  1
  149/189
  58
  #f
  776/175
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  206
  175
  22
  9
  116
  16
  132
  1
  149/189
  58
  #t
  776/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  206
  175
  22
  9
  116
  16
  132
  1
  149/189
  58
  #f
  776/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  208
  176
  22
  10
  116
  16
  132
  1
  295/378
  58
  #f
  195/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  209
  177
  22
  10
  116
  16
  132
  1
  146/189
  58
  #f
  262/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  214
  182
  22
  10
  116
  16
  132
  1
  2857/3780
  62
  #f
  405/91
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  229
  194
  23
  12
  116
  16
  132
  1
  2677/3780
  66
  #f
  431/97
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  235
  200
  23
  12
  116
  16
  132
  1
  646/945
  71
  #f
  447/100
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  236
  201
  23
  12
  116
  16
  132
  1
  1277/1890
  71
  #f
  898/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  237
  202
  23
  12
  116
  16
  132
  1
  2549/3780
  72
  #t
  452/101
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  238
  203
  23
  12
  116
  16
  132
  1
  2549/3780
  72
  #f
  908/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  263
  228
  23
  12
  116
  16
  132
  1
  2287/3780
  76
  #f
  85/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  267
  232
  23
  12
  120
  16
  136
  1
  1286/2025
  77
  #f
  1037/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  268
  233
  23
  12
  120
  16
  136
  1
  2567/4050
  77
  #f
  1041/233
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  268
  233
  23
  12
  120
  16
  136
  1
  2567/4050
  77
  #f
  1041/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  268
  233
  23
  12
  120
  16
  136
  1
  2567/4050
  77
  #f
  1041/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  269
  234
  23
  12
  120
  16
  136
  1
  427/675
  77
  #f
  349/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  270
  235
  23
  12
  120
  16
  136
  1
  422/675
  77
  #f
  1051/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  271
  236
  23
  12
  120
  16
  136
  1
  422/675
  77
  #f
  1055/236
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  271
  236
  23
  12
  120
  16
  136
  1
  422/675
  77
  #f
  1055/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  272
  237
  23
  12
  120
  16
  136
  1
  419/675
  77
  #f
  353/79
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  273
  238
  23
  12
  120
  16
  136
  1
  46/75
  77
  #f
  1063/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  188
  159
  20
  9
  120
  16
  136
  1
  13/15
  51
  #f
  233/53
  ((23 47/2 0) (22 45/2 0) (22 22 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  188
  159
  20
  9
  120
  16
  136
  1
  13/15
  51
  #f
  233/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  189
  160
  20
  9
  120
  16
  136
  1
  817/945
  52
  #t
  141/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  190
  161
  20
  9
  120
  16
  136
  1
  6/7
  52
  #f
  709/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  191
  162
  20
  9
  120
  16
  136
  1
  1343/1575
  52
  #f
  713/162
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  192
  163
  20
  9
  120
  16
  136
  1
  3994/4725
  52
  #f
  717/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  192
  163
  20
  9
  120
  16
  136
  1
  3994/4725
  52
  #f
  717/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  195
  166
  20
  9
  120
  16
  136
  1
  11912/14175
  54
  #f
  733/166
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  229
  200
  20
  9
  120
  16
  136
  1
  21059/28350
  67
  #f
  893/200
  ((13/2 13/2 0) (13/2 7 0) (13/2 7 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  246
  213
  21
  12
  120
  16
  136
  1
  19589/28350
  71
  #f
  949/213
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  247
  214
  21
  12
  120
  16
  136
  1
  3259/4725
  71
  #f
  953/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  248
  215
  21
  12
  120
  16
  136
  1
  3224/4725
  71
  #f
  957/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  249
  216
  21
  12
  120
  16
  136
  1
  19309/28350
  71
  #f
  107/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  249
  216
  21
  12
  120
  16
  136
  1
  19309/28350
  71
  #f
  107/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  250
  217
  21
  12
  120
  16
  136
  1
  19249/28350
  72
  #t
  969/217
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  257
  224
  21
  12
  120
  16
  136
  1
  9437/14175
  74
  #f
  999/224
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  258
  225
  21
  12
  120
  16
  136
  1
  9332/14175
  74
  #f
  1003/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  259
  226
  21
  12
  120
  16
  136
  1
  9269/14175
  74
  #f
  1007/226
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  260
  227
  21
  12
  120
  16
  136
  1
  9164/14175
  74
  #f
  1011/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  261
  228
  21
  12
  120
  16
  136
  1
  9059/14175
  74
  #f
  1015/228
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  262
  229
  21
  12
  120
  16
  136
  1
  18083/28350
  74
  #f
  1019/229
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  262
  229
  21
  12
  120
  16
  136
  1
  18083/28350
  74
  #f
  1019/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  262
  229
  21
  12
  120
  16
  136
  1
  18083/28350
  74
  #f
  1019/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  263
  230
  21
  12
  120
  16
  136
  1
  3008/4725
  74
  #f
  1023/230
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  264
  231
  21
  12
  120
  16
  136
  1
  991/1575
  74
  #f
  49/11
  ((0 0 0) (0 0 0) (0 0 0)))
