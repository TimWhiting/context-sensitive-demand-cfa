'(clean-cache
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  183
  154
  20
  9
  115
  16
  131
  1
  13/15
  52
  #f
  337/77
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  183
  154
  20
  9
  111
  16
  127
  1
  67/84
  51
  #f
  675/154
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  31/42
  32
  #f
  348/79
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  215
  183
  22
  10
  106
  16
  122
  1
  25/36
  65
  #f
  273/61
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  230
  198
  22
  10
  104
  16
  120
  1
  1711/2520
  72
  #f
  445/99
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  151
  123
  20
  8
  82
  16
  98
  1
  52/63
  47
  #f
  181/41
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  32/45
  38
  #f
  392/87
  ((15/2 15/2 0) (15/2 15/2 0) (7 7 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  203
  171
  22
  10
  99
  16
  115
  1
  5483/7560
  63
  #f
  769/171
  ((12 12 0) (12 12 0) (23/2 23/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  131
  97
  27
  7
  50
  16
  66
  1
  23/40
  44
  #f
  454/97
  ((21/2 21/2 0) (21/2 21/2 0) (11 11 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  631/900
  38
  #f
  392/87
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  6
  #f
  100/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  213
  181
  22
  10
  105
  16
  121
  1
  59/84
  65
  #f
  811/181
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  91/120
  32
  #f
  348/79
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  139
  103
  27
  9
  50
  16
  66
  1
  8/15
  45
  #f
  470/103
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  127
  91
  27
  9
  50
  16
  66
  1
  19/30
  41
  #f
  418/91
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  6
  #f
  100/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  182
  153
  20
  9
  114
  16
  130
  1
  19/22
  52
  #f
  670/153
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  631/900
  38
  #f
  392/87
  ((7 7 0) (15/2 15/2 0) (7 7 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  116
  88
  22
  6
  50
  16
  66
  1
  419/600
  39
  #t
  199/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  118
  89
  22
  7
  50
  16
  66
  1
  409/600
  39
  #f
  402/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  191
  159
  22
  10
  111
  16
  127
  1
  169/210
  57
  #f
  706/159
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  195
  160
  23
  12
  111
  16
  127
  1
  251/315
  57
  #f
  71/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  195
  160
  23
  12
  111
  16
  127
  1
  251/315
  57
  #f
  71/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  206
  171
  23
  12
  111
  16
  127
  1
  104/135
  59
  #f
  84/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  207
  172
  23
  12
  111
  16
  127
  1
  1441/1890
  59
  #f
  381/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  208
  173
  23
  12
  111
  16
  127
  1
  1441/1890
  59
  #f
  766/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  212
  177
  23
  12
  115
  16
  131
  1
  3167/4050
  60
  #f
  261/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  213
  178
  23
  12
  115
  16
  131
  1
  1561/2025
  60
  #f
  787/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  214
  179
  23
  12
  115
  16
  131
  1
  1546/2025
  60
  #f
  791/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  220
  185
  23
  12
  115
  16
  131
  1
  2999/4050
  65
  #f
  823/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  220
  185
  23
  12
  115
  16
  131
  1
  2999/4050
  65
  #f
  823/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  221
  186
  23
  12
  115
  16
  131
  1
  2969/4050
  65
  #f
  827/186
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  231
  196
  23
  12
  115
  16
  131
  1
  113/162
  68
  #f
  435/98
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  231
  196
  23
  12
  115
  16
  131
  1
  113/162
  68
  #f
  435/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  244
  209
  23
  12
  115
  16
  131
  1
  1336/2025
  72
  #f
  928/209
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  245
  210
  23
  12
  115
  16
  131
  1
  1321/2025
  72
  #f
  466/105
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  245
  210
  23
  12
  115
  16
  131
  1
  1321/2025
  72
  #f
  466/105
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  250
  215
  23
  12
  115
  16
  131
  1
  1276/2025
  76
  #f
  956/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  251
  216
  23
  12
  115
  16
  131
  1
  283/450
  76
  #f
  40/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  252
  217
  23
  12
  115
  16
  131
  1
  1271/2025
  76
  #f
  964/217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  266
  231
  23
  12
  117
  16
  133
  1
  163/270
  79
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  266
  231
  23
  12
  117
  16
  133
  1
  163/270
  79
  #t
  49/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  267
  232
  23
  12
  117
  16
  133
  1
  163/270
  79
  #f
  1033/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  213
  181
  22
  10
  105
  16
  121
  1
  59/84
  65
  #f
  811/181
  ((13 13 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  214
  182
  22
  10
  105
  16
  121
  1
  59/84
  65
  #f
  815/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  215
  183
  22
  10
  105
  16
  121
  1
  29/42
  65
  #f
  273/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  232
  196
  23
  13
  105
  16
  121
  1
  40/63
  69
  #f
  125/28
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  239
  203
  23
  13
  105
  16
  121
  1
  365/588
  71
  #f
  907/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  242
  206
  23
  13
  105
  16
  121
  1
  271/441
  73
  #f
  921/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  253
  217
  23
  13
  107
  16
  123
  1
  3953/6615
  77
  #f
  139/31
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  254
  218
  23
  13
  107
  16
  123
  1
  7843/13230
  77
  #f
  977/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  254
  218
  23
  13
  107
  16
  123
  1
  7843/13230
  77
  #t
  977/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  254
  218
  23
  13
  107
  16
  123
  1
  7843/13230
  77
  #f
  977/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  263
  227
  23
  13
  116
  16
  132
  1
  4289/6930
  80
  #f
  1016/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  263
  227
  23
  13
  116
  16
  132
  1
  4289/6930
  80
  #f
  1016/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  263
  227
  23
  13
  116
  16
  132
  1
  4289/6930
  80
  #f
  1016/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  264
  228
  23
  13
  116
  16
  132
  1
  8473/13860
  80
  #f
  511/114
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  265
  229
  23
  13
  116
  16
  132
  1
  1879/3080
  80
  #f
  1026/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  267
  231
  23
  13
  116
  16
  132
  1
  701/1155
  81
  #f
  345/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  268
  232
  23
  13
  116
  16
  132
  1
  16789/27720
  82
  #t
  1041/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  269
  233
  23
  13
  116
  16
  132
  1
  16579/27720
  82
  #f
  1045/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  270
  234
  23
  13
  116
  16
  132
  1
  16369/27720
  82
  #f
  1049/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  271
  235
  23
  13
  116
  16
  132
  1
  8167/13860
  82
  #f
  1053/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  272
  236
  23
  13
  117
  16
  133
  1
  8482/14175
  82
  #f
  1057/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  273
  237
  23
  13
  117
  16
  133
  1
  8482/14175
  82
  #f
  1061/237
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  273
  237
  23
  13
  117
  16
  133
  1
  8482/14175
  82
  #f
  1061/237
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  274
  238
  23
  13
  117
  16
  133
  1
  16649/28350
  82
  #f
  1065/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  274
  238
  23
  13
  117
  16
  133
  1
  16649/28350
  82
  #f
  1065/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  25
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  274
  238
  23
  13
  117
  16
  133
  1
  16649/28350
  82
  #f
  1065/238
  ((0 0 0) (0 0 0) (0 0 0)))
