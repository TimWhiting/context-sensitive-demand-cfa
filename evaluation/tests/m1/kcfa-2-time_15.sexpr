'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  37
  21
  8
  8
  21
  8
  29
  1
  1
  21
  #t
  1
  ((1 1 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))"
  #f
  74
  42
  15
  17
  29
  11
  40
  1
  13/18
  35
  #f
  61/42
  ((5 5 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval\n  (λ (x2) (-> (app (λ (z) ...) (λ (y1 y2) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))"
  #f
  50
  24
  12
  14
  5
  3
  8
  1
  5/12
  20
  #f
  17/12
  ((4 4 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  lambda
  "'(eval (app (λ (z) ...) (-> (λ (y1 y2) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (λ (y1 y2) (-> y1 <-)) (env ((□? (y1 y2)) (□? (x2)) (□? (x1)))))"
  #f
  32
  12
  9
  11
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  ((2 2 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  lambda
  "'(eval (app (-> (λ (z) ...) <-) (λ (y1 y2) ...)) (env ((□? (x2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (λ (z) (-> (app z x1 x2) <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  45
  22
  12
  11
  5
  3
  8
  1
  5/11
  19
  #f
  3/2
  ((3 4 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (app z x1 (-> x2 <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (app z (-> x1 <-) x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (app (-> z <-) x1 x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env ((□? (x1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  let
  "'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  72
  40
  15
  17
  23
  11
  34
  1
  2/3
  33
  #f
  59/40
  ((7 8 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  66
  34
  15
  17
  21
  11
  32
  1
  31/45
  29
  #f
  3/2
  ((5 5 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  66
  34
  15
  17
  21
  11
  32
  1
  31/45
  29
  #f
  3/2
  ((5 6 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  let
  "'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))"
  #f
  37
  22
  8
  7
  19
  8
  27
  1
  9/10
  22
  #t
  1
  ((1 1 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  35
  20
  8
  7
  18
  8
  26
  1
  35/38
  20
  #t
  1
  ((1 1 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  35
  20
  8
  7
  18
  8
  26
  1
  35/38
  20
  #t
  1
  ((1 1 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  1
  15
  32
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
