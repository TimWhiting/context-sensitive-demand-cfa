'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))\""
  37
  21
  8
  8
  21
  8
  29
  1
  1
  21
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))\""
  74
  42
  15
  17
  29
  11
  40
  1
  13/18
  35
  #f
  61/42
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (λ (x2) (-> (app (λ (z) ...) (λ (y1 y2) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))\""
  50
  24
  12
  14
  5
  3
  8
  1
  5/12
  20
  #f
  17/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (λ (y1 y2) (-> y1 <-)) (env ((□? (y1 y2)) (□? (x2)) (□? (x1)))))\""
  32
  12
  9
  11
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (λ (z) (-> (app z x1 x2) <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  45
  22
  12
  11
  5
  3
  8
  1
  5/11
  19
  #f
  3/2
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app z x1 (-> x2 <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  13
  6
  3
  4
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app z (-> x1 <-) x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  13
  6
  3
  4
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> z <-) x1 x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  let
  "\"'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))\""
  72
  40
  15
  17
  23
  11
  34
  1
  2/3
  33
  #f
  59/40
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))\""
  66
  34
  15
  17
  21
  11
  32
  1
  31/45
  29
  #f
  3/2
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))\""
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))\""
  66
  34
  15
  17
  21
  11
  32
  1
  31/45
  29
  #f
  3/2
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))\""
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  let
  "\"'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))\""
  37
  22
  8
  7
  19
  8
  27
  1
  9/10
  22
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))\""
  35
  20
  8
  7
  18
  8
  26
  1
  35/38
  20
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))\""
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))\""
  35
  20
  8
  7
  18
  8
  26
  1
  35/38
  20
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))\""
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  let
  "\"'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))\""
  72
  40
  15
  17
  23
  11
  34
  1
  2/3
  33
  #f
  59/40
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))\""
  115
  65
  24
  26
  37
  17
  54
  1
  16/27
  53
  #f
  97/65
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))\""
  128
  74
  25
  29
  46
  18
  64
  1
  551/750
  62
  #t
  53/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app z (-> x1 <-) x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  131
  75
  25
  31
  46
  18
  64
  1
  1279/1750
  62
  #f
  36/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))\""
  131
  75
  25
  31
  46
  18
  64
  1
  1279/1750
  62
  #f
  36/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))\""
  132
  76
  25
  31
  46
  18
  64
  1
  1279/1750
  63
  #t
  111/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app z x1 (-> x2 <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  151
  86
  32
  33
  55
  24
  79
  1
  1559/2100
  72
  #f
  61/43
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))\""
  151
  86
  32
  33
  55
  24
  79
  1
  1559/2100
  72
  #t
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))\""
  155
  90
  32
  33
  55
  24
  79
  1
  4481/6300
  76
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (λ (x2) (-> (app (λ (z) ...) (λ (y1 y2) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))\""
  180
  103
  38
  39
  55
  24
  79
  1
  6389/9450
  88
  #f
  152/103
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))\""
  181
  104
  38
  39
  55
  24
  79
  1
  12463/18900
  89
  #t
  153/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))\""
  182
  105
  38
  39
  55
  24
  79
  1
  3037/4725
  90
  #t
  22/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (λ (y1 y2) (-> y1 <-)) (env ((□? (y1 y2)) (□? (x2)) (□? (x1)))))\""
  189
  106
  39
  44
  55
  24
  79
  1
  12113/18900
  90
  #f
  78/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))\""
  190
  107
  39
  44
  55
  24
  79
  1
  5899/9450
  91
  #t
  157/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))\""
  194
  111
  39
  44
  55
  24
  79
  1
  1121/1890
  95
  #t
  161/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))\""
  195
  112
  39
  44
  55
  24
  79
  1
  1121/1953
  96
  #t
  81/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (λ (z) (-> (app z x1 x2) <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  203
  119
  40
  44
  55
  24
  79
  1
  368/651
  102
  #f
  192/119
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))\""
  207
  122
  40
  45
  57
  24
  81
  1
  1819/3255
  104
  #f
  98/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  let
  "\"'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))\""
  208
  123
  40
  45
  57
  24
  81
  1
  3533/6510
  105
  #t
  197/123
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))\""
  211
  126
  40
  45
  59
  24
  83
  1
  3673/6720
  108
  #t
  100/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))\""
  212
  127
  40
  45
  59
  24
  83
  1
  223/420
  109
  #t
  201/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> z <-) x1 x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  212
  127
  40
  45
  59
  24
  83
  1
  223/420
  109
  #t
  201/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app z x1 (-> x2 <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  13
  6
  3
  4
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))\""
  16
  8
  3
  5
  0
  0
  0
  1
  0
  7
  #t
  9/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  22
  app
  "\"'(eval\n  (λ (x2) (-> (app (λ (z) ...) (λ (y1 y2) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))\""
  35
  20
  8
  7
  18
  8
  26
  1
  35/38
  20
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))\""
  39
  22
  8
  9
  18
  8
  26
  1
  5/6
  22
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app z (-> x1 <-) x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  48
  27
  8
  13
  20
  8
  28
  1
  19/23
  26
  #f
  28/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))\""
  53
  30
  10
  13
  21
  9
  30
  1
  19/24
  29
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))\""
  53
  30
  10
  13
  21
  9
  30
  1
  19/24
  29
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (λ (z) (-> (app z x1 x2) <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  86
  47
  19
  20
  21
  9
  30
  1
  101/160
  43
  #f
  60/47
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))\""
  87
  48
  19
  20
  21
  9
  30
  1
  293/480
  44
  #t
  61/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))\""
  105
  59
  22
  24
  28
  12
  40
  1
  857/1440
  54
  #f
  74/59
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))\""
  106
  60
  22
  24
  28
  12
  40
  1
  427/720
  55
  #t
  19/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (λ (y1 y2) (-> y1 <-)) (env ((□? (y1 y2)) (□? (x2)) (□? (x1)))))\""
  110
  61
  22
  27
  28
  12
  40
  1
  85/144
  55
  #f
  78/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))\""
  121
  70
  22
  29
  37
  12
  49
  1
  277/420
  64
  #t
  87/70
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))\""
  122
  71
  22
  29
  37
  12
  49
  1
  77/120
  65
  #t
  88/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))\""
  152
  89
  28
  35
  51
  18
  69
  1
  663/1015
  82
  #f
  108/89
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  let
  "\"'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))\""
  156
  93
  28
  35
  51
  18
  69
  1
  1919/3045
  84
  #f
  38/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  let
  "\"'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))\""
  157
  94
  28
  35
  51
  18
  69
  1
  3733/6090
  85
  #t
  115/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  ref-or-constructor
  "\"'(eval (app (-> z <-) x1 x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))\""
  157
  94
  28
  35
  51
  18
  69
  1
  3733/6090
  85
  #t
  115/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))\""
  158
  95
  28
  35
  51
  18
  69
  1
  1814/3045
  86
  #t
  116/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))\""
  159
  96
  28
  35
  51
  18
  69
  1
  593/1015
  86
  #f
  59/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-2
  1
  5
  22
  app
  "\"'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))\""
  163
  100
  28
  35
  51
  18
  69
  1
  593/1085
  90
  #t
  61/50
  ((0 0 0) (0 0 0) (0 0 0)))
