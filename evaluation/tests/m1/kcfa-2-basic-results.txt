'(expression:
  (app
   (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list 'query: '(app (-> #t <-)) (menv '((□? (f2)) (□? (x1)))))
(list 'clos/con: (list (list #t (menv '((□? (f2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f1) (-> (let ((_ (app f1 (app #t)))) (app f1 (app #f))) <-))
 (menv '((□? (f1)))))
(list 'clos/con: (list (list '(app #f) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f1 <-) (app #t)) (menv '((□? (f1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app z (-> x1 <-) x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 (app #f)) <-))
 (menv '((□? (f2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f)))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (menv '()))
(list
 'clos/con:
 (list
  (list '(λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app z x1 (-> x2 <-)) (menv '((□? (z)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
          <-)))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
          <-)))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (menv '((□? (z)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #f <-)) (menv '((□? (f1)))))
(list 'clos/con: (list (list #f (menv '((□? (f1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (menv '()))
(list 'clos/con: (list (list '(app #f) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f2 <-) (app #t)) (menv '((□? (f2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (menv '((□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> _ = (app f1 (app #t)) <-)) bod) (menv '((□? (f1)))))
(list 'clos/con: (list (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2) (-> y1 <-))
 (menv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f1 <-) (app #f)) (menv '((□? (f1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f)))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (menv '((□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (menv '((□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 (app #t)) <-)) bod)
 (menv '((□? (f2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 (app #t)))) (app f2 (app #f))) <-))
 (menv '((□? (f2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (menv '((□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(λ (z) (app z x1 x2)) (menv '((□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f1 (-> (app #f) <-)) (menv '((□? (f1)))))
(list 'clos/con: (list (list '(app #f) (menv '((□? (f1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (menv '((□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (menv '((□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #f <-)) (menv '((□? (f2)) (□? (x1)))))
(list 'clos/con: (list (list #f (menv '((□? (f2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f2 (-> (app #f) <-)) (menv '((□? (f2)) (□? (x1)))))
(list 'clos/con: (list (list '(app #f) (menv '((□? (f2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f2 <-) (app #f)) (menv '((□? (f2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (menv '((□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (menv '((□? (x2)) (□? (x1)))))
(list 'clos/con: (list (list '(λ (y1 y2) y1) (menv '((□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> z <-) x1 x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))
(list 'clos/con: (list (list '(λ (y1 y2) y1) (menv '((□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f1 (-> (app #t) <-)) (menv '((□? (f1)))))
(list 'clos/con: (list (list '(app #t) (menv '((□? (f1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f2 (-> (app #t) <-)) (menv '((□? (f2)) (□? (x1)))))
(list 'clos/con: (list (list '(app #t) (menv '((□? (f2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (_) (-> (app f1 (app #f)) <-)) (menv '((□? (f1)))))
(list 'clos/con: (list (list '(app #f) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (menv '((□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (menv '((□? (x1)))))
(list
 'clos/con:
 (list (list '(app #f) (menv '(((top))))) (list '(app #t) (menv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #t <-)) (menv '((□? (f1)))))
(list 'clos/con: (list (list #t (menv '((□? (f1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
