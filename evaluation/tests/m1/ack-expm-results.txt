'(expression:
  (letrec ((ack
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))))
    (app ack 3 12)))
(list
 'query:
 '(app (-> = <-) n 0)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack 3 (-> 12 <-)) (expenv '()))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (expenv '()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> 3 <-) 12) (expenv '()))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) 3 12) (expenv '()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(letrec (ack) (-> (app ack 3 12) <-)) (expenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> #t <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (expenv
  '((((ran
       ack
       ((app - m 1))
       ()
       (match-clause
        #f
        (app = n 0)
        ()
        ((_ (app ack (app - m 1) 1)))
        (match-clause
         #f
         (app = m 0)
         ()
         ((_ (app + n 1)))
         (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
      app
      ack
      m
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (expenv
  '((((match-clause
       _
       (app = n 0)
       ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
       ()
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (expenv
  '((((match-clause
       #f
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        #f
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
      app
      ack
      (app - m 1)
      (app ack m (app - n 1)))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (expenv
  '((((let-bod
       letrec
       ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#f
             (match
              (app = n 0)
              (#f (app ack (app - m 1) (app ack m (app - n 1))))
              (_ (app ack (app - m 1) 1))))
            (_ (app + n 1))))))
       (top))
      app
      ack
      3
      12)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
