'(expression:
  (app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'query:
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (menv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (menv '()))
'(clos/con: ((λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (menv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (menv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (menv '()))
'(clos/con:
  ((λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2)
 (menv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1)))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) #t)
 (menv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
'(clos/con:
  ((λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (menv
  '(((let-bin
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> #t <-))
 (menv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (menv
  '(((let-bin
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #t)
 (menv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (menv
  '(((let-bin
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
'(clos/con: ((λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (menv '()))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-))
 (menv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (menv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #t <-))
 (menv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f1 #t) <-)) bod)
 (menv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (menv
  '(((let-bin
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (menv
  '(((let-bin
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (menv
  '(((let-bin
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t))))
'(clos/con: ((λ (z) (app z x1 x2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
