'(clean-cache
  mj09
  1
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  26
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  92
  61
  20
  11
  44
  17
  61
  1
  11/15
  52
  #f
  80/61
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  74
  43
  20
  11
  32
  17
  49
  1
  43/57
  38
  #f
  54/43
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  mj09
  1
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  89
  58
  20
  11
  42
  17
  59
  1
  53/72
  50
  #f
  38/29
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  mj09
  1
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  60
  40
  14
  6
  22
  13
  35
  1
  161/240
  37
  #f
  23/20
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  16
  8
  5
  3
  0
  0
  0
  1
  0
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  16
  8
  5
  3
  0
  0
  0
  1
  0
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  86
  55
  20
  11
  40
  17
  57
  1
  17/23
  48
  #f
  72/55
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  59
  37
  14
  8
  28
  13
  41
  1
  13/17
  34
  #f
  46/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  11
  5
  3
  3
  0
  0
  0
  1
  0
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  83
  52
  20
  11
  38
  17
  55
  1
  49/66
  46
  #f
  17/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  62
  40
  14
  8
  30
  13
  43
  1
  41/54
  36
  #f
  5/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  24
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  44
  25
  12
  7
  23
  10
  33
  1
  15/16
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  45
  26
  12
  7
  23
  10
  33
  1
  11/12
  26
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  78
  48
  19
  11
  45
  17
  62
  1
  43/45
  48
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  79
  49
  19
  11
  46
  17
  63
  1
  89/93
  49
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  88
  54
  22
  12
  46
  17
  63
  1
  83/93
  53
  #f
  55/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  117
  76
  24
  17
  52
  17
  69
  1
  165/217
  67
  #f
  103/76
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  117
  76
  24
  17
  52
  17
  69
  1
  165/217
  67
  #f
  103/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  118
  77
  24
  17
  52
  17
  69
  1
  983/1302
  67
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  118
  77
  24
  17
  52
  17
  69
  1
  983/1302
  67
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  125
  84
  24
  17
  52
  17
  69
  1
  4733/6510
  73
  #f
  113/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  125
  84
  24
  17
  52
  17
  69
  1
  4733/6510
  73
  #f
  113/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  127
  86
  24
  17
  52
  17
  69
  1
  9403/13020
  75
  #t
  115/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  128
  87
  24
  17
  53
  17
  70
  1
  9823/13440
  76
  #t
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  128
  87
  24
  17
  53
  17
  70
  1
  9823/13440
  76
  #t
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  130
  89
  24
  17
  53
  17
  70
  1
  61/84
  78
  #t
  118/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  130
  89
  24
  17
  53
  17
  70
  1
  61/84
  78
  #f
  118/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  131
  90
  24
  17
  53
  17
  70
  1
  481/672
  78
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  135
  91
  24
  20
  53
  17
  70
  1
  955/1344
  78
  #f
  122/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  136
  92
  24
  20
  54
  17
  71
  1
  997/1386
  79
  #t
  123/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  136
  92
  24
  20
  54
  17
  71
  1
  997/1386
  79
  #t
  123/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  44
  25
  12
  7
  23
  10
  33
  1
  15/16
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  101
  65
  22
  14
  46
  17
  63
  1
  65/84
  58
  #f
  88/65
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  102
  66
  22
  14
  47
  17
  64
  1
  68/87
  59
  #t
  89/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  103
  67
  22
  14
  47
  17
  64
  1
  45/58
  59
  #f
  91/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  103
  67
  22
  14
  47
  17
  64
  1
  45/58
  59
  #f
  91/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  107
  68
  22
  17
  47
  17
  64
  1
  67/87
  59
  #f
  93/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  109
  70
  22
  17
  48
  17
  65
  1
  22/29
  60
  #f
  48/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  111
  72
  22
  17
  49
  17
  66
  1
  65/87
  61
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  114
  75
  22
  17
  49
  17
  66
  1
  637/870
  64
  #t
  34/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  114
  75
  22
  17
  49
  17
  66
  1
  637/870
  64
  #f
  34/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  114
  75
  22
  17
  49
  17
  66
  1
  637/870
  64
  #t
  34/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  118
  76
  22
  20
  49
  17
  66
  1
  4439/6090
  64
  #f
  26/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  119
  77
  22
  20
  50
  17
  67
  1
  4649/6300
  65
  #t
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  119
  77
  22
  20
  50
  17
  67
  1
  4649/6300
  65
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  122
  80
  22
  20
  53
  17
  70
  1
  319/420
  68
  #t
  27/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  123
  81
  22
  20
  54
  17
  71
  1
  2657/3465
  69
  #t
  109/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  129
  87
  22
  20
  54
  17
  71
  1
  1149/1540
  74
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  130
  88
  22
  20
  54
  17
  71
  1
  10313/13860
  75
  #t
  119/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  132
  90
  22
  20
  54
  17
  71
  1
  1025/1386
  77
  #t
  121/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  132
  90
  22
  20
  54
  17
  71
  1
  1025/1386
  77
  #t
  121/90
  ((0 0 0) (0 0 0) (0 0 0)))
