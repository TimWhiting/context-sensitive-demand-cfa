'(clean-cache
  rsa
  1
  25
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  446
  399
  29
  18
  369
  14
  383
  1
  1947/2060
  261
  #f
  569/399
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  445
  398
  29
  18
  368
  14
  382
  1
  1937/2050
  261
  #f
  567/398
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  431
  384
  29
  18
  354
  14
  368
  1
  1797/1910
  252
  #f
  137/96
  ((27/2 27/2 0) (27/2 27/2 0) (13 13 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  219
  190
  18
  11
  175
  8
  183
  1
  17/18
  139
  #f
  241/190
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  325
  282
  27
  16
  258
  13
  271
  1
  315/334
  209
  #t
  379/282
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  324
  281
  27
  16
  257
  13
  270
  1
  313/332
  208
  #t
  378/281
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  218
  189
  18
  11
  174
  8
  182
  1
  219/232
  139
  #f
  239/189
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  428
  382
  29
  17
  350
  14
  364
  1
  219/235
  251
  #f
  545/382
  ((13 13 0) (13 13 0) (13 13 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  223
  191
  20
  12
  175
  10
  185
  1
  221/236
  139
  #f
  243/191
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  325
  282
  27
  16
  258
  13
  271
  1
  79/84
  210
  #t
  63/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  322
  280
  27
  15
  253
  13
  266
  1
  303/326
  207
  #t
  377/280
  ((17/2 17/2 0) (9 9 0) (9 9 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  316
  274
  27
  15
  248
  13
  261
  1
  147/158
  201
  #t
  371/274
  ((17/2 17/2 0) (9 9 0) (9 9 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  19
  16
  2
  1
  12
  2
  14
  1
  21/26
  16
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  217
  189
  18
  10
  170
  8
  178
  1
  104/113
  139
  #f
  239/189
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  158
  133
  16
  9
  119
  7
  126
  1
  151/164
  85
  #f
  181/133
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  31
  22
  6
  3
  18
  3
  21
  1
  33/38
  22
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  75
  63
  8
  4
  56
  4
  60
  1
  43/47
  63
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  75
  64
  8
  3
  53
  4
  57
  1
  19/22
  64
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  50
  39
  8
  3
  29
  4
  33
  1
  49/60
  39
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  44
  33
  8
  3
  26
  4
  30
  1
  23/27
  33
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  37
  26
  8
  3
  20
  4
  24
  1
  5/6
  26
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  44
  33
  8
  3
  26
  4
  30
  1
  23/27
  33
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  37
  26
  8
  3
  20
  4
  24
  1
  5/6
  26
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  17
  11
  4
  2
  6
  3
  9
  1
  4/7
  11
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  425
  379
  29
  17
  348
  14
  362
  1
  436/465
  249
  #f
  539/379
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  422
  376
  29
  17
  346
  14
  360
  1
  291/310
  247
  #f
  535/376
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  410
  364
  29
  17
  333
  14
  347
  1
  1163/1240
  242
  #f
  257/182
  ((13 13 0) (27/2 27/2 0) (13 13 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  34
  22
  9
  3
  18
  5
  23
  1
  54/65
  22
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  404
  358
  29
  17
  330
  14
  344
  1
  1167/1240
  238
  #f
  253/179
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  405
  359
  29
  17
  327
  14
  341
  1
  697/744
  240
  #f
  510/359
  ((27/2 27/2 0) (25/2 25/2 0) (13 13 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  34
  22
  9
  3
  18
  5
  23
  1
  53/60
  22
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  273
  232
  27
  14
  210
  13
  223
  1
  239/256
  164
  #f
  81/58
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  270
  229
  27
  14
  210
  13
  223
  1
  1201/1280
  162
  #f
  318/229
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  397
  351
  29
  17
  326
  14
  340
  1
  1757/1860
  235
  #f
  55/39
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  397
  351
  29
  17
  326
  14
  340
  1
  1171/1240
  235
  #f
  55/39
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  342
  297
  29
  16
  266
  14
  280
  1
  1493/1610
  225
  #t
  391/297
  ((21/2 21/2 0) (10 10 0) (10 10 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  34
  22
  9
  3
  18
  5
  23
  1
  54/65
  22
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  308
  263
  29
  16
  238
  14
  252
  1
  1381/1480
  191
  #t
  357/263
  ((9 9 0) (17/2 17/2 0) (9 9 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  290
  248
  27
  15
  225
  13
  238
  1
  263/282
  176
  #t
  171/124
  ((8 8 0) (17/2 17/2 0) (8 8 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  33
  21
  9
  3
  18
  5
  23
  1
  9/10
  21
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  272
  231
  27
  14
  210
  13
  223
  1
  1197/1280
  164
  #f
  320/231
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  270
  229
  27
  14
  210
  13
  223
  1
  1201/1280
  162
  #f
  318/229
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  396
  350
  29
  17
  326
  14
  340
  1
  1759/1860
  235
  #f
  493/350
  ((23/2 23/2 0) (11 11 0) (11 11 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  280
  239
  27
  14
  218
  13
  231
  1
  1219/1310
  168
  #f
  336/239
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  270
  229
  27
  14
  210
  13
  223
  1
  401/430
  162
  #f
  318/229
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  285
  244
  27
  14
  222
  13
  235
  1
  409/440
  173
  #f
  341/244
  ((8 8 0) (15/2 15/2 0) (8 8 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  270
  229
  27
  14
  210
  13
  223
  1
  401/430
  162
  #f
  318/229
  ((7 7 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  304
  259
  29
  16
  232
  14
  246
  1
  669/725
  187
  #t
  353/259
  ((9 9 0) (9 9 0) (11 11 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  298
  253
  29
  16
  229
  14
  243
  1
  1323/1420
  181
  #t
  347/253
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  298
  253
  29
  16
  229
  14
  243
  1
  1323/1420
  181
  #t
  347/253
  ((17/2 17/2 0) (8 8 0) (17/2 17/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  65
  54
  8
  3
  39
  4
  43
  1
  31/44
  54
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  34
  23
  8
  3
  15
  4
  19
  1
  5/8
  23
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  22
  11
  8
  3
  6
  4
  10
  1
  4/7
  11
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  34
  23
  8
  3
  15
  4
  19
  1
  5/8
  23
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  22
  11
  8
  3
  6
  4
  10
  1
  4/7
  11
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  157
  133
  16
  8
  116
  7
  123
  1
  71/79
  85
  #f
  181/133
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  36
  24
  8
  4
  19
  4
  23
  1
  17/20
  24
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  151
  127
  16
  8
  113
  7
  120
  1
  139/152
  81
  #f
  173/127
  ((9/2 9/2 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  60
  43
  11
  6
  37
  5
  42
  1
  69/76
  43
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  36
  24
  8
  4
  19
  4
  23
  1
  17/20
  24
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  11
  5
  4
  2
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  89
  73
  11
  5
  57
  5
  62
  1
  211/252
  58
  #f
  92/73
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  117
  93
  16
  8
  82
  7
  89
  1
  15/16
  57
  #f
  43/31
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  78
  61
  11
  6
  52
  5
  57
  1
  125/138
  46
  #f
  76/61
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  117
  93
  16
  8
  82
  7
  89
  1
  15/16
  57
  #f
  43/31
  ((3 3 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  78
  61
  11
  6
  52
  5
  57
  1
  125/138
  46
  #f
  76/61
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  75
  58
  11
  6
  50
  5
  55
  1
  41/45
  46
  #f
  35/29
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  59
  43
  11
  5
  34
  5
  39
  1
  76/87
  35
  #f
  51/43
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  60
  44
  11
  5
  34
  5
  39
  1
  49/58
  37
  #f
  51/44
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  57
  41
  11
  5
  34
  5
  39
  1
  26/29
  34
  #f
  48/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  59
  43
  11
  5
  34
  5
  39
  1
  149/174
  37
  #f
  49/43
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  133
  109
  16
  8
  94
  7
  101
  1
  397/432
  65
  #f
  153/109
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  128
  104
  16
  8
  89
  7
  96
  1
  397/432
  63
  #f
  145/104
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  66
  50
  11
  5
  40
  5
  45
  1
  85/99
  39
  #f
  61/50
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  60
  44
  11
  5
  34
  5
  39
  1
  149/180
  37
  #f
  51/44
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  57
  41
  11
  5
  34
  5
  39
  1
  79/90
  34
  #f
  48/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  119
  95
  16
  8
  83
  7
  90
  1
  403/432
  57
  #f
  7/5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  119
  95
  16
  8
  83
  7
  90
  1
  403/432
  57
  #f
  7/5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  119
  95
  16
  8
  83
  7
  90
  1
  403/432
  57
  #f
  7/5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  75
  59
  11
  5
  46
  5
  51
  1
  91/108
  46
  #f
  72/59
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  66
  50
  11
  5
  40
  5
  45
  1
  85/99
  39
  #f
  61/50
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  60
  44
  11
  5
  34
  5
  39
  1
  149/180
  37
  #f
  51/44
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  57
  41
  11
  5
  34
  5
  39
  1
  79/90
  34
  #f
  48/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  118
  93
  16
  9
  81
  7
  88
  1
  401/432
  55
  #f
  131/93
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  117
  92
  16
  9
  81
  7
  88
  1
  101/108
  55
  #f
  129/92
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  84
  64
  13
  7
  54
  6
  60
  1
  127/141
  46
  #f
  41/32
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  151
  126
  16
  9
  111
  7
  118
  1
  11/12
  79
  #f
  29/21
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  137
  112
  16
  9
  98
  7
  105
  1
  409/444
  72
  #f
  153/112
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  100
  79
  14
  7
  67
  6
  73
  1
  130/147
  61
  #f
  98/79
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  444
  397
  29
  18
  367
  14
  381
  1
  1927/2040
  261
  #f
  565/397
  ((27/2 27/2 0) (13 13 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  438
  391
  29
  18
  361
  14
  375
  1
  1867/1980
  256
  #f
  558/391
  ((27/2 27/2 0) (13 13 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  435
  388
  29
  18
  358
  14
  372
  1
  1837/1950
  254
  #f
  277/194
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  432
  385
  29
  18
  355
  14
  369
  1
  1807/1920
  252
  #f
  10/7
  ((27/2 27/2 0) (13 13 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  270
  229
  27
  14
  210
  13
  223
  1
  1201/1280
  162
  #f
  318/229
  ((15/2 15/2 0) (8 8 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  278
  236
  27
  15
  210
  13
  223
  1
  2367/2560
  169
  #t
  325/236
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  280
  238
  27
  15
  212
  13
  225
  1
  2407/2600
  171
  #t
  327/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  281
  239
  27
  15
  212
  13
  225
  1
  2397/2600
  172
  #t
  328/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  281
  239
  27
  15
  212
  13
  225
  1
  2397/2600
  172
  #t
  328/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  406
  358
  29
  19
  327
  14
  341
  1
  3797/4040
  267
  #f
  471/358
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  407
  359
  29
  19
  327
  14
  341
  1
  3787/4040
  268
  #t
  472/359
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  411
  363
  29
  19
  330
  14
  344
  1
  3777/4040
  272
  #t
  476/363
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  413
  364
  29
  20
  330
  14
  344
  1
  3767/4040
  272
  #f
  239/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  414
  365
  29
  20
  330
  14
  344
  1
  11281/12120
  273
  #t
  96/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  414
  365
  29
  20
  330
  14
  344
  1
  11281/12120
  273
  #t
  96/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  415
  366
  29
  20
  330
  14
  344
  1
  11269/12120
  273
  #f
  241/183
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  416
  367
  29
  20
  330
  14
  344
  1
  11239/12120
  274
  #t
  483/367
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  418
  369
  29
  20
  331
  14
  345
  1
  11299/12240
  276
  #t
  485/369
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  418
  369
  29
  20
  331
  14
  345
  1
  11299/12240
  276
  #f
  485/369
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  419
  370
  29
  20
  331
  14
  345
  1
  11269/12240
  277
  #t
  243/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  419
  370
  29
  20
  331
  14
  345
  1
  11269/12240
  277
  #t
  243/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  420
  371
  29
  20
  331
  14
  345
  1
  11239/12240
  278
  #t
  487/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  421
  372
  29
  20
  331
  14
  345
  1
  11227/12240
  278
  #f
  163/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  422
  373
  29
  20
  331
  14
  345
  1
  11207/12240
  278
  #f
  491/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  422
  373
  29
  20
  331
  14
  345
  1
  11207/12240
  278
  #f
  491/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  432
  383
  29
  20
  339
  14
  353
  1
  11303/12360
  288
  #t
  501/383
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  456
  407
  29
  20
  361
  14
  375
  1
  3797/4160
  312
  #t
  525/407
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  457
  408
  29
  20
  361
  14
  375
  1
  3787/4160
  313
  #t
  263/204
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  458
  409
  29
  20
  361
  14
  375
  1
  3777/4160
  313
  #f
  528/409
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  459
  410
  29
  20
  361
  14
  375
  1
  3773/4160
  314
  #t
  529/410
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  460
  411
  29
  20
  361
  14
  375
  1
  3763/4160
  315
  #t
  530/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  461
  412
  29
  20
  361
  14
  375
  1
  3753/4160
  316
  #t
  531/412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  462
  413
  29
  20
  361
  14
  375
  1
  3743/4160
  317
  #t
  76/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  463
  414
  29
  20
  361
  14
  375
  1
  3733/4160
  318
  #t
  533/414
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  464
  415
  29
  20
  361
  14
  375
  1
  3723/4160
  319
  #t
  534/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  464
  415
  29
  20
  361
  14
  375
  1
  3723/4160
  319
  #f
  534/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  465
  416
  29
  20
  361
  14
  375
  1
  3713/4160
  320
  #t
  535/416
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  466
  417
  29
  20
  361
  14
  375
  1
  11119/12480
  320
  #f
  179/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  466
  417
  29
  20
  361
  14
  375
  1
  11119/12480
  320
  #t
  179/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  467
  418
  29
  20
  361
  14
  375
  1
  11107/12480
  320
  #f
  541/418
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  467
  418
  29
  20
  361
  14
  375
  1
  11107/12480
  320
  #t
  541/418
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  468
  419
  29
  20
  361
  14
  375
  1
  11077/12480
  321
  #t
  542/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  468
  419
  29
  20
  361
  14
  375
  1
  11077/12480
  321
  #t
  542/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  469
  420
  29
  20
  361
  14
  375
  1
  11057/12480
  321
  #f
  109/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  469
  420
  29
  20
  361
  14
  375
  1
  11057/12480
  321
  #f
  109/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  469
  420
  29
  20
  361
  14
  375
  1
  11057/12480
  321
  #t
  109/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  469
  420
  29
  20
  361
  14
  375
  1
  11057/12480
  321
  #t
  109/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  469
  420
  29
  20
  361
  14
  375
  1
  11057/12480
  321
  #t
  109/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  471
  422
  29
  20
  362
  14
  376
  1
  11117/12600
  323
  #t
  547/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  472
  423
  29
  20
  362
  14
  376
  1
  2221/2520
  323
  #f
  551/423
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  473
  424
  29
  20
  362
  14
  376
  1
  443/504
  323
  #f
  553/424
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  476
  426
  29
  21
  362
  14
  376
  1
  2207/2520
  323
  #f
  93/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  477
  427
  29
  21
  362
  14
  376
  1
  2203/2520
  323
  #f
  80/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  477
  427
  29
  21
  362
  14
  376
  1
  2203/2520
  323
  #f
  80/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  478
  428
  29
  21
  362
  14
  376
  1
  2197/2520
  323
  #f
  281/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  483
  432
  29
  22
  362
  14
  376
  1
  2173/2520
  327
  #t
  283/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  483
  432
  29
  22
  362
  14
  376
  1
  2173/2520
  327
  #f
  283/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  483
  432
  29
  22
  362
  14
  376
  1
  2173/2520
  327
  #t
  283/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  484
  433
  29
  22
  362
  14
  376
  1
  241/280
  327
  #f
  568/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  485
  434
  29
  22
  362
  14
  376
  1
  433/504
  327
  #f
  285/217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  487
  436
  29
  22
  363
  14
  377
  1
  2159/2520
  329
  #t
  573/436
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  488
  437
  29
  22
  363
  14
  377
  1
  10783/12600
  329
  #f
  25/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  488
  437
  29
  22
  363
  14
  377
  1
  10783/12600
  329
  #t
  25/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  489
  438
  29
  22
  363
  14
  377
  1
  10763/12600
  329
  #f
  577/438
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  490
  439
  29
  22
  363
  14
  377
  1
  10733/12600
  330
  #t
  578/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  491
  440
  29
  22
  363
  14
  377
  1
  3571/4200
  330
  #f
  29/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  492
  441
  29
  22
  363
  14
  377
  1
  10693/12600
  330
  #f
  194/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  492
  441
  29
  22
  363
  14
  377
  1
  10693/12600
  330
  #t
  194/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  493
  442
  29
  22
  363
  14
  377
  1
  10663/12600
  331
  #t
  583/442
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  494
  443
  29
  22
  363
  14
  377
  1
  1519/1800
  332
  #t
  584/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  495
  444
  29
  22
  363
  14
  377
  1
  10621/12600
  333
  #t
  195/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  495
  444
  29
  22
  363
  14
  377
  1
  10621/12600
  333
  #t
  195/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  495
  444
  29
  22
  363
  14
  377
  1
  10621/12600
  333
  #t
  195/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  496
  445
  29
  22
  363
  14
  377
  1
  10601/12600
  333
  #f
  587/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  496
  445
  29
  22
  363
  14
  377
  1
  10601/12600
  333
  #t
  587/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  496
  445
  29
  22
  363
  14
  377
  1
  10601/12600
  333
  #t
  587/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  496
  445
  29
  22
  363
  14
  377
  1
  10601/12600
  333
  #t
  587/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  497
  446
  29
  22
  363
  14
  377
  1
  10589/12600
  333
  #f
  591/446
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  498
  447
  29
  22
  363
  14
  377
  1
  1511/1800
  333
  #f
  593/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  499
  448
  29
  22
  363
  14
  377
  1
  10547/12600
  334
  #t
  297/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  500
  449
  29
  22
  363
  14
  377
  1
  10517/12600
  334
  #f
  596/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  501
  450
  29
  22
  363
  14
  377
  1
  3499/4200
  334
  #f
  299/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  502
  451
  29
  22
  363
  14
  377
  1
  10477/12600
  334
  #f
  600/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  503
  452
  29
  22
  363
  14
  377
  1
  299/360
  335
  #t
  601/452
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  504
  453
  29
  22
  363
  14
  377
  1
  209/252
  336
  #t
  602/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  505
  454
  29
  22
  363
  14
  377
  1
  149/180
  336
  #f
  302/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  505
  454
  29
  22
  363
  14
  377
  1
  149/180
  336
  #t
  302/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  505
  454
  29
  22
  363
  14
  377
  1
  149/180
  336
  #f
  302/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  506
  455
  29
  22
  363
  14
  377
  1
  52/63
  336
  #f
  606/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  506
  455
  29
  22
  363
  14
  377
  1
  52/63
  336
  #f
  606/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  507
  456
  29
  22
  363
  14
  377
  1
  1037/1260
  337
  #t
  607/456
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  507
  456
  29
  22
  363
  14
  377
  1
  1037/1260
  337
  #f
  607/456
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  508
  457
  29
  22
  363
  14
  377
  1
  517/630
  338
  #t
  608/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  508
  457
  29
  22
  363
  14
  377
  1
  517/630
  338
  #f
  608/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  508
  457
  29
  22
  363
  14
  377
  1
  517/630
  338
  #t
  608/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  508
  457
  29
  22
  363
  14
  377
  1
  517/630
  338
  #f
  608/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  518
  467
  29
  22
  372
  14
  386
  1
  1291/1575
  348
  #t
  618/467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  518
  467
  29
  22
  372
  14
  386
  1
  1291/1575
  348
  #t
  618/467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  519
  468
  29
  22
  372
  14
  386
  1
  2579/3150
  348
  #f
  311/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  519
  468
  29
  22
  372
  14
  386
  1
  2579/3150
  348
  #t
  311/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  520
  469
  29
  22
  372
  14
  386
  1
  184/225
  349
  #t
  89/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  521
  470
  29
  22
  372
  14
  386
  1
  5137/6300
  350
  #t
  312/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  522
  471
  29
  22
  372
  14
  386
  1
  2561/3150
  350
  #f
  626/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  523
  472
  29
  22
  372
  14
  386
  1
  5107/6300
  351
  #t
  627/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  524
  473
  29
  22
  372
  14
  386
  1
  1273/1575
  352
  #t
  628/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  524
  473
  29
  22
  372
  14
  386
  1
  1273/1575
  352
  #t
  628/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  524
  473
  29
  22
  372
  14
  386
  1
  1273/1575
  352
  #t
  628/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  525
  474
  29
  22
  372
  14
  386
  1
  5077/6300
  353
  #t
  629/474
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  526
  475
  29
  22
  372
  14
  386
  1
  563/700
  353
  #f
  631/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  527
  476
  29
  22
  372
  14
  386
  1
  421/525
  353
  #f
  633/476
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  527
  476
  29
  22
  372
  14
  386
  1
  421/525
  353
  #f
  633/476
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  527
  476
  29
  22
  372
  14
  386
  1
  421/525
  353
  #f
  633/476
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  528
  477
  29
  22
  372
  14
  386
  1
  841/1050
  354
  #t
  634/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  529
  478
  29
  22
  372
  14
  386
  1
  1259/1575
  355
  #t
  318/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  529
  478
  29
  22
  372
  14
  386
  1
  1259/1575
  355
  #f
  318/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  530
  479
  29
  22
  372
  14
  386
  1
  503/630
  356
  #t
  637/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  530
  479
  29
  22
  372
  14
  386
  1
  503/630
  356
  #f
  637/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  531
  480
  29
  22
  372
  14
  386
  1
  251/315
  356
  #f
  213/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  531
  480
  29
  22
  372
  14
  386
  1
  251/315
  356
  #f
  213/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  532
  481
  29
  22
  372
  14
  386
  1
  2507/3150
  357
  #t
  640/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  532
  481
  29
  22
  372
  14
  386
  1
  2507/3150
  357
  #t
  640/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  533
  482
  29
  22
  372
  14
  386
  1
  139/175
  357
  #f
  321/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  534
  483
  29
  22
  372
  14
  386
  1
  2497/3150
  357
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  535
  484
  29
  22
  372
  14
  386
  1
  178/225
  357
  #f
  323/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  535
  484
  29
  22
  372
  14
  386
  1
  178/225
  357
  #t
  323/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  535
  484
  29
  22
  372
  14
  386
  1
  178/225
  357
  #t
  323/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  422
  376
  29
  17
  346
  14
  360
  1
  291/310
  247
  #f
  535/376
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  423
  377
  29
  17
  346
  14
  360
  1
  1741/1860
  248
  #t
  536/377
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  424
  378
  29
  17
  346
  14
  360
  1
  14/15
  249
  #t
  179/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  424
  378
  29
  17
  346
  14
  360
  1
  14/15
  249
  #f
  179/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  424
  378
  29
  17
  346
  14
  360
  1
  14/15
  249
  #t
  179/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  425
  379
  29
  17
  346
  14
  360
  1
  577/620
  250
  #t
  538/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  426
  380
  29
  17
  346
  14
  360
  1
  863/930
  250
  #f
  27/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  427
  381
  29
  17
  346
  14
  360
  1
  1721/1860
  251
  #t
  541/381
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  428
  382
  29
  17
  346
  14
  360
  1
  5153/5580
  251
  #f
  543/382
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  445
  398
  29
  18
  362
  14
  376
  1
  10849/11700
  259
  #f
  567/398
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  445
  398
  29
  18
  362
  14
  376
  1
  10849/11700
  259
  #t
  567/398
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  446
  399
  29
  18
  362
  14
  376
  1
  10837/11700
  259
  #f
  569/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  447
  400
  29
  18
  362
  14
  376
  1
  10817/11700
  259
  #f
  143/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  448
  401
  29
  18
  362
  14
  376
  1
  10787/11700
  260
  #t
  573/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  453
  405
  29
  19
  362
  14
  376
  1
  10667/11700
  261
  #f
  116/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  454
  406
  29
  19
  362
  14
  376
  1
  2131/2340
  262
  #t
  83/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  455
  407
  29
  19
  362
  14
  376
  1
  709/780
  262
  #f
  53/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  458
  410
  29
  19
  365
  14
  379
  1
  721/792
  264
  #f
  587/410
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  459
  411
  29
  19
  365
  14
  379
  1
  3601/3960
  265
  #t
  196/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  460
  412
  29
  19
  365
  14
  379
  1
  10783/11880
  265
  #f
  295/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  460
  412
  29
  19
  365
  14
  379
  1
  10783/11880
  265
  #f
  295/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  460
  412
  29
  19
  365
  14
  379
  1
  10783/11880
  265
  #t
  295/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  461
  413
  29
  19
  365
  14
  379
  1
  10763/11880
  265
  #f
  592/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  461
  413
  29
  19
  365
  14
  379
  1
  10763/11880
  265
  #f
  592/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  462
  414
  29
  19
  365
  14
  379
  1
  3581/3960
  265
  #f
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  463
  415
  29
  19
  365
  14
  379
  1
  3577/3960
  265
  #f
  596/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  463
  415
  29
  19
  365
  14
  379
  1
  3577/3960
  265
  #t
  596/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  464
  416
  29
  19
  365
  14
  379
  1
  1189/1320
  266
  #t
  597/416
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  465
  417
  29
  19
  365
  14
  379
  1
  3557/3960
  266
  #f
  599/417
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  466
  418
  29
  19
  365
  14
  379
  1
  323/360
  266
  #f
  601/418
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  467
  419
  29
  19
  365
  14
  379
  1
  1181/1320
  267
  #t
  602/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  468
  420
  29
  19
  365
  14
  379
  1
  3533/3960
  267
  #f
  151/105
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  470
  422
  29
  19
  366
  14
  380
  1
  3523/3960
  269
  #t
  607/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  471
  423
  29
  19
  366
  14
  380
  1
  959/1080
  269
  #f
  203/141
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  474
  425
  29
  20
  366
  14
  380
  1
  10489/11880
  269
  #f
  613/425
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  474
  425
  29
  20
  366
  14
  380
  1
  10489/11880
  269
  #t
  613/425
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  475
  426
  29
  20
  366
  14
  380
  1
  10477/11880
  269
  #f
  617/426
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  480
  430
  29
  21
  366
  14
  380
  1
  947/1080
  273
  #t
  621/430
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  481
  431
  29
  21
  366
  14
  380
  1
  2081/2376
  273
  #f
  625/431
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  482
  432
  29
  21
  366
  14
  380
  1
  10393/11880
  273
  #f
  209/144
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  482
  432
  29
  21
  366
  14
  380
  1
  10393/11880
  273
  #t
  209/144
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  483
  433
  29
  21
  366
  14
  380
  1
  943/1080
  273
  #f
  629/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  484
  434
  29
  21
  366
  14
  380
  1
  10343/11880
  273
  #f
  631/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  484
  434
  29
  21
  366
  14
  380
  1
  10343/11880
  273
  #f
  631/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  484
  434
  29
  21
  366
  14
  380
  1
  10343/11880
  273
  #t
  631/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  487
  437
  29
  21
  369
  14
  383
  1
  10523/12060
  276
  #t
  634/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  487
  437
  29
  21
  369
  14
  383
  1
  10523/12060
  276
  #t
  634/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  488
  438
  29
  21
  369
  14
  383
  1
  1167/1340
  276
  #f
  106/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  489
  439
  29
  21
  369
  14
  383
  1
  3497/4020
  277
  #t
  637/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  490
  440
  29
  21
  369
  14
  383
  1
  3493/4020
  277
  #f
  641/440
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  491
  441
  29
  21
  369
  14
  383
  1
  10459/12060
  278
  #t
  643/441
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  492
  442
  29
  21
  369
  14
  383
  1
  10429/12060
  279
  #t
  322/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  493
  443
  29
  21
  369
  14
  383
  1
  10409/12060
  279
  #f
  646/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  494
  444
  29
  21
  369
  14
  383
  1
  10379/12060
  280
  #t
  647/444
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  494
  444
  29
  21
  369
  14
  383
  1
  10379/12060
  280
  #f
  647/444
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  495
  445
  29
  21
  369
  14
  383
  1
  10349/12060
  280
  #f
  649/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  495
  445
  29
  21
  369
  14
  383
  1
  10349/12060
  280
  #t
  649/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  496
  446
  29
  21
  369
  14
  383
  1
  10319/12060
  281
  #t
  325/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  497
  447
  29
  21
  369
  14
  383
  1
  10289/12060
  282
  #t
  217/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  498
  448
  29
  21
  369
  14
  383
  1
  5137/6030
  283
  #t
  163/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  499
  449
  29
  21
  369
  14
  383
  1
  2561/3015
  284
  #t
  653/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  499
  449
  29
  21
  369
  14
  383
  1
  2561/3015
  284
  #f
  653/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  500
  450
  29
  21
  369
  14
  383
  1
  2558/3015
  284
  #f
  131/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  503
  452
  29
  22
  369
  14
  383
  1
  2548/3015
  284
  #f
  165/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  504
  453
  29
  22
  369
  14
  383
  1
  5081/6030
  284
  #f
  662/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  506
  455
  29
  22
  371
  14
  385
  1
  5141/6090
  286
  #t
  664/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  506
  455
  29
  22
  371
  14
  385
  1
  5141/6090
  286
  #f
  664/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  507
  456
  29
  22
  371
  14
  385
  1
  2563/3045
  287
  #t
  35/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  508
  457
  29
  22
  371
  14
  385
  1
  5111/6090
  287
  #f
  667/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  509
  458
  29
  22
  371
  14
  385
  1
  1021/1218
  287
  #f
  669/458
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  509
  458
  29
  22
  371
  14
  385
  1
  1021/1218
  287
  #t
  669/458
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  509
  458
  29
  22
  371
  14
  385
  1
  1021/1218
  287
  #t
  669/458
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  509
  458
  29
  22
  371
  14
  385
  1
  1021/1218
  287
  #f
  669/458
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  510
  459
  29
  22
  371
  14
  385
  1
  1019/1218
  287
  #f
  671/459
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  511
  460
  29
  22
  371
  14
  385
  1
  508/609
  288
  #t
  168/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  511
  460
  29
  22
  371
  14
  385
  1
  508/609
  288
  #f
  168/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  511
  460
  29
  22
  371
  14
  385
  1
  508/609
  288
  #t
  168/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  511
  460
  29
  22
  371
  14
  385
  1
  508/609
  288
  #f
  168/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  514
  463
  29
  22
  374
  14
  388
  1
  517/618
  288
  #f
  678/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  514
  463
  29
  22
  374
  14
  388
  1
  517/618
  288
  #f
  678/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  515
  464
  29
  22
  374
  14
  388
  1
  1031/1236
  288
  #f
  85/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  515
  464
  29
  22
  374
  14
  388
  1
  1031/1236
  288
  #f
  85/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  516
  465
  29
  22
  374
  14
  388
  1
  343/412
  288
  #f
  22/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  517
  466
  29
  22
  374
  14
  388
  1
  685/824
  289
  #t
  683/466
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  517
  466
  29
  22
  374
  14
  388
  1
  685/824
  289
  #f
  683/466
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  518
  467
  29
  22
  374
  14
  388
  1
  683/824
  290
  #t
  684/467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  519
  468
  29
  22
  374
  14
  388
  1
  2045/2472
  290
  #f
  343/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  519
  468
  29
  22
  374
  14
  388
  1
  2045/2472
  290
  #f
  343/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  519
  468
  29
  22
  374
  14
  388
  1
  2045/2472
  290
  #t
  343/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  520
  469
  29
  22
  374
  14
  388
  1
  2041/2472
  291
  #t
  688/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  521
  470
  29
  22
  374
  14
  388
  1
  679/824
  291
  #f
  69/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  522
  471
  29
  22
  374
  14
  388
  1
  2033/2472
  291
  #f
  692/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  522
  471
  29
  22
  374
  14
  388
  1
  2033/2472
  291
  #f
  692/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  522
  471
  29
  22
  374
  14
  388
  1
  2033/2472
  291
  #f
  692/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  522
  471
  29
  22
  374
  14
  388
  1
  2033/2472
  291
  #f
  692/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  522
  471
  29
  22
  374
  14
  388
  1
  2033/2472
  291
  #t
  692/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  522
  471
  29
  22
  374
  14
  388
  1
  2033/2472
  291
  #f
  692/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  524
  473
  29
  22
  375
  14
  389
  1
  2045/2496
  293
  #t
  694/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  525
  474
  29
  22
  375
  14
  389
  1
  10213/12480
  293
  #f
  349/237
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  526
  475
  29
  22
  375
  14
  389
  1
  10183/12480
  294
  #t
  699/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  527
  476
  29
  22
  375
  14
  389
  1
  10163/12480
  294
  #f
  701/476
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  527
  476
  29
  22
  375
  14
  389
  1
  10163/12480
  294
  #f
  701/476
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  528
  477
  29
  22
  375
  14
  389
  1
  10151/12480
  294
  #f
  703/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  529
  478
  29
  22
  375
  14
  389
  1
  10121/12480
  295
  #t
  352/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  529
  478
  29
  22
  375
  14
  389
  1
  10121/12480
  295
  #f
  352/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  529
  478
  29
  22
  375
  14
  389
  1
  10121/12480
  295
  #t
  352/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  529
  478
  29
  22
  375
  14
  389
  1
  10121/12480
  295
  #f
  352/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  529
  478
  29
  22
  375
  14
  389
  1
  10121/12480
  295
  #f
  352/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  529
  478
  29
  22
  375
  14
  389
  1
  10121/12480
  295
  #t
  352/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  530
  479
  29
  22
  375
  14
  389
  1
  10091/12480
  296
  #t
  705/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  531
  480
  29
  22
  375
  14
  389
  1
  10061/12480
  297
  #t
  353/240
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  531
  480
  29
  22
  375
  14
  389
  1
  10061/12480
  297
  #f
  353/240
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  532
  481
  29
  22
  375
  14
  389
  1
  3347/4160
  297
  #f
  708/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  533
  482
  29
  22
  375
  14
  389
  1
  10021/12480
  297
  #f
  355/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  533
  482
  29
  22
  375
  14
  389
  1
  10021/12480
  297
  #f
  355/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  535
  484
  29
  22
  376
  14
  390
  1
  10081/12600
  299
  #t
  178/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  536
  485
  29
  22
  376
  14
  390
  1
  719/900
  300
  #t
  713/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  536
  485
  29
  22
  376
  14
  390
  1
  719/900
  300
  #t
  713/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  537
  486
  29
  22
  376
  14
  390
  1
  5027/6300
  300
  #f
  715/486
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  538
  487
  29
  22
  376
  14
  390
  1
  179/225
  301
  #t
  716/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  539
  488
  29
  22
  376
  14
  390
  1
  4997/6300
  302
  #t
  717/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  1
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  539
  488
  29
  22
  376
  14
  390
  1
  4997/6300
  302
  #f
  717/488
  ((0 0 0) (0 0 0) (0 0 0)))
