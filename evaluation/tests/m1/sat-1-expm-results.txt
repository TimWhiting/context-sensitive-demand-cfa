'(expression:
  (letrec ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
           (sat-solve-4
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
    (app sat-solve-4 phi)))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x4 (-> x2 <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
     <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x4 x2)
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app not x2) (app not x3))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app not x2) (-> (app not x3) <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list '(#t ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x1 <-) (app not x2) (app not x3))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> sat-solve-4 <-) phi) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (-> (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> and <-)
   (app or x1 (app not x2) (app not x3))
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 (app not x2) (app not x3))
   (-> (app or (app not x2) (app not x3)) <-)
   (app or x4 x2))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list '(#t ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
     <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (expenv
    '(((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2) (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2) (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1 x2 x3 x4)
    (->
     (app
      and
      (app or x1 (app not x2) (app not x3))
      (app or (app not x2) (app not x3))
      (app or x4 x2))
     <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x3 <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (-> (app not x2) <-) (app not x3))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list '(#t ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2) (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2) (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x3 <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (p)
    (->
     (app
      try
      (λ (n1)
        (app
         try
         (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
     <-))
 (expenv
  '((((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (-> (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            phi
            =
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2)))
            <-)
           try
           sat-solve-4)
    bod)
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           (-> try = (λ (f) (app or (app f (app #t)) (app f (app #f)))) <-)
           sat-solve-4)
    bod)
 (expenv '()))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (-> (app or x1 (app not x2) (app not x3)) <-)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))
  (list '(#t ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))) <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (app not x2) (-> (app not x3) <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list '(#t ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app sat-solve-4 (-> phi <-)) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
    <-))
 (expenv
  '((((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (expenv
    '(((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (expenv
  '((((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (expenv
  '((((bod
       (n3)
       (ran
        try
        ()
        ()
        (bod
         (n2)
         (ran
          try
          ()
          ()
          (bod
           (n1)
           (ran
            try
            ()
            ()
            (bod
             (p)
             (bin
              letrec
              sat-solve-4
              (app sat-solve-4 phi)
              ((phi
                (λ (x1 x2 x3 x4)
                  (app
                   and
                   (app or x1 (app not x2) (app not x3))
                   (app or (app not x2) (app not x3))
                   (app or x4 x2))))
               (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
              ()
              (top)))))))))
      app
      try
      (λ (n4) (app p n1 n2 n3 n4)))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           try
           (->
            sat-solve-4
            =
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
            <-))
    bod)
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n1)
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
 (expenv
  '((((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (expenv
    '(((app or (-> (app f (app #t)) <-) (app f (app #f))))
      ((app or (app f (app #t)) (-> (app f (app #f)) <-)))
      ((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 (app not x2) (app not x3))
   (app or (app not x2) (app not x3))
   (-> (app or x4 x2) <-))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x1 (app not x2) (app not x3))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (expenv
  '((((bod
       (n2)
       (ran
        try
        ()
        ()
        (bod
         (n1)
         (ran
          try
          ()
          ()
          (bod
           (p)
           (bin
            letrec
            sat-solve-4
            (app sat-solve-4 phi)
            ((phi
              (λ (x1 x2 x3 x4)
                (app
                 and
                 (app or x1 (app not x2) (app not x3))
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))
             (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
            ()
            (top)))))))
      app
      try
      (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app not x2) <-) (app not x3))
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))
  (list '(#t ()) (expenv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (expenv
  '((((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ((app f (app #t)))
       ()
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #f)))
    (((ran
       or
       ()
       ((app f (app #f)))
       (bod
        (f)
        (bin
         letrec
         try
         (app sat-solve-4 phi)
         ((phi
           (λ (x1 x2 x3 x4)
             (app
              and
              (app or x1 (app not x2) (app not x3))
              (app or (app not x2) (app not x3))
              (app or x4 x2)))))
         ((sat-solve-4
           (λ (p)
             (app
              try
              (λ (n1)
                (app
                 try
                 (λ (n2)
                   (app
                    try
                    (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
         (top))))
      app
      f
      (app #t)))
    (((let-bod
       letrec
       ((phi
         (λ (x1 x2 x3 x4)
           (app
            and
            (app or x1 (app not x2) (app not x3))
            (app or (app not x2) (app not x3))
            (app or x4 x2))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
        (sat-solve-4
         (λ (p)
           (app
            try
            (λ (n1)
              (app
               try
               (λ (n2)
                 (app
                  try
                  (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
       (top))
      app
      sat-solve-4
      phi)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n2)
         (->
          (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x4 <-) x2)
 (expenv
  '((((bod
       (n4)
       (ran
        try
        ()
        ()
        (bod
         (n3)
         (ran
          try
          ()
          ()
          (bod
           (n2)
           (ran
            try
            ()
            ()
            (bod
             (n1)
             (ran
              try
              ()
              ()
              (bod
               (p)
               (bin
                letrec
                sat-solve-4
                (app sat-solve-4 phi)
                ((phi
                  (λ (x1 x2 x3 x4)
                    (app
                     and
                     (app or x1 (app not x2) (app not x3))
                     (app or (app not x2) (app not x3))
                     (app or x4 x2))))
                 (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                ()
                (top)))))))))))
      app
      p
      n1
      n2
      n3
      n4)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (expenv
  '((((bod
       (n1)
       (ran
        try
        ()
        ()
        (bod
         (p)
         (bin
          letrec
          sat-solve-4
          (app sat-solve-4 phi)
          ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
          ()
          (top)))))
      app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (expenv
    '(((letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (expenv
  '((((bod
       (p)
       (bin
        letrec
        sat-solve-4
        (app sat-solve-4 phi)
        ((phi
          (λ (x1 x2 x3 x4)
            (app
             and
             (app or x1 (app not x2) (app not x3))
             (app or (app not x2) (app not x3))
             (app or x4 x2))))
         (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
        ()
        (top)))
      app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))))))
  (list
   '(#f ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))
  (list
   '(#t ())
   (expenv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
