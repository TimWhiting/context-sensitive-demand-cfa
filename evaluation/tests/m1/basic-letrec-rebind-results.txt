'(expression:
  (letrec ((a
            (λ (y)
              (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
    (app a 2)))
(list
 'query:
 '(app (-> - <-) y 1)
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) ((#t) (app a (app - y 1))) (-> (#f) y <-))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app a (-> (app - y 1) <-))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)) <-))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> a <-) 2) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (-> (app equal? y 0) <-) ((#t) (app a (app - y 1))) ((#f) y))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
(list
 'clos/con:
 (list
  (list '(#f ()) (flatenv '((letrec (a) (-> (app a 2) <-)))))
  (list '(#t ()) (flatenv '((letrec (a) (-> (app a 2) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) ((#t) (app a (app - y 1))) (-> (#f) y <-))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? y (-> 0 <-))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> a <-) (app - y 1))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> a <-) (app - y 1))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> equal? <-) y 0)
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app a (-> 2 <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (-> (#t) (app a (app - y 1)) <-) ((#f) y))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? (-> y <-) 0)
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> equal? <-) y 0)
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? y (-> 0 <-))
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? (-> y <-) 0)
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(app a (-> (app - y 1) <-))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (-> (app equal? y 0) <-) ((#t) (app a (app - y 1))) ((#f) y))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match (app equal? y 0) (-> (#t) (app a (app - y 1)) <-) ((#f) y)))))
  (list
   '(#t ())
   (flatenv
    '((match (app equal? y 0) (-> (#t) (app a (app - y 1)) <-) ((#f) y)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec (a) (-> (app a 2) <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)) <-))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (-> (#t) (app a (app - y 1)) <-) ((#f) y))
 (flatenv
  '(((match-clause
      (#t)
      (app equal? y 0)
      ()
      (((#f) y))
      (bod (y) (bin letrec a (app a 2) () () (top))))
     app
     a
     (app - y 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            a
            =
            (λ (y)
              (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
            <-))
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (flatenv
  '(((let-bod
      letrec
      ((a
        (λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
      (top))
     app
     a
     2))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
