'(clean-cache
  sat-1
  1
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  209
  125
  45
  39
  61
  19
  80
  1
  983/1188
  81
  #f
  169/125
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  206
  128
  43
  35
  58
  17
  75
  1
  397/540
  79
  #f
  177/128
  ((39/2 39/2 0) (19 19 0) (19 19 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  56
  34
  11
  11
  16
  6
  22
  1
  21/34
  23
  #f
  45/34
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  25
  12
  6
  7
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  64
  40
  11
  13
  20
  6
  26
  1
  9/14
  26
  #f
  27/20
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  109
  64
  22
  23
  32
  15
  47
  1
  77/108
  40
  #f
  11/8
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  25
  12
  6
  7
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  55
  27
  11
  17
  14
  9
  23
  1
  2/3
  19
  #f
  35/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  106
  61
  22
  23
  31
  15
  46
  1
  163/225
  39
  #f
  83/61
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  107
  62
  22
  23
  31
  15
  46
  1
  317/450
  39
  #f
  85/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  108
  63
  22
  23
  31
  15
  46
  1
  317/468
  39
  #f
  29/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  109
  64
  22
  23
  31
  15
  46
  1
  77/117
  39
  #f
  89/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  192
  114
  43
  35
  46
  17
  63
  1
  551/864
  73
  #f
  155/114
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  193
  115
  43
  35
  46
  17
  63
  1
  1075/1728
  73
  #f
  157/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  218
  133
  45
  40
  61
  19
  80
  1
  875/1188
  81
  #f
  185/133
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  298
  199
  50
  49
  67
  20
  87
  1
  2419/3276
  127
  #f
  292/199
  ((12 12 0) (23/2 23/2 0) (12 12 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  359
  249
  50
  60
  92
  20
  112
  1
  13463/19140
  145
  #f
  398/249
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  361
  251
  50
  60
  92
  20
  112
  1
  916/1305
  146
  #f
  401/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  362
  252
  50
  60
  92
  20
  112
  1
  1823/2610
  147
  #t
  67/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  363
  253
  50
  60
  92
  20
  112
  1
  907/1305
  147
  #f
  421/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  364
  254
  50
  60
  92
  20
  112
  1
  361/522
  147
  #f
  423/254
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  382
  267
  51
  64
  92
  20
  112
  1
  361/522
  155
  #f
  451/267
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  384
  269
  51
  64
  92
  20
  112
  1
  713/1044
  156
  #f
  454/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  385
  270
  51
  64
  92
  20
  112
  1
  3547/5220
  156
  #f
  95/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  441
  311
  54
  76
  92
  20
  112
  1
  1181/1740
  180
  #f
  581/311
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  441
  311
  54
  76
  92
  20
  112
  1
  1181/1740
  180
  #t
  581/311
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  447
  312
  59
  76
  92
  20
  112
  1
  1181/1740
  180
  #f
  583/312
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  451
  315
  59
  77
  95
  20
  115
  1
  157/225
  180
  #f
  589/315
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  452
  316
  59
  77
  95
  20
  115
  1
  1241/1800
  180
  #f
  591/316
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  453
  317
  59
  77
  95
  20
  115
  1
  613/900
  180
  #f
  593/317
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  454
  318
  59
  77
  95
  20
  115
  1
  1211/1800
  180
  #f
  595/318
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  28
  13
  6
  9
  7
  4
  11
  1
  13/20
  11
  #t
  15/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  109
  64
  22
  23
  32
  15
  47
  1
  77/108
  40
  #f
  11/8
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  57
  33
  11
  13
  15
  6
  21
  1
  10/17
  23
  #f
  43/33
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  58
  34
  11
  13
  15
  6
  21
  1
  5/9
  23
  #f
  45/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  215
  130
  45
  40
  61
  19
  80
  1
  1831/2376
  82
  #f
  89/65
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  220
  134
  46
  40
  61
  19
  80
  1
  4271/5544
  85
  #f
  183/134
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  221
  135
  46
  40
  61
  19
  80
  1
  526/693
  85
  #f
  37/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  221
  135
  46
  40
  61
  19
  80
  1
  526/693
  85
  #t
  37/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  222
  136
  46
  40
  61
  19
  80
  1
  4145/5544
  85
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  223
  137
  46
  40
  61
  19
  80
  1
  2041/2772
  85
  #f
  189/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  224
  138
  46
  40
  61
  19
  80
  1
  4019/5544
  85
  #f
  191/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  237
  146
  51
  40
  62
  20
  82
  1
  4145/6174
  92
  #f
  116/73
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  238
  147
  51
  40
  62
  20
  82
  1
  829/1260
  92
  #f
  251/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  258
  158
  54
  46
  62
  20
  82
  1
  2959/4500
  102
  #f
  287/158
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  377
  258
  54
  65
  74
  20
  94
  1
  685/1008
  159
  #f
  77/43
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  419
  287
  59
  73
  74
  20
  94
  1
  685/1008
  175
  #f
  540/287
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  462
  322
  59
  81
  95
  20
  115
  1
  49747/70200
  187
  #f
  304/161
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  463
  323
  59
  81
  95
  20
  115
  1
  24581/35100
  187
  #f
  610/323
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  464
  324
  59
  81
  95
  20
  115
  1
  48577/70200
  187
  #f
  17/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  464
  324
  59
  81
  95
  20
  115
  1
  48577/70200
  187
  #f
  17/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  206
  128
  43
  35
  58
  17
  75
  1
  397/540
  79
  #f
  177/128
  ((37/2 37/2 0) (19 19 0) (18 18 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  345
  237
  50
  58
  83
  20
  103
  1
  24333/35728
  141
  #f
  126/79
  ((15 15 0) (15 15 0) (15 15 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  350
  241
  50
  59
  86
  20
  106
  1
  50261/72732
  143
  #f
  384/241
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  351
  242
  50
  59
  86
  20
  106
  1
  16541/24244
  143
  #f
  193/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  351
  242
  50
  59
  86
  20
  106
  1
  16541/24244
  143
  #f
  193/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  351
  242
  50
  59
  86
  20
  106
  1
  16541/24244
  143
  #f
  193/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  358
  249
  50
  59
  92
  20
  112
  1
  187123/277530
  145
  #f
  398/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  359
  250
  50
  59
  92
  20
  112
  1
  93083/138765
  146
  #t
  399/250
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  360
  251
  50
  59
  92
  20
  112
  1
  185209/277530
  147
  #t
  400/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  360
  251
  50
  59
  92
  20
  112
  1
  185209/277530
  147
  #f
  400/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  361
  252
  50
  59
  92
  20
  112
  1
  365633/555060
  147
  #f
  67/42
  ((0 0 0) (0 0 0) (0 0 0)))
