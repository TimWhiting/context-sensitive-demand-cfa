'(clean-cache
  facehugger
  1
  5
  23
  letrec*
  "\"'(eval ((top) letrec* (id ... g) ...) (env ()))\""
  103
  84
  13
  6
  76
  11
  87
  1
  133/141
  54
  #f
  19/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  match
  "\"'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env ((□? (n)))))\""
  50
  39
  8
  3
  32
  7
  39
  1
  49/57
  25
  #f
  53/39
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app g (app - n 1))) <-)) _)\n  (env ((□? (n)))))\""
  42
  31
  8
  3
  27
  7
  34
  1
  35/38
  19
  #f
  43/31
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app * n (-> (app g (app - n 1)) <-)) (env ((□? (n)))))\""
  41
  30
  8
  3
  24
  7
  31
  1
  101/114
  19
  #f
  41/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app g (-> (app - n 1) <-)) (env ((□? (n)))))\""
  25
  15
  8
  2
  11
  7
  18
  1
  17/21
  11
  #f
  19/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n)))))\""
  22
  12
  8
  2
  11
  7
  18
  1
  20/21
  9
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app * (-> n <-) (app g (app - n 1))) (env ((□? (n)))))\""
  22
  12
  8
  2
  11
  7
  18
  1
  7/8
  9
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (n)))))\""
  31
  21
  8
  2
  17
  7
  24
  1
  9/11
  16
  #f
  26/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (n)))))\""
  22
  12
  8
  2
  11
  7
  18
  1
  7/8
  9
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  match
  "\"'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env ((□? (n)))))\""
  50
  39
  8
  3
  32
  7
  39
  1
  49/57
  25
  #f
  53/39
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app f (app - n 1))) <-)) _)\n  (env ((□? (n)))))\""
  42
  31
  8
  3
  27
  7
  34
  1
  35/38
  19
  #f
  43/31
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app * n (-> (app f (app - n 1)) <-)) (env ((□? (n)))))\""
  41
  30
  8
  3
  24
  7
  31
  1
  101/114
  19
  #f
  41/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app f (-> (app - n 1) <-)) (env ((□? (n)))))\""
  25
  15
  8
  2
  11
  7
  18
  1
  17/21
  11
  #f
  19/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n)))))\""
  22
  12
  8
  2
  11
  7
  18
  1
  20/21
  9
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app * (-> n <-) (app f (app - n 1))) (env ((□? (n)))))\""
  22
  12
  8
  2
  11
  7
  18
  1
  7/8
  9
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (n)))))\""
  31
  21
  8
  2
  17
  7
  24
  1
  9/11
  16
  #f
  26/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (n)))))\""
  22
  12
  8
  2
  11
  7
  18
  1
  7/8
  9
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (letrec* (id ... g) (-> (app + (app (app id f) 3) (app (app id g) 4)) <-))\n  (env ()))\""
  102
  83
  13
  6
  75
  11
  86
  1
  65/69
  54
  #f
  112/83
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app + (app (app id f) 3) (-> (app (app id g) 4) <-)) (env ()))\""
  53
  41
  8
  4
  37
  7
  44
  1
  65/69
  27
  #f
  55/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app (-> (app id g) <-) 4) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app + (-> (app (app id f) 3) <-) (app (app id g) 4)) (env ()))\""
  53
  41
  8
  4
  37
  7
  44
  1
  65/69
  27
  #f
  55/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  facehugger
  1
  5
  23
  app
  "\"'(eval (app (-> (app id f) <-) 3) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app * n (-> (app g (app - n 1)) <-)) (env ((□? (n)))))\""
  41
  30
  8
  3
  24
  7
  31
  1
  101/114
  19
  #f
  41/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app g (app - n 1))) <-)) _)\n  (env ((□? (n)))))\""
  45
  34
  8
  3
  27
  7
  34
  1
  33/38
  21
  #f
  47/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app * (-> n <-) (app g (app - n 1))) (env ((□? (n)))))\""
  46
  35
  8
  3
  27
  7
  34
  1
  97/114
  21
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app g (-> (app - n 1) <-)) (env ((□? (n)))))\""
  46
  35
  8
  3
  27
  7
  34
  1
  97/114
  21
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (n)))))\""
  63
  46
  13
  4
  37
  11
  48
  1
  133/156
  29
  #f
  63/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  match
  "\"'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env ((□? (n)))))\""
  69
  52
  13
  4
  42
  11
  53
  1
  131/156
  33
  #f
  71/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  73
  56
  13
  4
  45
  11
  56
  1
  149/180
  36
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  match
  "\"'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env ((□? (n)))))\""
  95
  77
  13
  5
  65
  11
  76
  1
  7/8
  48
  #f
  106/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app f (-> (app - n 1) <-)) (env ((□? (n)))))\""
  96
  78
  13
  5
  65
  11
  76
  1
  13/15
  48
  #f
  18/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app * n (-> (app f (app - n 1)) <-)) (env ((□? (n)))))\""
  97
  79
  13
  5
  65
  11
  76
  1
  103/120
  48
  #f
  110/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n)))))\""
  98
  80
  13
  5
  65
  11
  76
  1
  17/20
  48
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app (-> (app id g) <-) 4) (env ()))\""
  101
  82
  13
  6
  67
  11
  78
  1
  71/82
  50
  #t
  57/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app * (-> n <-) (app f (app - n 1))) (env ((□? (n)))))\""
  102
  83
  13
  6
  67
  11
  78
  1
  211/246
  50
  #f
  116/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (letrec* (id ... g) (-> (app + (app (app id f) 3) (app (app id g) 4)) <-))\n  (env ()))\""
  110
  91
  13
  6
  75
  11
  86
  1
  61/69
  53
  #f
  129/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  letrec*
  "\"'(eval ((top) letrec* (id ... g) ...) (env ()))\""
  111
  92
  13
  6
  76
  11
  87
  1
  125/141
  53
  #f
  131/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (n)))))\""
  112
  93
  13
  6
  76
  11
  87
  1
  124/141
  53
  #f
  133/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app + (-> (app (app id f) 3) <-) (app (app id g) 4)) (env ()))\""
  112
  93
  13
  6
  76
  11
  87
  1
  124/141
  53
  #f
  133/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (n)))))\""
  113
  94
  13
  6
  76
  11
  87
  1
  41/47
  53
  #f
  135/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (n)))))\""
  114
  95
  13
  6
  76
  11
  87
  1
  122/141
  53
  #f
  137/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app + (app (app id f) 3) (-> (app (app id g) 4) <-)) (env ()))\""
  114
  95
  13
  6
  76
  11
  87
  1
  122/141
  53
  #f
  137/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval (app (-> (app id f) <-) 3) (env ()))\""
  114
  95
  13
  6
  76
  11
  87
  1
  122/141
  53
  #t
  137/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n)))))\""
  114
  95
  13
  6
  76
  11
  87
  1
  122/141
  53
  #f
  137/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app f (app - n 1))) <-)) _)\n  (env ((□? (n)))))\""
  115
  96
  13
  6
  76
  11
  87
  1
  121/141
  53
  #f
  139/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  match
  "\"'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env ((□? (n)))))\""
  50
  39
  8
  3
  32
  7
  39
  1
  49/57
  25
  #f
  53/39
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app f (-> (app - n 1) <-)) (env ((□? (n)))))\""
  70
  53
  13
  4
  42
  11
  53
  1
  21/25
  35
  #f
  71/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (n)))))\""
  70
  53
  13
  4
  42
  11
  53
  1
  21/25
  35
  #f
  71/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app * (-> n <-) (app f (app - n 1))) (env ((□? (n)))))\""
  71
  54
  13
  4
  42
  11
  53
  1
  21/26
  35
  #f
  73/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  75
  58
  13
  4
  45
  11
  56
  1
  4/5
  38
  #f
  39/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (n)))))\""
  75
  58
  13
  4
  45
  11
  56
  1
  4/5
  38
  #f
  39/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app g (-> (app - n 1) <-)) (env ((□? (n)))))\""
  76
  59
  13
  4
  45
  11
  56
  1
  71/90
  38
  #f
  80/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app * n (-> (app f (app - n 1)) <-)) (env ((□? (n)))))\""
  90
  72
  13
  5
  57
  11
  68
  1
  101/120
  44
  #f
  25/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app (-> (app id f) <-) 3) (env ()))\""
  93
  74
  13
  6
  59
  11
  70
  1
  211/246
  46
  #t
  51/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app * (-> n <-) (app g (app - n 1))) (env ((□? (n)))))\""
  94
  75
  13
  6
  59
  11
  70
  1
  209/246
  46
  #f
  104/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  letrec*
  "\"'(eval ((top) letrec* (id ... g) ...) (env ()))\""
  111
  92
  13
  6
  76
  11
  87
  1
  83/94
  55
  #f
  129/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n)))))\""
  111
  92
  13
  6
  76
  11
  87
  1
  83/94
  55
  #f
  129/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app + (app (app id f) 3) (-> (app (app id g) 4) <-)) (env ()))\""
  111
  92
  13
  6
  76
  11
  87
  1
  83/94
  55
  #f
  129/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app g (app - n 1))) <-)) _)\n  (env ((□? (n)))))\""
  111
  92
  13
  6
  76
  11
  87
  1
  83/94
  55
  #f
  129/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n)))))\""
  112
  93
  13
  6
  76
  11
  87
  1
  247/282
  55
  #f
  131/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (n)))))\""
  113
  94
  13
  6
  76
  11
  87
  1
  245/282
  55
  #f
  133/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (n)))))\""
  114
  95
  13
  6
  76
  11
  87
  1
  81/94
  55
  #f
  27/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (letrec* (id ... g) (-> (app + (app (app id f) 3) (app (app id g) 4)) <-))\n  (env ()))\""
  114
  95
  13
  6
  76
  11
  87
  1
  81/94
  55
  #f
  27/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app * n (-> (app g (app - n 1)) <-)) (env ((□? (n)))))\""
  115
  96
  13
  6
  76
  11
  87
  1
  241/282
  55
  #f
  137/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app f (app - n 1))) <-)) _)\n  (env ((□? (n)))))\""
  116
  97
  13
  6
  76
  11
  87
  1
  239/282
  55
  #f
  139/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  match
  "\"'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env ((□? (n)))))\""
  117
  98
  13
  6
  76
  11
  87
  1
  79/94
  55
  #f
  141/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app + (-> (app (app id f) 3) <-) (app (app id g) 4)) (env ()))\""
  117
  98
  13
  6
  76
  11
  87
  1
  79/94
  55
  #f
  141/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  facehugger
  1
  5
  23
  app
  "\"'(eval (app (-> (app id g) <-) 4) (env ()))\""
  117
  98
  13
  6
  76
  11
  87
  1
  79/94
  55
  #t
  141/98
  ((0 0 0) (0 0 0) (0 0 0)))
