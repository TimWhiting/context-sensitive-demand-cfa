'(clean-cache
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  103
  75
  23
  5
  67
  13
  80
  1
  14/15
  50
  #f
  124/25
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  96
  71
  20
  5
  64
  13
  77
  1
  103/111
  47
  #f
  353/71
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  63
  36
  23
  4
  29
  13
  42
  1
  5/6
  36
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  49
  25
  20
  4
  24
  13
  37
  1
  15/16
  25
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  96
  70
  21
  5
  58
  13
  71
  1
  197/222
  48
  #f
  174/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  94
  68
  21
  5
  57
  13
  70
  1
  199/222
  48
  #f
  84/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  90
  64
  21
  5
  55
  13
  68
  1
  203/222
  46
  #f
  157/32
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  28
  16
  10
  2
  12
  6
  18
  1
  17/21
  6
  #f
  35/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  20/21
  5
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  28
  12
  12
  4
  4
  4
  8
  1
  1/3
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  34
  22
  10
  2
  18
  6
  24
  1
  9/11
  8
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  7/8
  5
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  65
  37
  23
  5
  30
  13
  43
  1
  31/36
  36
  #f
  186/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  102
  74
  23
  5
  66
  13
  79
  1
  109/117
  50
  #f
  183/37
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  28
  16
  10
  2
  12
  6
  18
  1
  17/21
  6
  #f
  35/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  69
  44
  20
  5
  39
  13
  52
  1
  127/138
  33
  #f
  211/44
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  73
  48
  20
  5
  42
  13
  55
  1
  67/75
  37
  #t
  77/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  74
  49
  20
  5
  42
  13
  55
  1
  67/78
  37
  #f
  235/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  79
  54
  20
  5
  46
  13
  59
  1
  73/87
  42
  #t
  130/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  82
  57
  20
  5
  48
  13
  61
  1
  5/6
  44
  #f
  92/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  83
  58
  20
  5
  48
  13
  61
  1
  37/45
  45
  #t
  281/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  88
  63
  20
  5
  52
  13
  65
  1
  155/192
  50
  #t
  34/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  88
  63
  20
  5
  52
  13
  65
  1
  155/192
  50
  #t
  34/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  89
  64
  20
  5
  52
  13
  65
  1
  51/64
  51
  #t
  311/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  108
  82
  20
  6
  69
  13
  82
  1
  55/63
  59
  #f
  407/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  109
  83
  20
  6
  69
  13
  82
  1
  109/126
  60
  #t
  412/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  109
  83
  20
  6
  69
  13
  82
  1
  109/126
  60
  #f
  412/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  115
  89
  20
  6
  74
  13
  87
  1
  31/36
  62
  #f
  442/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  119
  93
  20
  6
  78
  13
  91
  1
  118/135
  63
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  120
  94
  20
  6
  78
  13
  91
  1
  13/15
  63
  #f
  471/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  121
  95
  20
  6
  78
  13
  91
  1
  116/135
  64
  #t
  476/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  122
  96
  20
  6
  78
  13
  91
  1
  23/27
  65
  #t
  481/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  123
  97
  20
  6
  78
  13
  91
  1
  38/45
  65
  #f
  487/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  124
  98
  20
  6
  78
  13
  91
  1
  113/135
  65
  #f
  493/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  125
  99
  20
  6
  78
  13
  91
  1
  112/135
  66
  #t
  166/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  126
  100
  20
  6
  78
  13
  91
  1
  37/45
  67
  #t
  503/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  126
  100
  20
  6
  78
  13
  91
  1
  37/45
  67
  #f
  503/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  68
  41
  23
  4
  32
  13
  45
  1
  47/60
  41
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  73
  46
  23
  4
  35
  13
  48
  1
  17/22
  45
  #f
  231/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  73
  46
  23
  4
  35
  13
  48
  1
  17/22
  45
  #t
  231/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  102
  74
  23
  5
  62
  13
  75
  1
  409/468
  56
  #f
  5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  105
  77
  23
  5
  64
  13
  77
  1
  421/492
  59
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  109
  81
  23
  5
  67
  13
  80
  1
  415/492
  60
  #f
  404/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  110
  82
  23
  5
  67
  13
  80
  1
  137/164
  60
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  111
  83
  23
  5
  67
  13
  80
  1
  407/492
  60
  #f
  414/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  112
  84
  23
  5
  67
  13
  80
  1
  403/492
  60
  #f
  209/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  118
  90
  23
  5
  72
  13
  85
  1
  419/504
  66
  #t
  224/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  118
  90
  23
  5
  72
  13
  85
  1
  419/504
  66
  #t
  224/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  120
  91
  23
  6
  72
  13
  85
  1
  52/63
  66
  #f
  454/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  121
  92
  23
  6
  72
  13
  85
  1
  103/126
  67
  #t
  459/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  127
  98
  23
  6
  78
  13
  91
  1
  113/135
  69
  #f
  493/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  128
  99
  23
  6
  78
  13
  91
  1
  112/135
  70
  #t
  166/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  129
  100
  23
  6
  78
  13
  91
  1
  37/45
  70
  #f
  251/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  130
  101
  23
  6
  78
  13
  91
  1
  22/27
  70
  #f
  508/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  130
  101
  23
  6
  78
  13
  91
  1
  22/27
  70
  #t
  508/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  131
  102
  23
  6
  78
  13
  91
  1
  109/135
  71
  #t
  171/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  132
  103
  23
  6
  78
  13
  91
  1
  4/5
  71
  #f
  519/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  132
  103
  23
  6
  78
  13
  91
  1
  4/5
  71
  #f
  519/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  133
  104
  23
  6
  78
  13
  91
  1
  107/135
  72
  #t
  131/26
  ((0 0 0) (0 0 0) (0 0 0)))
