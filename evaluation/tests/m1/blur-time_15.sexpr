'(clean-cache
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  103
  75
  23
  5
  67
  13
  80
  1
  14/15
  59
  #f
  91/75
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  96
  71
  20
  5
  64
  13
  77
  1
  103/111
  56
  #f
  86/71
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  63
  36
  23
  4
  29
  13
  42
  1
  5/6
  36
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  49
  25
  20
  4
  24
  13
  37
  1
  15/16
  25
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  96
  70
  21
  5
  58
  13
  71
  1
  197/222
  55
  #f
  17/14
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  94
  68
  21
  5
  57
  13
  70
  1
  199/222
  55
  #f
  81/68
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  90
  64
  21
  5
  55
  13
  68
  1
  203/222
  53
  #f
  75/64
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  28
  16
  10
  2
  12
  6
  18
  1
  17/21
  12
  #f
  5/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  20/21
  10
  #f
  16/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  28
  12
  12
  4
  4
  4
  8
  1
  1/3
  12
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  34
  22
  10
  2
  18
  6
  24
  1
  9/11
  17
  #f
  27/22
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  7/8
  10
  #f
  16/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  65
  37
  23
  5
  30
  13
  43
  1
  31/36
  36
  #f
  38/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  102
  74
  23
  5
  66
  13
  79
  1
  109/117
  59
  #f
  89/74
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  20/21
  10
  #f
  16/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  28
  16
  10
  2
  14
  6
  20
  1
  23/27
  13
  #t
  19/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  94
  69
  20
  5
  67
  13
  80
  1
  59/60
  54
  #f
  28/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  95
  70
  20
  5
  67
  13
  80
  1
  39/40
  54
  #f
  43/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  97
  72
  20
  5
  68
  13
  81
  1
  77/80
  56
  #t
  11/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  98
  73
  20
  5
  68
  13
  81
  1
  229/240
  56
  #f
  90/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  104
  78
  20
  6
  72
  13
  85
  1
  239/252
  60
  #f
  16/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  107
  81
  20
  6
  74
  13
  87
  1
  81/86
  62
  #f
  100/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  108
  82
  20
  6
  74
  13
  87
  1
  241/258
  62
  #f
  51/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  109
  83
  20
  6
  74
  13
  87
  1
  239/258
  63
  #t
  103/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  109
  83
  20
  6
  74
  13
  87
  1
  239/258
  63
  #f
  103/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  110
  84
  20
  6
  74
  13
  87
  1
  79/86
  64
  #t
  26/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  111
  85
  20
  6
  74
  13
  87
  1
  235/258
  64
  #f
  106/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  112
  86
  20
  6
  74
  13
  87
  1
  233/258
  64
  #f
  54/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  113
  87
  20
  6
  74
  13
  87
  1
  77/86
  65
  #t
  109/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  113
  87
  20
  6
  74
  13
  87
  1
  77/86
  65
  #t
  109/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  114
  88
  20
  6
  74
  13
  87
  1
  229/258
  66
  #t
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  115
  89
  20
  6
  74
  13
  87
  1
  227/258
  67
  #t
  111/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  116
  90
  20
  6
  74
  13
  87
  1
  75/86
  67
  #f
  113/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  118
  92
  20
  6
  75
  13
  88
  1
  41/48
  69
  #t
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  122
  96
  20
  6
  78
  13
  91
  1
  23/27
  73
  #t
  119/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  123
  97
  20
  6
  78
  13
  91
  1
  38/45
  74
  #t
  120/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  124
  98
  20
  6
  78
  13
  91
  1
  113/135
  74
  #f
  61/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  20/21
  10
  #f
  16/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  84
  59
  20
  5
  57
  13
  70
  1
  217/222
  48
  #f
  70/59
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  85
  60
  20
  5
  57
  13
  70
  1
  215/222
  49
  #t
  71/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  96
  71
  20
  5
  67
  13
  80
  1
  239/252
  60
  #t
  82/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  106
  81
  20
  5
  77
  13
  90
  1
  43/45
  65
  #f
  97/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  107
  82
  20
  5
  77
  13
  90
  1
  128/135
  66
  #t
  49/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  108
  83
  20
  5
  77
  13
  90
  1
  127/135
  67
  #t
  99/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  109
  84
  20
  5
  77
  13
  90
  1
  14/15
  67
  #f
  101/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  110
  85
  20
  5
  77
  13
  90
  1
  25/27
  68
  #t
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  110
  85
  20
  5
  77
  13
  90
  1
  25/27
  68
  #t
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  111
  86
  20
  5
  77
  13
  90
  1
  124/135
  69
  #t
  103/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  112
  87
  20
  5
  77
  13
  90
  1
  493/540
  69
  #f
  35/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  113
  88
  20
  5
  77
  13
  90
  1
  163/180
  70
  #t
  53/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  114
  89
  20
  5
  77
  13
  90
  1
  97/108
  71
  #t
  107/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  114
  89
  20
  5
  77
  13
  90
  1
  97/108
  71
  #f
  107/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  115
  90
  20
  5
  77
  13
  90
  1
  481/540
  71
  #f
  109/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  116
  91
  20
  5
  77
  13
  90
  1
  53/60
  71
  #f
  111/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  117
  92
  20
  5
  77
  13
  90
  1
  473/540
  71
  #f
  113/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  119
  93
  20
  6
  77
  13
  90
  1
  47/54
  71
  #f
  115/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  121
  95
  20
  6
  78
  13
  91
  1
  116/135
  73
  #t
  117/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  122
  96
  20
  6
  78
  13
  91
  1
  23/27
  74
  #t
  59/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  123
  97
  20
  6
  78
  13
  91
  1
  38/45
  74
  #f
  120/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  124
  98
  20
  6
  78
  13
  91
  1
  113/135
  74
  #f
  61/49
  ((0 0 0) (0 0 0) (0 0 0)))
