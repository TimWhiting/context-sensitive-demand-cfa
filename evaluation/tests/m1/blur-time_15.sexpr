'(clean-cache
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  103
  75
  23
  5
  69
  13
  82
  1
  19/20
  52
  #f
  376/75
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  97
  72
  20
  5
  65
  13
  78
  1
  69/74
  47
  #f
  359/72
  ((9/2 9/2 0) (4 9/2 0) (4 4 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  63
  36
  23
  4
  29
  13
  42
  1
  5/6
  36
  #t
  5
  ((7/2 7/2 0) (3 3 0) (7/2 7/2 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  49
  25
  20
  4
  24
  13
  37
  1
  15/16
  25
  #t
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  96
  70
  21
  5
  58
  13
  71
  1
  197/222
  48
  #f
  174/35
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 5 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  94
  68
  21
  5
  57
  13
  70
  1
  199/222
  48
  #f
  84/17
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  90
  64
  21
  5
  55
  13
  68
  1
  203/222
  46
  #f
  157/32
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  28
  16
  10
  2
  12
  6
  18
  1
  17/21
  6
  #f
  35/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  20/21
  5
  #f
  57/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  28
  12
  12
  4
  4
  4
  8
  1
  1/3
  12
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  34
  22
  10
  2
  18
  6
  24
  1
  9/11
  8
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  7/8
  5
  #f
  57/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  65
  37
  23
  5
  30
  13
  43
  1
  31/36
  36
  #f
  186/37
  ((4 4 0) (4 4 0) (7/2 7/2 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  102
  74
  23
  5
  68
  13
  81
  1
  37/39
  52
  #f
  5
  ((9/2 5 0) (5 5 0) (9/2 5 0)))
'(clean-cache
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  63
  36
  23
  4
  29
  13
  42
  1
  5/6
  36
  #t
  5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  76
  49
  23
  4
  39
  13
  52
  1
  55/69
  49
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  76
  49
  23
  4
  39
  13
  52
  1
  55/69
  49
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  77
  50
  23
  4
  39
  13
  52
  1
  18/23
  50
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  107
  79
  23
  5
  66
  13
  79
  1
  55/63
  64
  #f
  392/79
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  108
  80
  23
  5
  66
  13
  79
  1
  109/126
  65
  #t
  397/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  118
  90
  23
  5
  75
  13
  88
  1
  31/36
  68
  #f
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  119
  91
  23
  5
  75
  13
  88
  1
  215/252
  69
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  119
  91
  23
  5
  75
  13
  88
  1
  215/252
  69
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  120
  92
  23
  5
  75
  13
  88
  1
  71/84
  70
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  122
  93
  23
  6
  75
  13
  88
  1
  47/56
  70
  #f
  466/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  126
  97
  23
  6
  79
  13
  92
  1
  461/540
  71
  #f
  489/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  127
  98
  23
  6
  79
  13
  92
  1
  457/540
  71
  #f
  495/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  128
  99
  23
  6
  79
  13
  92
  1
  151/180
  71
  #f
  499/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  129
  100
  23
  6
  79
  13
  92
  1
  5/6
  71
  #f
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  129
  100
  23
  6
  79
  13
  92
  1
  5/6
  71
  #f
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  130
  101
  23
  6
  79
  13
  92
  1
  223/270
  71
  #f
  509/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  131
  102
  23
  6
  79
  13
  92
  1
  221/270
  72
  #t
  257/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  132
  103
  23
  6
  79
  13
  92
  1
  73/90
  72
  #f
  518/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  133
  104
  23
  6
  79
  13
  92
  1
  217/270
  72
  #f
  131/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  134
  105
  23
  6
  79
  13
  92
  1
  43/54
  72
  #f
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  134
  105
  23
  6
  79
  13
  92
  1
  43/54
  72
  #t
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  28
  12
  12
  4
  4
  4
  8
  1
  1/3
  12
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  31
  15
  12
  4
  5
  4
  9
  1
  2/7
  15
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  70
  43
  23
  4
  32
  13
  45
  1
  46/63
  35
  #f
  207/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  79
  52
  23
  4
  39
  13
  52
  1
  53/72
  44
  #t
  63/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  79
  52
  23
  4
  39
  13
  52
  1
  53/72
  44
  #t
  63/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  86
  59
  23
  4
  45
  13
  58
  1
  61/81
  46
  #f
  284/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  87
  60
  23
  4
  45
  13
  58
  1
  20/27
  46
  #f
  24/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  89
  62
  23
  4
  47
  13
  60
  1
  22/29
  48
  #t
  149/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  121
  93
  23
  5
  75
  13
  88
  1
  211/252
  69
  #f
  463/93
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  122
  94
  23
  5
  75
  13
  88
  1
  209/252
  69
  #f
  469/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  122
  94
  23
  5
  75
  13
  88
  1
  209/252
  69
  #t
  469/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  124
  95
  23
  6
  75
  13
  88
  1
  415/504
  69
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  127
  98
  23
  6
  78
  13
  91
  1
  147/176
  70
  #f
  246/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  128
  99
  23
  6
  78
  13
  91
  1
  437/528
  70
  #f
  496/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  129
  100
  23
  6
  78
  13
  91
  1
  217/264
  70
  #f
  251/50
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  130
  101
  23
  6
  78
  13
  91
  1
  215/264
  71
  #t
  507/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  131
  102
  23
  6
  78
  13
  91
  1
  71/88
  71
  #f
  171/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  131
  102
  23
  6
  78
  13
  91
  1
  71/88
  71
  #t
  171/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  131
  102
  23
  6
  78
  13
  91
  1
  71/88
  71
  #t
  171/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  132
  103
  23
  6
  78
  13
  91
  1
  211/264
  72
  #t
  518/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  132
  103
  23
  6
  78
  13
  91
  1
  211/264
  72
  #t
  518/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  133
  104
  23
  6
  79
  13
  92
  1
  217/270
  72
  #f
  131/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  134
  105
  23
  6
  79
  13
  92
  1
  43/54
  72
  #f
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
