'(expression:
  (letrec ((ack
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))))
    (app ack 3 12)))
(list 'query: '(top) (menv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       (#f
        (match
         (app = n 0)
         (#f (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app + n (-> 1 <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app + (-> n <-) 1) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> + <-) n 1) (menv '((□? (m n)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - m (-> 1 <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app - (-> m <-) 1) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> - <-) m 1) (menv '((□? (m n)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       (#f
        (match
         (app = n 0)
         (#f (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - n (-> 1 <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app - (-> n <-) 1) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> - <-) n 1) (menv '((□? (m n)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       (#f
        (match
         (app = n 0)
         (#f (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - m (-> 1 <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app - (-> m <-) 1) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> - <-) m 1) (menv '((□? (m n)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (menv '((□? (m n)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       (#f
        (match
         (app = n 0)
         (#f (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (menv '((□? (m n)))))
(list 'clos/con: (list (list '(app = n 0) (menv '((□? (m n)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app = n (-> 0 <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list 'query: '(app = (-> n <-) 0) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> = <-) n 0) (menv '((□? (m n)))))
(list 'clos/con: (list (list '= (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (menv '((□? (m n)))))
(list 'clos/con: (list (list '(app = m 0) (menv '((□? (m n)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app = m (-> 0 <-)) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list 'query: '(app = (-> m <-) 0) (menv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> = <-) m 0) (menv '((□? (m n)))))
(list 'clos/con: (list (list '= (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec (ack) (-> (app ack 3 12) <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack 3 (-> 12 <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> 3 <-) 12) (menv '()))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) 3 12) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       (#f
        (match
         (app = n 0)
         (#f (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
