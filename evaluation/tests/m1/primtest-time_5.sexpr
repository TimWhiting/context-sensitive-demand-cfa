'(clean-cache
  primtest
  1
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(clean-cache
  primtest
  1
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  15
  11
  3
  1
  8
  2
  10
  1
  13/18
  3
  #f
  47/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  3
  #f
  59/14
  ((3/2 3/2 0) (1 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  47
  39
  6
  2
  28
  3
  31
  1
  35/48
  11
  #f
  167/39
  ((9/2 5 0) (9/2 5 0) (9/2 9/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  1
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  34
  26
  6
  2
  18
  3
  21
  1
  23/33
  6
  #f
  55/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  3
  #f
  83/20
  ((3 3 0) (3 7/2 0) (3 3 0)))
'(clean-cache
  primtest
  1
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  3
  #f
  79/19
  ((3 7/2 0) (5/2 5/2 0) (3 7/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  25
  17
  6
  2
  14
  3
  17
  1
  7/8
  2
  #f
  70/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  3
  #f
  79/19
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  3
  #f
  83/20
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  37
  29
  6
  2
  20
  3
  23
  1
  25/36
  6
  #f
  122/29
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  3
  #f
  83/20
  ((3 3 0) (3 3 0) (3 7/2 0)))
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  34
  26
  6
  2
  20
  3
  23
  1
  7/9
  5
  #f
  111/26
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  25
  17
  6
  2
  14
  3
  17
  1
  22/27
  2
  #f
  70/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  #f)
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (3 3 0) (3 7/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((3 7/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 5/2 0) (3 7/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((7/2 7/2 0) (4 4 0) (3 3 0)))
'(clean-cache
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 5/2 0) (3 4 0)))
'(clean-cache
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (5/2 7/2 0)))
'(clean-cache
  primtest
  1
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  #f)
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  65
  54
  8
  3
  37
  4
  41
  1
  31/46
  16
  #f
  116/27
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  88
  72
  12
  4
  53
  5
  58
  1
  263/360
  18
  #f
  17/4
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 3 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (3 3 0) (3 7/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  3
  #f
  83/20
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  34
  23
  8
  3
  16
  4
  20
  1
  2/3
  3
  #f
  95/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  15
  11
  3
  1
  8
  2
  10
  1
  13/18
  3
  #f
  47/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  33
  26
  5
  2
  18
  3
  21
  1
  29/42
  6
  #f
  56/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  56
  45
  8
  3
  32
  4
  36
  1
  49/69
  9
  #f
  191/45
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  3
  #f
  83/20
  ((3 3 0) (3 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  46
  35
  8
  3
  22
  4
  26
  1
  31/51
  7
  #f
  149/35
  ((3/2 3/2 0) (1 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  51
  40
  8
  3
  26
  4
  30
  1
  13/20
  7
  #f
  169/40
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 7/2 0) (3 3 0) (5/2 3 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  60
  44
  12
  4
  30
  5
  35
  1
  51/76
  7
  #f
  185/44
  ((4 9/2 0) (4 9/2 0) (4 4 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  61
  45
  12
  4
  30
  5
  35
  1
  51/80
  7
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  28
  20
  5
  3
  12
  3
  15
  1
  17/33
  4
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  32
  24
  5
  3
  15
  3
  18
  1
  26/45
  5
  #f
  101/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (1 3/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  48
  40
  6
  2
  32
  3
  35
  1
  4/5
  10
  #f
  17/4
  ((3 3 0) (3 4 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  3
  #f
  83/20
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  29
  21
  6
  2
  14
  3
  17
  1
  19/30
  3
  #f
  29/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  41
  30
  8
  3
  19
  4
  23
  1
  17/28
  5
  #f
  25/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  64
  53
  8
  3
  39
  4
  43
  1
  113/156
  9
  #f
  223/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  65
  54
  8
  3
  39
  4
  43
  1
  113/162
  9
  #f
  227/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((3 3 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  49
  38
  8
  3
  25
  4
  29
  1
  65/102
  8
  #f
  80/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  90
  74
  12
  4
  57
  5
  62
  1
  83/112
  18
  #f
  158/37
  ((4 9/2 0) (4 4 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  100
  84
  12
  4
  65
  5
  70
  1
  3/4
  18
  #f
  89/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  105
  89
  12
  4
  69
  5
  74
  1
  101/136
  20
  #f
  378/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  109
  93
  12
  4
  72
  5
  77
  1
  113/152
  21
  #f
  395/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  25
  17
  6
  2
  14
  3
  17
  1
  7/8
  2
  #f
  70/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 3 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  39
  31
  5
  3
  18
  3
  21
  1
  13/24
  9
  #f
  135/31
  ((3 3 0) (3 3 0) (7/2 18 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  62
  51
  8
  3
  34
  4
  38
  1
  2/3
  14
  #f
  220/51
  ((5/2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  33
  22
  8
  3
  16
  4
  20
  1
  11/15
  3
  #f
  91/22
  ((1 1 0) (1 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  37
  26
  8
  3
  19
  4
  23
  1
  31/42
  4
  #f
  54/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  41
  30
  8
  3
  22
  4
  26
  1
  20/27
  5
  #f
  25/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  42
  31
  8
  3
  22
  4
  26
  1
  77/108
  5
  #f
  129/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  49
  38
  8
  3
  28
  4
  32
  1
  113/150
  7
  #f
  161/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  56
  45
  8
  3
  34
  4
  38
  1
  73/93
  9
  #f
  193/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  83
  72
  8
  3
  60
  4
  64
  1
  112/135
  19
  #f
  311/72
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  31
  24
  5
  2
  15
  3
  18
  1
  43/72
  5
  #f
  101/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  35
  28
  5
  2
  18
  3
  21
  1
  61/96
  6
  #f
  59/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 5/2 0) (2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  55
  39
  12
  4
  27
  5
  32
  1
  45/68
  5
  #f
  161/39
  ((4 9/2 0) (9/2 9/2 0) (4 9/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  59
  43
  12
  4
  30
  5
  35
  1
  19/28
  6
  #f
  178/43
  ((0 0 0) (0 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  94
  78
  12
  4
  62
  5
  67
  1
  305/396
  14
  #f
  163/39
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  94
  78
  12
  4
  62
  5
  67
  1
  305/396
  14
  #f
  163/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  94
  78
  12
  4
  62
  5
  67
  1
  305/396
  14
  #f
  163/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  94
  78
  12
  4
  62
  5
  67
  1
  305/396
  14
  #f
  163/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  95
  79
  12
  4
  62
  5
  67
  1
  305/408
  14
  #f
  330/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  96
  80
  12
  4
  62
  5
  67
  1
  61/84
  14
  #f
  167/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  97
  81
  12
  4
  62
  5
  67
  1
  305/432
  14
  #f
  338/81
  ((0 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  98
  82
  12
  4
  62
  5
  67
  1
  305/444
  14
  #f
  171/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  102
  86
  12
  4
  65
  5
  70
  1
  67/96
  15
  #f
  361/86
  ((0 1/2 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  103
  87
  12
  4
  65
  5
  70
  1
  331/480
  15
  #f
  365/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  122
  106
  12
  4
  83
  5
  88
  1
  145/196
  23
  #f
  449/106
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  123
  107
  12
  4
  83
  5
  88
  1
  29/40
  23
  #f
  453/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  142
  126
  12
  4
  99
  5
  104
  1
  505/672
  25
  #f
  59/14
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  3
  #f
  59/14
  ((3/2 3/2 0) (1 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  65
  57
  6
  2
  40
  3
  43
  1
  16/23
  17
  #f
  245/57
  ((4 9/2 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  1
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  34
  26
  5
  3
  15
  3
  18
  1
  43/84
  6
  #f
  55/13
  ((2 2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  38
  30
  6
  2
  24
  3
  27
  1
  37/45
  5
  #f
  25/6
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  53
  45
  6
  2
  38
  3
  41
  1
  58/69
  11
  #f
  191/45
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 7/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  74
  63
  8
  3
  42
  4
  46
  1
  53/81
  18
  #f
  272/63
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  38
  30
  6
  2
  20
  3
  23
  1
  25/39
  10
  #f
  13/3
  ((7/2 4 0) (7/2 7/2 0) (7/2 4 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  55
  47
  6
  2
  34
  3
  37
  1
  46/63
  12
  #f
  200/47
  ((3/2 3/2 0) (3/2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  56
  48
  6
  2
  34
  3
  37
  1
  23/33
  12
  #f
  17/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((5/2 14 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  56
  45
  8
  3
  35
  4
  39
  1
  107/138
  9
  #f
  191/45
  ((1 1 0) (1 1 0) (1 3/2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (7/2 4 0) (3 3 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  37
  30
  5
  2
  18
  3
  21
  1
  26/45
  7
  #f
  43/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  0
  #f
  4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  27
  20
  5
  2
  15
  3
  18
  1
  49/66
  4
  #f
  21/5
  ((1 3/2 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  34
  27
  5
  2
  21
  3
  24
  1
  85/108
  6
  #f
  116/27
  ((0 0 0) (0 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  54
  43
  8
  3
  35
  4
  39
  1
  131/162
  8
  #f
  182/43
  ((2 2 0) (3 7/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  55
  44
  8
  3
  35
  4
  39
  1
  64/81
  8
  #f
  93/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 5/2 0) (3 3 0) (5/2 3 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((5/2 3 0) (5/2 3 0) (5/2 3 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  34
  27
  5
  2
  18
  3
  21
  1
  61/90
  6
  #f
  38/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  39
  32
  5
  2
  22
  3
  25
  1
  79/114
  6
  #f
  67/16
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  25
  18
  5
  2
  12
  3
  15
  1
  2/3
  3
  #f
  25/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  3
  #f
  71/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  46
  35
  8
  3
  26
  4
  30
  1
  37/48
  6
  #f
  146/35
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  3
  #f
  83/20
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  40
  29
  8
  3
  19
  4
  23
  1
  53/84
  5
  #f
  121/29
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  47
  36
  8
  3
  25
  4
  29
  1
  89/126
  7
  #f
  17/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  5
  #f
  97/23
  ((5/2 3 0) (5/2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  40
  29
  8
  3
  19
  4
  23
  1
  53/84
  5
  #f
  121/29
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  87
  71
  12
  4
  57
  5
  62
  1
  87/112
  17
  #f
  303/71
  ((4 9/2 0) (4 4 0) (9/2 5 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (5/2 5/2 0) (3 7/2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  1
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  7
  #f
  125/29
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  primtest
  1
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
