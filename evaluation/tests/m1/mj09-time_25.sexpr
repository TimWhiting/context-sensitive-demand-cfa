'(clean-cache
  mj09
  1
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  92
  61
  20
  11
  44
  17
  61
  1
  11/15
  26
  #f
  282/61
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  74
  43
  20
  11
  32
  17
  49
  1
  43/57
  20
  #f
  200/43
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  mj09
  1
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  89
  58
  20
  11
  42
  17
  59
  1
  53/72
  26
  #f
  135/29
  ((5 5 0) (9/2 5 0) (9/2 9/2 0)))
'(clean-cache
  mj09
  1
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  60
  40
  14
  6
  22
  13
  35
  1
  161/240
  23
  #f
  19/4
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  16
  8
  5
  3
  0
  0
  0
  1
  0
  5
  #f
  37/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (1/2 9 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  16
  8
  5
  3
  0
  0
  0
  1
  0
  5
  #f
  37/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  86
  55
  20
  11
  40
  17
  57
  1
  17/23
  26
  #f
  258/55
  ((5 11/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  59
  37
  14
  8
  28
  13
  41
  1
  13/17
  20
  #f
  176/37
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 4 0)))
'(clean-cache
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  11
  5
  3
  3
  0
  0
  0
  1
  0
  2
  #f
  22/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  83
  52
  20
  11
  38
  17
  55
  1
  49/66
  26
  #f
  123/26
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  62
  40
  14
  8
  30
  13
  43
  1
  41/54
  20
  #f
  47/10
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  mj09
  1
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  11
  #f
  111/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  80
  55
  16
  9
  37
  15
  52
  1
  203/240
  28
  #f
  51/11
  ((9/2 9/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  80
  55
  16
  9
  37
  15
  52
  1
  203/240
  28
  #f
  51/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  81
  56
  16
  9
  37
  15
  52
  1
  1417/1680
  29
  #t
  261/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  82
  57
  16
  9
  38
  15
  53
  1
  1477/1740
  29
  #f
  265/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  84
  59
  16
  9
  40
  15
  55
  1
  1597/1860
  29
  #f
  273/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  100
  71
  18
  11
  51
  17
  68
  1
  80/93
  32
  #f
  324/71
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  100
  71
  18
  11
  51
  17
  68
  1
  80/93
  32
  #t
  324/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  100
  71
  18
  11
  51
  17
  68
  1
  80/93
  32
  #f
  324/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  100
  71
  18
  11
  51
  17
  68
  1
  80/93
  32
  #f
  324/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  100
  71
  18
  11
  51
  17
  68
  1
  80/93
  32
  #f
  324/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  105
  72
  19
  14
  51
  17
  68
  1
  79/93
  32
  #f
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  106
  73
  19
  14
  51
  17
  68
  1
  26/31
  32
  #f
  332/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  111
  74
  20
  17
  51
  17
  68
  1
  129/155
  32
  #f
  168/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  112
  75
  20
  17
  51
  17
  68
  1
  382/465
  32
  #f
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  115
  78
  20
  17
  54
  17
  71
  1
  829/990
  33
  #f
  353/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  115
  78
  20
  17
  54
  17
  71
  1
  829/990
  33
  #t
  353/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  115
  78
  20
  17
  54
  17
  71
  1
  829/990
  33
  #t
  353/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  116
  79
  20
  17
  54
  17
  71
  1
  91/110
  33
  #f
  357/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  117
  80
  20
  17
  54
  17
  71
  1
  809/990
  33
  #f
  361/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  118
  81
  20
  17
  54
  17
  71
  1
  799/990
  33
  #f
  365/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  92
  61
  20
  11
  44
  17
  61
  1
  11/15
  26
  #f
  282/61
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  96
  62
  20
  14
  44
  17
  61
  1
  109/150
  26
  #f
  143/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  103
  68
  20
  15
  50
  17
  67
  1
  71/90
  28
  #f
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  108
  72
  20
  16
  50
  17
  67
  1
  139/180
  31
  #f
  83/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  111
  75
  20
  16
  53
  17
  70
  1
  19/24
  32
  #f
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  111
  75
  20
  16
  53
  17
  70
  1
  19/24
  32
  #f
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #f
  349/76
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #f
  349/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #f
  349/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #f
  349/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #t
  349/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #t
  349/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #f
  349/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  116
  76
  21
  19
  53
  17
  70
  1
  377/480
  32
  #f
  349/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  117
  77
  21
  19
  53
  17
  70
  1
  749/960
  32
  #f
  355/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  118
  78
  21
  19
  54
  17
  71
  1
  779/990
  32
  #f
  359/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  119
  79
  21
  19
  54
  17
  71
  1
  43/55
  33
  #t
  365/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  122
  82
  21
  19
  54
  17
  71
  1
  382/495
  35
  #f
  379/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  122
  82
  21
  19
  54
  17
  71
  1
  382/495
  35
  #f
  379/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  122
  82
  21
  19
  54
  17
  71
  1
  382/495
  35
  #t
  379/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  127
  87
  21
  19
  54
  17
  71
  1
  749/990
  37
  #f
  401/87
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
