'(expression:
  (letrec ((cpstak
            (λ (x y z)
              (letrec ((tak
                        (λ (x y z k)
                          (match
                           (app not (app < y x))
                           (#t (app k z))
                           (#f
                            (app
                             tak
                             (app - x 1)
                             y
                             z
                             (λ (v1)
                               (app
                                tak
                                (app - y 1)
                                z
                                x
                                (λ (v2)
                                  (app
                                   tak
                                   (app - z 1)
                                   x
                                   y
                                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
                (app tak x y z (λ (a) a))))))
    (app cpstak 32 15 8)))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
(list
 'clos/con:
 (list
  (list #t (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))
  (list #f (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))
  (list
   #f
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(letrec (cpstak) (-> (app cpstak 32 15 8) <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            cpstak
            =
            (λ (x y z)
              (letrec ((tak
                        (λ (x y z k)
                          (match
                           (app not (app < y x))
                           (#t (app k z))
                           (#f
                            (app
                             tak
                             (app - x 1)
                             y
                             z
                             (λ (v1)
                               (app
                                tak
                                (app - y 1)
                                z
                                x
                                (λ (v2)
                                  (app
                                   tak
                                   (app - z 1)
                                   x
                                   y
                                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
                (app tak x y z (λ (a) a))))
            <-))
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z)
      (letrec ((tak
                (λ (x y z k)
                  (match
                   (app not (app < y x))
                   (#t (app k z))
                   (#f
                    (app
                     tak
                     (app - x 1)
                     y
                     z
                     (λ (v1)
                       (app
                        tak
                        (app - y 1)
                        z
                        x
                        (λ (v2)
                          (app
                           tak
                           (app - z 1)
                           x
                           y
                           (λ (v3) (app tak v1 v2 v3 k))))))))))))
        (app tak x y z (λ (a) a))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> z <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak x y (-> z <-) (λ (a) a))
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 (-> v2 <-) v3 k)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x (-> y <-) (λ (v3) (app tak v1 v2 v3 k)))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak x (-> y <-) z (λ (a) a))
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app cpstak 32 15 (-> 8 <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
(list
 'clos/con:
 (list
  (list #f (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))
  (list #t (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) (-> x <-) y (λ (v3) (app tak v1 v2 v3 k)))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
(list
 'clos/con:
 (list
  (list #t (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))
  (list #f (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) v1 v2 v3 k)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v3) (-> (app tak v1 v2 v3 k) <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - y 1)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> (app - z 1) <-) x y (λ (v3) (app tak v1 v2 v3 k)))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> v1 <-) v2 v3 k)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app
               tak
               (app - z 1)
               x
               y
               (λ (v3) (app tak v1 v2 v3 k))))))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
(list
 'clos/con:
 (list
  (list #t (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))
  (list #f (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v2) (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak x y z (-> (λ (a) a) <-))
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
(list
 'clos/con:
 (list
  (list
   '(λ (a) a)
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (tak) (-> (app tak x y z (λ (a) a)) <-))
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> x <-) y z (λ (a) a))
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) z 1)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cpstak <-) 32 15 8) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z)
      (letrec ((tak
                (λ (x y z k)
                  (match
                   (app not (app < y x))
                   (#t (app k z))
                   (#f
                    (app
                     tak
                     (app - x 1)
                     y
                     z
                     (λ (v1)
                       (app
                        tak
                        (app - y 1)
                        z
                        x
                        (λ (v2)
                          (app
                           tak
                           (app - z 1)
                           x
                           y
                           (λ (v3) (app tak v1 v2 v3 k))))))))))))
        (app tak x y z (λ (a) a))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) x y z (λ (a) a))
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))
  (list '(λ (a) a) (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app
               tak
               (app - z 1)
               x
               y
               (λ (v3) (app tak v1 v2 v3 k))))))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))
  (list
   #t
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app cpstak (-> 32 <-) 15 8) (flatenv '()))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 v3 (-> k <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))
  (list '(λ (a) a) (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app
               tak
               (app - z 1)
               x
               y
               (λ (v3) (app tak v1 v2 v3 k))))))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cpstak 32 (-> 15 <-) 8) (flatenv '()))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - y 1) <-)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   (-> x <-)
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - z (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x y (-> (λ (v3) (app tak v1 v2 v3 k)) <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app
               tak
               (app - z 1)
               x
               y
               (λ (v3) (app tak v1 v2 v3 k))))))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))
  (list
   #t
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))
  (list
   #t
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))
  (list
   #f
   (flatenv
    '((λ (v1)
        (->
         (app
          tak
          (app - y 1)
          z
          x
          (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   x
   (-> (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))) <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app
               tak
               (app - z 1)
               x
               y
               (λ (v3) (app tak v1 v2 v3 k))))))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v1)
    (->
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a) a)
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))
  (list
   #f
   (flatenv
    '((λ (v2)
        (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv
    '((match
       (app not (app < y x))
       (#t (app k z))
       (->
        #f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
        <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            tak
            =
            (λ (x y z k)
              (match
               (app not (app < y x))
               (#t (app k z))
               (#f
                (app
                 tak
                 (app - x 1)
                 y
                 z
                 (λ (v1)
                   (app
                    tak
                    (app - y 1)
                    z
                    x
                    (λ (v2)
                      (app
                       tak
                       (app - z 1)
                       x
                       y
                       (λ (v3) (app tak v1 v2 v3 k))))))))))
            <-))
    bod)
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (flatenv
    '((match
       (app not (app < y x))
       (-> #t (app k z) <-)
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app
               tak
               (app - z 1)
               x
               y
               (λ (v3) (app tak v1 v2 v3 k))))))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   (-> z <-)
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z)
    (->
     (letrec ((tak
               (λ (x y z k)
                 (match
                  (app not (app < y x))
                  (#t (app k z))
                  (#f
                   (app
                    tak
                    (app - x 1)
                    y
                    z
                    (λ (v1)
                      (app
                       tak
                       (app - y 1)
                       z
                       x
                       (λ (v2)
                         (app
                          tak
                          (app - z 1)
                          x
                          y
                          (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (app tak x y z (λ (a) a)))
     <-))
 (flatenv
  '(((let-bod
      letrec
      ((cpstak
        (λ (x y z)
          (letrec ((tak
                    (λ (x y z k)
                      (match
                       (app not (app < y x))
                       (#t (app k z))
                       (#f
                        (app
                         tak
                         (app - x 1)
                         y
                         z
                         (λ (v1)
                           (app
                            tak
                            (app - y 1)
                            z
                            x
                            (λ (v2)
                              (app
                               tak
                               (app - z 1)
                               x
                               y
                               (λ (v3) (app tak v1 v2 v3 k))))))))))))
            (app tak x y z (λ (a) a))))))
      (top))
     app
     cpstak
     32
     15
     8))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 (-> v3 <-) k)
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (flatenv
  '(((bod
      (v1)
      (ran
       tak
       ((app - x 1) y z)
       ()
       (match-clause
        #f
        (app not (app < y x))
        ((#t (app k z)))
        ()
        (bod
         (x y z k)
         (bin
          letrec
          tak
          (app tak x y z (λ (a) a))
          ()
          ()
          (bod
           (x y z)
           (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
     app
     tak
     (app - y 1)
     z
     x
     (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (a) (-> a <-))
 (flatenv
  '(((match-clause
      #t
      (app not (app < y x))
      ()
      ((#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     k
     z))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (flatenv
  '(((let-bod
      letrec
      ((tak
        (λ (x y z k)
          (match
           (app not (app < y x))
           (#t (app k z))
           (#f
            (app
             tak
             (app - x 1)
             y
             z
             (λ (v1)
               (app
                tak
                (app - y 1)
                z
                x
                (λ (v2)
                  (app
                   tak
                   (app - z 1)
                   x
                   y
                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
      (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
     app
     tak
     x
     y
     z
     (λ (a) a)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((bod
      (v2)
      (ran
       tak
       ((app - y 1) z x)
       ()
       (bod
        (v1)
        (ran
         tak
         ((app - x 1) y z)
         ()
         (match-clause
          #f
          (app not (app < y x))
          ((#t (app k z)))
          ()
          (bod
           (x y z k)
           (bin
            letrec
            tak
            (app tak x y z (λ (a) a))
            ()
            ()
            (bod
             (x y z)
             (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
     app
     tak
     (app - z 1)
     x
     y
     (λ (v3) (app tak v1 v2 v3 k))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (flatenv '((letrec (cpstak) (-> (app cpstak 32 15 8) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (flatenv
  '(((match-clause
      #f
      (app not (app < y x))
      ((#t (app k z)))
      ()
      (bod
       (x y z k)
       (bin
        letrec
        tak
        (app tak x y z (λ (a) a))
        ()
        ()
        (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
     app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (flatenv
  '(((bod
      (v3)
      (ran
       tak
       ((app - z 1) x y)
       ()
       (bod
        (v2)
        (ran
         tak
         ((app - y 1) z x)
         ()
         (bod
          (v1)
          (ran
           tak
           ((app - x 1) y z)
           ()
           (match-clause
            #f
            (app not (app < y x))
            ((#t (app k z)))
            ()
            (bod
             (x y z k)
             (bin
              letrec
              tak
              (app tak x y z (λ (a) a))
              ()
              ()
              (bod
               (x y z)
               (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
     app
     tak
     v1
     v2
     v3
     k))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (flatenv '((λ (v3) (-> (app tak v1 v2 v3 k) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
