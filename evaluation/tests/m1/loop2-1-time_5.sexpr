'(clean-cache
  loop2-1
  1
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  5
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  5
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  6
  #f
  100/23
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(clean-cache
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  5
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  6
  #f
  100/23
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  6
  #f
  100/23
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  6
  #f
  100/23
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((3/2 3/2 0) (2 2 0) (3/2 2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  27
  20
  3
  4
  7
  2
  9
  1
  4/9
  5
  #f
  87/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  29
  21
  3
  5
  7
  2
  9
  1
  2/5
  5
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  24
  19
  3
  2
  0
  0
  0
  1
  0
  8
  #t
  84/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  24
  19
  3
  2
  0
  0
  0
  1
  0
  8
  #f
  84/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((2 2 0) (2 2 0) (3/2 2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  22
  17
  3
  2
  0
  0
  0
  1
  0
  7
  #t
  75/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  5
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  32
  27
  3
  2
  0
  0
  0
  1
  0
  10
  #f
  40/9
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
