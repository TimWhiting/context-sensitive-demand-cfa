'(clean-cache
  cpstak
  1
  36
  letrec*
  "\"'(eval ((top) letrec* (cpstak) ...) (env ()))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  letrec*
  "\"'(eval (λ (x y z) (-> (letrec* (tak) ...) <-)) (env ((□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  match
  "\"'(eval\n  (λ (x y z k) (-> (match (app not (app < y x)) ...) <-))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (match (app not (app < y x)) (#f) (_ (-> (app k z) <-)))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app k (-> z <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app (-> k <-) z) (env ((□? (x y z k)) (□? (x y z)))))\""
  52
  26
  6
  20
  0
  0
  0
  1
  0
  23
  #f
  55/13
  ((17/2 17/2 0) (8 8 0) (8 8 0)))
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (match\n   (app not (app < y x))\n   ((#f) (-> (app tak (app - x 1) y z (λ (v1) ...)) <-))\n   _)\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v1) (-> (app tak (app - y 1) z x (λ (v2) ...)) <-))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v2) (-> (app tak (app - z 1) x y (λ (v3) ...)) <-))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v3) (-> (app tak v1 v2 v3 k) <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 v2 v3 (-> k <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  51
  25
  6
  20
  0
  0
  0
  1
  0
  23
  #f
  91/25
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 v2 (-> v3 <-) k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 (-> v2 <-) v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (-> v1 <-) v2 v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - z 1) x (-> y <-) (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - z 1) (-> x <-) y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - z 1) <-) x y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app - (-> z <-) 1)\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - y 1) z (-> x <-) (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - y 1) (-> z <-) x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - y 1) <-) z x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app - (-> y <-) 1) (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - x 1) y (-> z <-) (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - x 1) (-> y <-) z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - x 1) <-) y z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app - (-> x <-) 1) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (match (-> (app not (app < y x)) <-) (#f) _)\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval (app not (-> (app < y x) <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app < y (-> x <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app < (-> y <-) x) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval\n  (letrec* (tak) (-> (app tak x y z (λ (a) ...)) <-))\n  (env ((□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)) (□? (x y z)))))\""
  #f)
'(clean-cache
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak x y (-> z <-) (λ (a) ...)) (env ((□? (x y z)))))\""
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak x (-> y <-) z (λ (a) ...)) (env ((□? (x y z)))))\""
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak (-> x <-) y z (λ (a) ...)) (env ((□? (x y z)))))\""
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  cpstak
  1
  36
  app
  "\"'(eval (letrec* (cpstak) (-> (app cpstak 32 15 8) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - x 1) (-> y <-) z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (letrec* (tak) (-> (app tak x y z (λ (a) ...)) <-))\n  (env ((□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - y 1) z (-> x <-) (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - z 1) (-> x <-) y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app < (-> y <-) x) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - y 1) <-) z x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  match
  "\"'(eval\n  (λ (x y z k) (-> (match (app not (app < y x)) ...) <-))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - y 1) (-> z <-) x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 v2 (-> v3 <-) k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 (-> v2 <-) v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app k (-> z <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app - (-> x <-) 1) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - x 1) <-) y z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (match\n   (app not (app < y x))\n   ((#f) (-> (app tak (app - x 1) y z (λ (v1) ...)) <-))\n   _)\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app (-> k <-) z) (env ((□? (x y z k)) (□? (x y z)))))\""
  52
  26
  6
  20
  0
  0
  0
  1
  0
  23
  #f
  55/13
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app < y (-> x <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  letrec*
  "\"'(eval (λ (x y z) (-> (letrec* (tak) ...) <-)) (env ((□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak x (-> y <-) z (λ (a) ...)) (env ((□? (x y z)))))\""
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval (app not (-> (app < y x) <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v3) (-> (app tak v1 v2 v3 k) <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - z 1) x (-> y <-) (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app - (-> y <-) 1) (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval (letrec* (cpstak) (-> (app cpstak 32 15 8) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak x y (-> z <-) (λ (a) ...)) (env ((□? (x y z)))))\""
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  cpstak
  1
  36
  letrec*
  "\"'(eval ((top) letrec* (cpstak) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 v2 v3 (-> k <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  51
  25
  6
  20
  0
  0
  0
  1
  0
  23
  #f
  91/25
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app tak (-> x <-) y z (λ (a) ...)) (env ((□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app - (-> z <-) 1)\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - x 1) y (-> z <-) (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (-> v1 <-) v2 v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v2) (-> (app tak (app - z 1) x y (λ (v3) ...)) <-))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (match (app not (app < y x)) (#f) (_ (-> (app k z) <-)))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (match (-> (app not (app < y x)) <-) (#f) _)\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v1) (-> (app tak (app - y 1) z x (λ (v2) ...)) <-))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  0
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - z 1) <-) x y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - z 1) (-> x <-) y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app - (-> y <-) 1) (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval (letrec* (cpstak) (-> (app cpstak 32 15 8) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (match (app not (app < y x)) (#f) (_ (-> (app k z) <-)))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 v2 v3 (-> k <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  51
  25
  6
  20
  0
  0
  0
  1
  0
  23
  #f
  91/25
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app k (-> z <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 v2 (-> v3 <-) k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app - (-> x <-) 1) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - y 1) <-) z x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  letrec*
  "\"'(eval ((top) letrec* (cpstak) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - z 1) x (-> y <-) (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak (-> x <-) y z (λ (a) ...)) (env ((□? (x y z)))))\""
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - z 1) <-) x y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - y 1) z (-> x <-) (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - x 1) y (-> z <-) (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak x (-> y <-) z (λ (a) ...)) (env ((□? (x y z)))))\""
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app (-> k <-) z) (env ((□? (x y z k)) (□? (x y z)))))\""
  58
  28
  9
  21
  7
  4
  11
  1
  17/48
  25
  #f
  4
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  cpstak
  1
  15
  36
  ref-or-constructor
  "\"'(eval (app tak x y (-> z <-) (λ (a) ...)) (env ((□? (x y z)))))\""
  60
  30
  9
  21
  8
  4
  12
  1
  23/60
  27
  #t
  19/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak v1 (-> v2 <-) v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (-> v1 <-) v2 v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - y 1) (-> z <-) x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval (app not (-> (app < y x) <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (app tak (-> (app - x 1) <-) y z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app < y (-> x <-)) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v2) (-> (app tak (app - z 1) x y (λ (v3) ...)) <-))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v1) (-> (app tak (app - y 1) z x (λ (v2) ...)) <-))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app tak (app - x 1) (-> y <-) z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  letrec*
  "\"'(eval (λ (x y z) (-> (letrec* (tak) ...) <-)) (env ((□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (match (-> (app not (app < y x)) <-) (#f) _)\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval\n  (app - (-> z <-) 1)\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (λ (v3) (-> (app tak v1 v2 v3 k) <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (letrec* (tak) (-> (app tak x y z (λ (a) ...)) <-))\n  (env ((□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  app
  "\"'(eval\n  (match\n   (app not (app < y x))\n   ((#f) (-> (app tak (app - x 1) y z (λ (v1) ...)) <-))\n   _)\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  match
  "\"'(eval\n  (λ (x y z k) (-> (match (app not (app < y x)) ...) <-))\n  (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
'(shuffled-cache
  1
  cpstak
  1
  36
  ref-or-constructor
  "\"'(eval (app < (-> y <-) x) (env ((□? (x y z k)) (□? (x y z)))))\""
  #f)
