'(clean-cache
  cpstak
  1
  15
  59
  letrec*
  "'(eval ((top) letrec* (cpstak) ...) (env ()))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  lambda
  "'(eval (letrec* (... () (cpstak (-> (λ (x y z) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  letrec*
  "'(eval (λ (x y z) (-> (letrec* (tak) ...) <-)) (env ((□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  lambda
  "'(eval\n  (letrec* (... () (tak (-> (λ (x y z k) ...) <-)) () ...) ...)\n  (env ((□? (x y z)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  match
  "'(eval\n  (λ (x y z k) (-> (match (app not (app < ...)) ...) <-))\n  (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (match (app not (app < y x)) (#f) (_ (-> (app k z) <-)))\n  (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app k (-> z <-)) (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app (-> k <-) z) (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  52
  26
  6
  20
  0
  0
  0
  1
  0
  23
  #f
  55/13
  ((8 8 0)))
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (match\n   (app not (app < y x))\n   ((#f) (-> (app tak (app - x 1) y z (λ (v1) ...)) <-))\n   _)\n  (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  lambda
  "'(eval\n  (app tak (app - x 1) y z (-> (λ (v1) ...) <-))\n  (env ((□? (x y z k)) (□? (x y z)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (λ (v1) (-> (app tak (app - y 1) z x (λ (v2) ...)) <-))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  lambda
  "'(eval\n  (app tak (app - y 1) z x (-> (λ (v2) ...) <-))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (λ (v2) (-> (app tak (app - z 1) x y (λ (v3) ...)) <-))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  lambda
  "'(eval\n  (app tak (app - z 1) x y (-> (λ (v3) ...) <-))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  (lambda number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (λ (v3) (-> (app tak v1 v2 v3 k) <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak v1 v2 v3 (-> k <-))\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  51
  25
  6
  20
  0
  0
  0
  1
  0
  23
  #f
  91/25
  ((7 7 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak v1 v2 (-> v3 <-) k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak v1 (-> v2 <-) v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak (-> v1 <-) v2 v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app (-> tak <-) v1 v2 v3 k)\n  (env ((□? (v3)) (□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  (lambda number char string quoted constructor)
  7
  2
  0
  5
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak (app - z 1) x (-> y <-) (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak (app - z 1) (-> x <-) y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (app tak (-> (app - z 1) <-) x y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  number
  "'(eval\n  (app - z (-> 1 <-))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  (number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app - (-> z <-) 1)\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app (-> - <-) z 1)\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #t
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app (-> tak <-) (app - z 1) x y (λ (v3) ...))\n  (env ((□? (v2)) (□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  (lambda number char string quoted constructor)
  6
  2
  0
  4
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak (app - y 1) z (-> x <-) (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak (app - y 1) (-> z <-) x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (app tak (-> (app - y 1) <-) z x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  number
  "'(eval (app - y (-> 1 <-)) (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  (number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app - (-> y <-) 1) (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app (-> - <-) y 1) (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app (-> tak <-) (app - y 1) z x (λ (v2) ...))\n  (env ((□? (v1)) (□? (x y z k)) (□? (x y z)))))"
  (lambda number char string quoted constructor)
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak (app - x 1) y (-> z <-) (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app tak (app - x 1) (-> y <-) z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (app tak (-> (app - x 1) <-) y z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  number
  "'(eval (app - x (-> 1 <-)) (env ((□? (x y z k)) (□? (x y z)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app - (-> x <-) 1) (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app (-> - <-) x 1) (env ((□? (x y z k)) (□? (x y z)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval\n  (app (-> tak <-) (app - x 1) y z (λ (v1) ...))\n  (env ((□? (x y z k)) (□? (x y z)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (match (-> (app not (app < y x)) <-) (#f) _)\n  (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval (app not (-> (app < y x) <-)) (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app < y (-> x <-)) (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app < (-> y <-) x) (env ((□? (x y z k)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app (-> < <-) y x) (env ((□? (x y z k)) (□? (x y z)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app (-> not <-) (app < y x)) (env ((□? (x y z k)) (□? (x y z)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval\n  (letrec* (tak) (-> (app tak x y z (λ (a) ...)) <-))\n  (env ((□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  lambda
  "'(eval (app tak x y z (-> (λ (a) ...) <-)) (env ((□? (x y z)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (λ (a) (-> a <-)) (env ((□? (a)) (□? (x y z)))))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app tak x y (-> z <-) (λ (a) ...)) (env ((□? (x y z)))))"
  #f
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app tak x (-> y <-) z (λ (a) ...)) (env ((□? (x y z)))))"
  #f
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app tak (-> x <-) y z (λ (a) ...)) (env ((□? (x y z)))))"
  #f
  5
  2
  2
  1
  1
  2
  3
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app (-> tak <-) x y z (λ (a) ...)) (env ((□? (x y z)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  app
  "'(eval (letrec* (cpstak) (-> (app cpstak 32 15 8) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  cpstak
  1
  15
  59
  number
  "'(eval (app cpstak 32 15 (-> 8 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  number
  "'(eval (app cpstak 32 (-> 15 <-) 8) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  number
  "'(eval (app cpstak (-> 32 <-) 15 8) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  cpstak
  1
  15
  59
  ref-or-constructor
  "'(eval (app (-> cpstak <-) 32 15 8) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
