'(expression:
  (app
   (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'query:
 '(app (-> f3 <-) (app #t))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (flatenv '((let ((-> _ = (app f2 (app #t)) <-)) bod))))
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (flatenv '((let (_) (-> (app f2 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> (app #t) <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list 'clos/con: (list (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) (app #t))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (flatenv '((let (_) (-> (app f1 (app #f)) <-)))))
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (flatenv '((let ((-> _ = (app f1 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (x2)
        (->
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #f) <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (x2)
        (->
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> (app #t) <-))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          (λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (-> (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))) <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f2 (app #t))))
      (bod
       (f2)
       (rat
        ((λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top))))))
     app
     f2
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (flatenv '((let (_) (-> (app f2 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     <-))
 (flatenv
  '(((bin
      let
      _
      (app f1 (app #f))
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            (λ (x2)
              (app
               (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
               (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
        (top))))
     app
     f1
     (app #t)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> (app #f) <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list 'clos/con: (list (list '(#f ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f)))) <-)
   (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
 (flatenv
  '(((bin
      let
      _
      (app f2 (app #f))
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top))))))
     app
     f2
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (flatenv '((let ((-> _ = (app f2 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) (app #f))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (flatenv '((let (_) (-> (app f1 (app #f)) <-)))))
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (flatenv '((let ((-> _ = (app f1 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (->
    (λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    <-))
 (flatenv
  '(((bin
      let
      _
      (app f1 (app #f))
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            (λ (x2)
              (app
               (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
               (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
        (top))))
     app
     f1
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (flatenv '((let ((-> _ = (app f1 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f)))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (flatenv
  '(((bod
      (x3)
      (ran
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       ()
       ()
       (bod
        (x2)
        (ran
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         ()
         ()
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top)))))))
     app
     (λ (z) (app z x1 x2 x3))
     (λ (y1 y2 y3) y1)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (x2)
        (->
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (x2)
        (->
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f3 (app #t))))
      (bod
       (f3)
       (rat
        ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top))))))))
     app
     f3
     (app #f)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f)))) <-)
   (λ (x2)
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
 (flatenv
  '(((bin
      let
      _
      (app f1 (app #f))
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            (λ (x2)
              (app
               (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
               (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
        (top))))
     app
     f1
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (flatenv '((let ((-> _ = (app f1 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list 'clos/con: (list (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> (app #f) <-))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          (λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) (app #t))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f1 (app #t))))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            (λ (x2)
              (app
               (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
               (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
        (top))))
     app
     f1
     (app #f)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f1) (-> (let ((_ (app f1 (app #t)))) (app f1 (app #f))) <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (x2)
        (->
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list 'clos/con: (list (list #f (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (-> (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))) <-))
 (flatenv
  '(((bin
      let
      _
      (app f2 (app #f))
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top))))))
     app
     f2
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (flatenv '((let ((-> _ = (app f2 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          (λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (flatenv
  '(((bod
      (x3)
      (ran
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       ()
       ()
       (bod
        (x2)
        (ran
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         ()
         ()
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top)))))))
     app
     (λ (z) (app z x1 x2 x3))
     (λ (y1 y2 y3) y1)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          (λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          (λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (flatenv
  '(((bin
      let
      _
      (app f3 (app #f))
      ()
      ()
      (bod
       (f3)
       (rat
        ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top))))))))
     app
     f3
     (app #t)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #f))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (flatenv '((let ((-> _ = (app f2 (app #t)) <-)) bod))))
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (flatenv '((let (_) (-> (app f2 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (flatenv
  '(((bin
      let
      _
      (app f3 (app #f))
      ()
      ()
      (bod
       (f3)
       (rat
        ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top))))))))
     app
     f3
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (flatenv '((let ((-> _ = (app f3 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (flatenv
  '(((bod
      (x3)
      (ran
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       ()
       ()
       (bod
        (x2)
        (ran
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         ()
         ()
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top)))))))
     app
     (λ (z) (app z x1 x2 x3))
     (λ (y1 y2 y3) y1)))))
(list
 'clos/con:
 (list
  (list '(λ (y1 y2 y3) y1) (flatenv '((let (_) (-> (app f3 (app #f)) <-)))))
  (list
   '(λ (y1 y2 y3) y1)
   (flatenv '((let ((-> _ = (app f3 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (flatenv
  '(((let-bod
      let
      ((_ (app f3 (app #t))))
      (bod
       (f3)
       (rat
        ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top))))))))
     app
     f3
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (flatenv '((let (_) (-> (app f3 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f1 (app #t)) <-)) bod)
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (->
    (λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f1 (app #t))))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            (λ (x2)
              (app
               (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
               (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
        (top))))
     app
     f1
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (flatenv '((let (_) (-> (app f1 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) (app #f))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f3 (app #t)) <-)) bod)
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (flatenv
  '(((bod
      (z)
      (rat
       ((λ (y1 y2 y3) y1))
       (bod
        (x3)
        (ran
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         ()
         ()
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top)))))))))
     app
     z
     x1
     x2
     x3))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2)
    (->
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f2 (app #t))))
      (bod
       (f2)
       (rat
        ((λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top))))))
     app
     f2
     (app #f)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 (app #t)))) (app f2 (app #f))) <-))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (flatenv
  '(((bod
      (x3)
      (ran
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       ()
       ()
       (bod
        (x2)
        (ran
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         ()
         ()
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top)))))))
     app
     (λ (z) (app z x1 x2 x3))
     (λ (y1 y2 y3) y1)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (flatenv
  '(((bin
      let
      _
      (app f3 (app #f))
      ()
      ()
      (bod
       (f3)
       (rat
        ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top))))))))
     app
     f3
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (flatenv '((let ((-> _ = (app f3 (app #t)) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f1 (app #f)) <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        (λ (x2)
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f3 (app #f)) <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (flatenv
  '(((bod
      (x3)
      (ran
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       ()
       ()
       (bod
        (x2)
        (ran
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         ()
         ()
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top)))))))
     app
     (λ (z) (app z x1 x2 x3))
     (λ (y1 y2 y3) y1)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f3) (-> (let ((_ (app f3 (app #t)))) (app f3 (app #f))) <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f)))) <-)
   (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
 (flatenv
  '(((let-bod
      let
      ((_ (app f2 (app #t))))
      (bod
       (f2)
       (rat
        ((λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top))))))
     app
     f2
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (flatenv '((let (_) (-> (app f2 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          (λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 (app #t)) <-)) bod)
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f3 (app #t))))
      (bod
       (f3)
       (rat
        ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top))))))))
     app
     f3
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (y1 y2 y3) y1) (flatenv '((let (_) (-> (app f3 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #t) <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       ()
       ()
       (bod
        (x1)
        (ran
         (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
         ()
         ()
         (top)))))
     app
     (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
     (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (x2)
        (->
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f)))) <-)
   (λ (x2)
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
 (flatenv
  '(((let-bod
      let
      ((_ (app f1 (app #t))))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            (λ (x2)
              (app
               (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
               (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
        (top))))
     app
     f1
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (flatenv '((let (_) (-> (app f1 (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2)
    (->
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     <-))
 (flatenv
  '(((bin
      let
      _
      (app f2 (app #f))
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top))))))
     app
     f2
     (app #t)))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 (app #f)) <-))
 (flatenv
  '(((bod
      (x1)
      (ran
       (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
       ()
       ()
       (top)))
     app
     (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
     (λ (x2)
       (app
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'clos/con:
 (list (list '(#f ()) (flatenv '((top)))) (list '(#t ()) (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
