'(sat-1 1 5000 9 6 41/9 ((0 0 0) (0 0 0) (0 0 0)))
'(sat-1 1 5000 211 42 1137/211 ((13 13 0) (14 14 0) (13 13 0)))
'(clean-cache
  sat-1
  1
  200
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  353
  243
  50
  60
  95
  20
  115
  1
  49487/63800
  1361/243
  ((175/2 175/2 3) (87 87 5/2) (87 87 3)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  351
  242
  50
  59
  92
  20
  112
  1
  34324/46255
  677/121
  ((87 87 5/2) (177/2 89 3) (87 87 5/2)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  335
  228
  50
  57
  83
  20
  103
  1
  6801/8932
  637/114
  ((89 89 3) (93 93 7/2) (86 86 3)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  313
  210
  50
  53
  73
  20
  93
  1
  18419/23490
  194/35
  ((167/2 167/2 3) (83 83 3) (167/2 167/2 3)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  285
  188
  50
  47
  67
  20
  87
  1
  2671/3276
  256/47
  ((147/2 147/2 2) (147/2 147/2 2) (74 74 5/2)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  209
  125
  45
  39
  61
  19
  80
  1
  983/1188
  669/125
  ((49 49 1) (48 48 1) (48 48 1)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  36/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  7
  3
  6
  5
  2
  7
  1
  5/7
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  348
  240
  50
  58
  91
  20
  111
  1
  827923/1090980
  679/120
  ((108 108 9/2) (215/2 215/2 5) (213/2 213/2 9/2)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  340
  232
  50
  58
  86
  20
  106
  1
  839407/1090980
  1313/232
  ((177/2 177/2 5/2) (89 89 3) (177/2 177/2 5/2)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  28/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  340
  232
  50
  58
  86
  20
  106
  1
  839407/1090980
  1313/232
  ((91 91 3) (187/2 187/2 3) (177/2 177/2 5/2)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  28/5
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  206
  128
  43
  35
  58
  17
  75
  1
  397/540
  689/128
  ((45 45 1) (45 45 1/2) (45 45 1)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  56
  34
  11
  11
  16
  6
  22
  1
  21/34
  181/34
  ((15/2 15/2 0) (15/2 15/2 0) (7 7 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  25
  12
  6
  7
  7
  4
  11
  1
  7/10
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  64
  40
  11
  13
  20
  6
  26
  1
  9/14
  107/20
  ((13/2 13/2 0) (13/2 13/2 0) (7 7 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  31/6
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  109
  64
  22
  23
  32
  15
  47
  1
  77/108
  43/8
  ((17 17 0) (33/2 33/2 0) (33/2 33/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  33
  18
  6
  9
  11
  4
  15
  1
  5/7
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  7
  4
  11
  1
  7/10
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  11
  4
  15
  1
  5/7
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  29
  12
  6
  11
  7
  4
  11
  1
  7/10
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  352
  242
  50
  60
  94
  20
  114
  1
  145271/188210
  1355/242
  ((177/2 89 3) (87 87 3) (87 87 3)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  8
  3
  6
  5
  2
  7
  1
  5/8
  41/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  61
  30
  12
  19
  16
  7
  23
  1
  21/34
  157/30
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  61
  30
  12
  19
  16
  7
  23
  1
  21/34
  157/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  62
  31
  12
  19
  16
  7
  23
  1
  7/12
  162/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  63
  32
  12
  19
  16
  7
  23
  1
  7/12
  167/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  64
  33
  12
  19
  16
  7
  23
  1
  21/38
  172/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  106
  56
  23
  27
  26
  15
  41
  1
  347/660
  295/56
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  109
  59
  23
  27
  28
  15
  43
  1
  49/90
  312/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  140
  78
  29
  33
  32
  17
  49
  1
  98/195
  206/39
  ((8 8 0) (8 8 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  140
  78
  29
  33
  32
  17
  49
  1
  98/195
  206/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  145
  81
  31
  33
  34
  19
  53
  1
  226/435
  427/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  161
  90
  36
  35
  34
  19
  53
  1
  15/29
  473/90
  ((6 6 0) (6 13/2 0) (6 6 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  257
  155
  54
  48
  61
  19
  80
  1
  58/81
  826/155
  ((45 45 1) (45 45 1) (46 46 1)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  412
  280
  59
  73
  73
  20
  93
  1
  341/486
  113/20
  ((117/2 117/2 3/2) (117/2 117/2 3/2) (58 58 3/2)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  413
  281
  59
  73
  73
  20
  93
  1
  673/972
  1588/281
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  414
  282
  59
  73
  73
  20
  93
  1
  166/243
  797/141
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  415
  283
  59
  73
  73
  20
  93
  1
  655/972
  1600/283
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  415
  283
  59
  73
  73
  20
  93
  1
  655/972
  1600/283
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  457
  318
  59
  80
  95
  20
  115
  1
  82769/118800
  904/159
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  458
  319
  59
  80
  95
  20
  115
  1
  82373/118800
  1814/319
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  459
  320
  59
  80
  95
  20
  115
  1
  81383/118800
  91/16
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  460
  321
  59
  80
  95
  20
  115
  1
  80393/118800
  1826/321
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  461
  322
  59
  80
  95
  20
  115
  1
  79997/118800
  1831/322
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  461
  322
  59
  80
  95
  20
  115
  1
  79997/118800
  1831/322
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  462
  323
  59
  80
  95
  20
  115
  1
  79667/118800
  108/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  463
  324
  59
  80
  95
  20
  115
  1
  78677/118800
  307/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  591
  421
  66
  104
  95
  20
  115
  1
  58609/89100
  2424/421
  ((97 195/2 5/2) (195/2 98 5/2) (195/2 195/2 5/2)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  592
  422
  66
  104
  95
  20
  115
  1
  115733/178200
  2429/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  593
  423
  66
  104
  95
  20
  115
  1
  115139/178200
  2434/423
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  594
  424
  66
  104
  95
  20
  115
  1
  56827/89100
  2439/424
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  595
  425
  66
  104
  95
  20
  115
  1
  112169/178200
  2444/425
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  595
  425
  66
  104
  95
  20
  115
  1
  112169/178200
  2444/425
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  596
  426
  66
  104
  95
  20
  115
  1
  27671/44550
  1225/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  597
  427
  66
  104
  95
  20
  115
  1
  109199/178200
  2456/427
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  598
  428
  66
  104
  95
  20
  115
  1
  53857/89100
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  599
  429
  66
  104
  95
  20
  115
  1
  106229/178200
  2467/429
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  600
  430
  66
  104
  95
  20
  115
  1
  13093/22275
  2473/430
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  601
  431
  66
  104
  95
  20
  115
  1
  51877/89100
  2479/431
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  602
  432
  66
  104
  95
  20
  115
  1
  102269/178200
  2485/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  603
  433
  66
  104
  95
  20
  115
  1
  4067/7128
  2491/433
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  604
  434
  66
  104
  95
  20
  115
  1
  101081/178200
  2497/434
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  605
  435
  66
  104
  95
  20
  115
  1
  24899/44550
  834/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  606
  436
  66
  104
  95
  20
  115
  1
  98111/178200
  627/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  606
  436
  66
  104
  95
  20
  115
  1
  98111/178200
  627/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  606
  436
  66
  104
  95
  20
  115
  1
  98111/178200
  627/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  607
  437
  66
  104
  95
  20
  115
  1
  97517/178200
  2558/437
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  608
  438
  66
  104
  95
  20
  115
  1
  96923/178200
  1304/219
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  609
  439
  66
  104
  95
  20
  115
  1
  96923/178200
  2614/439
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  8
  3
  6
  5
  2
  7
  1
  5/8
  41/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  17
  8
  3
  6
  5
  2
  7
  1
  5/8
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  19
  10
  3
  6
  7
  2
  9
  1
  7/10
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  21
  12
  3
  6
  9
  2
  11
  1
  3/4
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  36
  20
  8
  8
  13
  4
  17
  1
  9/14
  51/10
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  98
  45
  24
  29
  24
  13
  37
  1
  307/480
  233/45
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  99
  46
  24
  29
  24
  13
  37
  1
  307/510
  119/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  104
  51
  24
  29
  28
  13
  41
  1
  427/660
  265/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  107
  52
  26
  29
  28
  15
  43
  1
  427/690
  135/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  183
  95
  47
  41
  40
  17
  57
  1
  3923/7020
  99/19
  ((22 22 0) (22 22 0) (45/2 45/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  186
  98
  47
  41
  42
  17
  59
  1
  541/945
  256/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  196
  108
  47
  41
  42
  17
  59
  1
  2164/3915
  95/18
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  197
  109
  47
  41
  42
  17
  59
  1
  4193/7830
  575/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  209
  119
  49
  41
  42
  19
  61
  1
  4193/8100
  633/119
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  210
  120
  49
  41
  42
  19
  61
  1
  3259/6300
  319/60
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  210
  120
  49
  41
  42
  19
  61
  1
  3259/6300
  319/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  244
  145
  49
  50
  61
  19
  80
  1
  6619/9240
  777/145
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  245
  146
  49
  50
  61
  19
  80
  1
  6577/9240
  391/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  476
  332
  54
  90
  92
  20
  112
  1
  91247/133980
  475/83
  ((80 80 2) (153/2 153/2 3/2) (77 77 3/2)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  481
  337
  54
  90
  92
  20
  112
  1
  39007/57420
  1926/337
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  482
  338
  54
  90
  92
  20
  112
  1
  38809/57420
  966/169
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  483
  339
  54
  90
  92
  20
  112
  1
  38611/57420
  657/113
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  484
  340
  54
  90
  92
  20
  112
  1
  9529/14355
  494/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  562
  401
  59
  102
  92
  20
  112
  1
  9529/14355
  2352/401
  ((59 119/2 1) (119/2 119/2 1) (57 57 1)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  563
  402
  59
  102
  92
  20
  112
  1
  37621/57420
  2357/402
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  564
  403
  59
  102
  92
  20
  112
  1
  18563/28710
  2362/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  565
  404
  59
  102
  92
  20
  112
  1
  9232/14355
  592/101
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  566
  405
  59
  102
  92
  20
  112
  1
  36433/57420
  2374/405
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  570
  408
  59
  103
  95
  20
  115
  1
  9727/14850
  299/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  571
  409
  59
  103
  95
  20
  115
  1
  3871/5940
  2441/409
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  572
  410
  59
  103
  95
  20
  115
  1
  4814/7425
  1223/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  572
  410
  59
  103
  95
  20
  115
  1
  4814/7425
  1223/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  573
  411
  59
  103
  95
  20
  115
  1
  19157/29700
  817/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  574
  412
  59
  103
  95
  20
  115
  1
  37819/59400
  2457/412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  575
  413
  59
  103
  95
  20
  115
  1
  37489/59400
  2463/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  576
  414
  59
  103
  95
  20
  115
  1
  18497/29700
  823/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  577
  415
  59
  103
  95
  20
  115
  1
  36499/59400
  495/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  578
  416
  59
  103
  95
  20
  115
  1
  9001/14850
  155/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  579
  417
  59
  103
  95
  20
  115
  1
  35509/59400
  2486/417
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  580
  418
  59
  103
  95
  20
  115
  1
  17507/29700
  1246/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  581
  419
  59
  103
  95
  20
  115
  1
  34519/59400
  2498/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  588
  426
  59
  103
  95
  20
  115
  1
  172487/297000
  1267/213
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  589
  427
  59
  103
  95
  20
  115
  1
  42503/74250
  2540/427
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  590
  428
  59
  103
  95
  20
  115
  1
  167537/297000
  2545/428
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  602
  433
  66
  103
  95
  20
  115
  1
  100487/178200
  2571/433
  ((37/2 37/2 0) (37/2 37/2 0) (37/2 37/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  603
  434
  66
  103
  95
  20
  115
  1
  49501/89100
  2577/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  604
  435
  66
  103
  95
  20
  115
  1
  12301/22275
  861/145
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  200
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  605
  436
  66
  103
  95
  20
  115
  1
  96923/178200
  647/109
  ((0 0 0) (0 0 0) (0 0 0)))
