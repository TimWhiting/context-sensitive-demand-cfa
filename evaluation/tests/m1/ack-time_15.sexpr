'(clean-cache
  ack
  1
  15
  40
  letrec*
  "'(eval ((top) letrec* (ack) ...) (env ()))"
  #f
  146
  139
  5
  2
  134
  2
  136
  1
  39/40
  83
  #f
  195/139
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  lambda
  "'(eval (letrec* (... () (ack (-> (λ (m n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  match
  "'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))"
  #f
  147
  140
  5
  2
  133
  2
  135
  1
  71/74
  85
  #f
  39/28
  ((3 3 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))"
  #f
  133
  126
  5
  2
  122
  2
  124
  1
  723/740
  76
  #f
  88/63
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app + n (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app + (-> n <-) 1) (env ((□? (m n)))))"
  #f
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  71
  #f
  169/120
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> + <-) n 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  match
  "'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))"
  #f
  141
  134
  5
  2
  127
  2
  129
  1
  425/444
  80
  #f
  94/67
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))"
  #f
  139
  132
  5
  2
  121
  2
  123
  1
  104/111
  77
  #f
  17/12
  ((3 3 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app ack (app - m 1) (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))"
  #f
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  24
  #f
  58/41
  ((1 1 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app - m (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env ((□? (m n)))))"
  #f
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  22
  #f
  27/19
  ((1 1 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) (app - m 1) 1) (env ((□? (m n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - ...))) <-))\n   _)\n  (env ((□? (m n)))))"
  #f
  134
  127
  5
  2
  120
  2
  122
  1
  711/740
  75
  #f
  179/127
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))"
  #f
  131
  124
  5
  2
  119
  2
  121
  1
  36/37
  72
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))"
  #f
  130
  123
  5
  2
  119
  2
  121
  1
  181/185
  73
  #f
  173/123
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (m n)))))"
  #f
  127
  120
  5
  2
  119
  2
  121
  1
  184/185
  71
  #f
  169/120
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))"
  #f
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  22
  #f
  27/19
  ((1 1 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) m (app - n 1)) (env ((□? (m n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))"
  #f
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  24
  #f
  58/41
  ((1 1 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app - m (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env ((□? (m n)))))"
  #f
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  22
  #f
  27/19
  ((1 1 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval\n  (app (-> ack <-) (app - m 1) (app ack m (app - n 1)))\n  (env ((□? (m n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))"
  #f
  133
  126
  5
  2
  122
  2
  124
  1
  723/740
  76
  #f
  88/63
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app = n (-> 0 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app = (-> n <-) 0) (env ((□? (m n)))))"
  #f
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  71
  #f
  169/120
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> = <-) n 0) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))"
  #f
  59
  53
  5
  1
  49
  2
  51
  1
  31/35
  33
  #f
  73/53
  ((1 1 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app = m (-> 0 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app = (-> m <-) 0) (env ((□? (m n)))))"
  #f
  44
  38
  5
  1
  37
  2
  39
  1
  10/11
  22
  #f
  27/19
  ((1 1 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> = <-) m 0) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  app
  "'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))"
  #f
  145
  138
  5
  2
  133
  2
  135
  1
  38/39
  83
  #f
  193/138
  ((2 2 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app ack 3 (-> 12 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  number
  "'(eval (app ack (-> 3 <-) 12) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  1
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) 3 12) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
