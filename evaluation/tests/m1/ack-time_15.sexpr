'(clean-cache
  ack
  1
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  146
  139
  5
  2
  134
  2
  136
  1
  39/40
  39
  #f
  605/139
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  147
  140
  5
  2
  133
  2
  135
  1
  71/74
  39
  #f
  611/140
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  133
  126
  5
  2
  122
  2
  124
  1
  723/740
  34
  #f
  274/63
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  32
  #f
  87/20
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  ack
  1
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  141
  134
  5
  2
  127
  2
  129
  1
  425/444
  38
  #f
  293/67
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  139
  132
  5
  2
  121
  2
  123
  1
  104/111
  36
  #f
  287/66
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  9
  #f
  173/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  8
  #f
  80/19
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  134
  127
  5
  2
  120
  2
  122
  1
  711/740
  35
  #f
  553/127
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  131
  124
  5
  2
  119
  2
  121
  1
  36/37
  33
  #f
  539/124
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  130
  123
  5
  2
  119
  2
  121
  1
  181/185
  33
  #f
  535/123
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  184/185
  32
  #f
  87/20
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  8
  #f
  80/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  9
  #f
  173/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  8
  #f
  80/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  133
  126
  5
  2
  122
  2
  124
  1
  723/740
  34
  #f
  275/63
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  127
  120
  5
  2
  119
  2
  121
  1
  147/148
  32
  #f
  87/20
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  59
  53
  5
  1
  49
  2
  51
  1
  31/35
  13
  #f
  227/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  10/11
  8
  #f
  80/19
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  ack
  1
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  145
  138
  5
  2
  133
  2
  135
  1
  38/39
  39
  #f
  601/138
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  59
  53
  5
  1
  49
  2
  51
  1
  31/35
  13
  #f
  227/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  60
  54
  5
  1
  49
  2
  51
  1
  61/70
  13
  #f
  77/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  135
  128
  5
  2
  122
  2
  124
  1
  357/370
  34
  #f
  279/64
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  136
  129
  5
  2
  122
  2
  124
  1
  71/74
  34
  #f
  562/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  137
  130
  5
  2
  122
  2
  124
  1
  353/370
  34
  #f
  283/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  139
  132
  5
  2
  123
  2
  125
  1
  701/740
  35
  #f
  575/132
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  140
  133
  5
  2
  123
  2
  125
  1
  697/740
  35
  #f
  579/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  146
  139
  5
  2
  128
  2
  130
  1
  347/370
  37
  #f
  605/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  149
  142
  5
  2
  130
  2
  132
  1
  1031/1110
  39
  #f
  619/142
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  150
  143
  5
  2
  130
  2
  132
  1
  205/222
  39
  #f
  623/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  151
  144
  5
  2
  130
  2
  132
  1
  1019/1110
  39
  #f
  209/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  154
  147
  5
  2
  132
  2
  134
  1
  2029/2220
  40
  #f
  640/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  154
  147
  5
  2
  132
  2
  134
  1
  2029/2220
  40
  #f
  640/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  155
  148
  5
  2
  132
  2
  134
  1
  2017/2220
  40
  #f
  323/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  156
  149
  5
  2
  132
  2
  134
  1
  401/444
  40
  #f
  650/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  157
  150
  5
  2
  132
  2
  134
  1
  199/222
  40
  #f
  109/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  160
  153
  5
  2
  135
  2
  137
  1
  2113/2340
  41
  #f
  667/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  161
  154
  5
  2
  135
  2
  137
  1
  2101/2340
  41
  #f
  61/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  165
  158
  5
  2
  138
  2
  140
  1
  2089/2340
  42
  #f
  344/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  166
  159
  5
  2
  139
  2
  141
  1
  2149/2400
  42
  #f
  692/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  10/11
  8
  #f
  80/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  128
  121
  5
  2
  119
  2
  121
  1
  731/740
  32
  #f
  526/121
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  129
  122
  5
  2
  119
  2
  121
  1
  363/370
  32
  #f
  265/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  133
  126
  5
  2
  122
  2
  124
  1
  721/740
  33
  #f
  547/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  134
  127
  5
  2
  122
  2
  124
  1
  717/740
  33
  #f
  551/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  141
  134
  5
  2
  128
  2
  130
  1
  713/740
  36
  #f
  291/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  145
  138
  5
  2
  131
  2
  133
  1
  709/740
  37
  #f
  601/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  146
  139
  5
  2
  131
  2
  133
  1
  141/148
  37
  #f
  605/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  147
  140
  5
  2
  131
  2
  133
  1
  701/740
  37
  #f
  87/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  150
  143
  5
  2
  133
  2
  135
  1
  349/370
  38
  #f
  622/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  154
  147
  5
  2
  137
  2
  139
  1
  759/800
  39
  #f
  213/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  155
  148
  5
  2
  137
  2
  139
  1
  151/160
  39
  #f
  643/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  156
  149
  5
  2
  137
  2
  139
  1
  751/800
  39
  #f
  647/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  157
  150
  5
  2
  137
  2
  139
  1
  747/800
  39
  #f
  217/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  158
  151
  5
  2
  137
  2
  139
  1
  743/800
  39
  #f
  655/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  161
  154
  5
  2
  139
  2
  141
  1
  2209/2400
  41
  #f
  669/154
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  161
  154
  5
  2
  139
  2
  141
  1
  2209/2400
  41
  #f
  669/154
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  162
  155
  5
  2
  139
  2
  141
  1
  2197/2400
  41
  #f
  673/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  163
  156
  5
  2
  139
  2
  141
  1
  437/480
  41
  #f
  679/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  164
  157
  5
  2
  139
  2
  141
  1
  2173/2400
  41
  #f
  683/157
  ((0 0 0) (0 0 0) (0 0 0)))
