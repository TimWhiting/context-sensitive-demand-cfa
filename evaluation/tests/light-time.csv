"app-num", 0, "(list 'eval '(top) (lenv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(λ (y) (-> y <-)) (lenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (lenv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (lenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app x (-> 1 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app (-> x <-) 1) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let (_) (-> (app x 2) <-)) (lenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app x (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app (-> x <-) 2) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(top) (lenv '()))", 28,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (lenv '(())))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (lenv '(())))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (lenv '(())))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app a (-> (app - y 1) <-)) (lenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app - y (-> 1 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app - (-> y <-) 1) (lenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> - <-) y 1) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> a <-) (app - y 1)) (lenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (lenv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app equal? y (-> 0 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app equal? (-> y <-) 0) (lenv '(())))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> equal? <-) y 0) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (lenv '()))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app a (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> a <-) 2) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(top) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* (a (-> b = a <-)) bod) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* (a b) (-> a <-)) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(top) (lenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app cons 1 (-> nil <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app cons (-> 1 <-) nil) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app (-> cons <-) 1 nil) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (lenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(top) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(λ (x) (-> (app x x) <-)) (lenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app x (-> x <-)) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (-> x <-) x) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(top) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(λ (y) (-> y <-)) (lenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(λ (x) (-> x <-)) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(top) (lenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(λ (y) (-> y <-)) (lenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(let (x) (-> (app x 1) <-)) (lenv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(app x (-> 1 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(app (-> x <-) 1) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(top) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(λ (y) (-> y <-)) (lenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(let (x) (-> x <-)) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(top) (lenv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(λ (z) (-> z <-)) (lenv '(())))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(λ (x y) (-> (app x y) <-)) (lenv '(())))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app x (-> y <-)) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (-> x <-) y) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(top) (lenv '()))", 55,0,1,1,0,1,0,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 0, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (lenv '(())))", 51,0,0,0,0,1,1,1,0,2,0,0,0,3,1,1,0,4,1,1,0
"ack", 0, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (lenv '(())))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app + n (-> 1 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app + (-> n <-) 1) (lenv '(())))", 24,0,0,0,0,1,1,1,1,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> + <-) n 1) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (lenv '(())))", 32,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (lenv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (lenv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - m (-> 1 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> m <-) 1) (lenv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) m 1) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (lenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (lenv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (lenv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack m (-> (app - n 1) <-)) (lenv '(())))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - n (-> 1 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> n <-) 1) (lenv '(())))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) n 1) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> m <-) (app - n 1)) (lenv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) m (app - n 1)) (lenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (lenv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - m (-> 1 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> m <-) 1) (lenv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) m 1) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (lenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (lenv '(())))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = n (-> 0 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = (-> n <-) 0) (lenv '(())))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> = <-) n 0) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (lenv '(())))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = m (-> 0 <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = (-> m <-) 0) (lenv '(())))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> = <-) m 0) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (lenv '()))", 54,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 0, "(list 'eval '(app ack 3 (-> 12 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> 3 <-) 12) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) 3 12) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(top) (lenv '()))", 28,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (lenv '(())))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (lenv '(() ())))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (lenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (y1 y2) (-> y1 <-)) (lenv '(() () ())))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (lenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (z) (-> (app z x1 x2) <-)) (lenv '(() () ())))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app z x1 (-> x2 <-)) (lenv '(() () ())))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app z (-> x1 <-) x2) (lenv '(() () ())))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> z <-) x1 x2) (lenv '(() () ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (lenv '(() ())))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let ((-> _ = (app f2 #t) <-)) bod) (lenv '(() ())))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f2 (-> #t <-)) (lenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f2 <-) #t) (lenv '(() ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (lenv '(() ())))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f2 (-> #f <-)) (lenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f2 <-) #f) (lenv '(() ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-)) (lenv '(())))", 26,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (lenv '(())))", 25,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f1 (-> #t <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f1 <-) #t) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (lenv '(())))", 25,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f1 (-> #f <-)) (lenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f1 <-) #f) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(top) (lenv '()))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(λ (y) (-> (app y y) <-)) (lenv '(())))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app y (-> y <-)) (lenv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> y <-) y) (lenv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(λ (x) (-> (app x x) <-)) (lenv '(())))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app x (-> x <-)) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> x <-) x) (lenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(top) (lenv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app x (-> 1 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app (-> x <-) 1) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let (_) (-> (app x 2) <-)) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app x (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app (-> x <-) 2) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(top) (lenv '()))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (lenv '((□? (y)))))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (lenv '((□? (y)))))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (lenv '((□? (y)))))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app a (-> (app - y 1) <-)) (lenv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app - y (-> 1 <-)) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app - (-> y <-) 1) (lenv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> - <-) y 1) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> a <-) (app - y 1)) (lenv '((□? (y)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (lenv '((□? (y)))))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app equal? y (-> 0 <-)) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app equal? (-> y <-) 0) (lenv '((□? (y)))))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> equal? <-) y 0) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (lenv '()))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app a (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> a <-) 2) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(top) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* (a (-> b = a <-)) bod) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* (a b) (-> a <-)) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(top) (lenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app cons 1 (-> nil <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app cons (-> 1 <-) nil) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app (-> cons <-) 1 nil) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (lenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(top) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(λ (x) (-> (app x x) <-)) (lenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app x (-> x <-)) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (-> x <-) x) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(top) (lenv '()))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(λ (x) (-> x <-)) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(top) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(let (x) (-> (app x 1) <-)) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(app x (-> 1 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(app (-> x <-) 1) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(top) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(let (x) (-> x <-)) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(top) (lenv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(λ (z) (-> z <-)) (lenv '((□? (z)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(λ (x y) (-> (app x y) <-)) (lenv '((□? (x y)))))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app x (-> y <-)) (lenv '((□? (x y)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (-> x <-) y) (lenv '((□? (x y)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(top) (lenv '()))", 41,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (lenv '((□? (m n)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (lenv '((□? (m n)))))", 30,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app + n (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app + (-> n <-) 1) (lenv '((□? (m n)))))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> + <-) n 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (lenv '((□? (m n)))))", 45,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (lenv '((□? (m n)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - m (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> m <-) 1) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> - <-) m 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (lenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (lenv '((□? (m n)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (lenv '((□? (m n)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack m (-> (app - n 1) <-)) (lenv '((□? (m n)))))", 26,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - n (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> n <-) 1) (lenv '((□? (m n)))))", 26,0,0,0,0,1,1,1,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> - <-) n 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> m <-) (app - n 1)) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> ack <-) m (app - n 1)) (lenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - m (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> m <-) 1) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> - <-) m 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (lenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (lenv '((□? (m n)))))", 30,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = n (-> 0 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = (-> n <-) 0) (lenv '((□? (m n)))))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> = <-) n 0) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (lenv '((□? (m n)))))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = m (-> 0 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = (-> m <-) 0) (lenv '((□? (m n)))))", 17,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> = <-) m 0) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (lenv '()))", 40,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack 3 (-> 12 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> 3 <-) 12) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> ack <-) 3 12) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(top) (lenv '()))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (lenv '((□? (x1)))))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (lenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (lenv '((□? (x2)) (□? (x1)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (lenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(λ (y1 y2) (-> y1 <-)) (lenv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (lenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (z) (-> (app z x1 x2) <-))
 (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app z x1 (-> x2 <-)) (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app z (-> x1 <-) x2) (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> z <-) x1 x2) (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (lenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (lenv '((□? (f2)) (□? (x1)))))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let ((-> _ = (app f2 #t) <-)) bod) (lenv '((□? (f2)) (□? (x1)))))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f2 (-> #t <-)) (lenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f2 <-) #t) (lenv '((□? (f2)) (□? (x1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (lenv '((□? (f2)) (□? (x1)))))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f2 (-> #f <-)) (lenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f2 <-) #f) (lenv '((□? (f2)) (□? (x1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (lenv '((□? (f1)))))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (lenv '((□? (f1)))))", 26,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f1 (-> #t <-)) (lenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f1 <-) #t) (lenv '((□? (f1)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (lenv '((□? (f1)))))", 26,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f1 (-> #f <-)) (lenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f1 <-) #f) (lenv '((□? (f1)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(top) (lenv '()))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(λ (y) (-> (app y y) <-)) (lenv '((□? (y)))))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app y (-> y <-)) (lenv '((□? (y)))))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> y <-) y) (lenv '((□? (y)))))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(λ (x) (-> (app x x) <-)) (lenv '((□? (x)))))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app x (-> x <-)) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> x <-) x) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(top) (lenv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app x (-> 1 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app (-> x <-) 1) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let (_) (-> (app x 2) <-)) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app x (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app (-> x <-) 2) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(top) (lenv '()))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (lenv '((□? (y)))))", 100,0,4,4,0,1,4,4,0,2,5,5,0,3,4,4,0,4,4,4,0
"basic-letrec", 2, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (lenv '((□? (y)))))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (lenv '((□? (y)))))", 86,0,4,4,0,1,5,5,0,2,5,5,0,3,5,5,0,4,4,5,0
"basic-letrec", 2, "(list 'eval '(app a (-> (app - y 1) <-)) (lenv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app - y (-> 1 <-)) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app - (-> y <-) 1) (lenv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> - <-) y 1) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> a <-) (app - y 1)) (lenv '((□? (y)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (lenv '((□? (y)))))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app equal? y (-> 0 <-)) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app equal? (-> y <-) 0) (lenv '((□? (y)))))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> equal? <-) y 0) (lenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (lenv '()))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app a (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> a <-) 2) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(top) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* (a (-> b = a <-)) bod) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* (a b) (-> a <-)) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(top) (lenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app cons 1 (-> nil <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app cons (-> 1 <-) nil) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app (-> cons <-) 1 nil) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (lenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(top) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(λ (x) (-> (app x x) <-)) (lenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app x (-> x <-)) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (-> x <-) x) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(top) (lenv '()))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(λ (x) (-> x <-)) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(top) (lenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(let (x) (-> (app x 1) <-)) (lenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(app x (-> 1 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(app (-> x <-) 1) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(top) (lenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(λ (y) (-> y <-)) (lenv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(let (x) (-> x <-)) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(top) (lenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(λ (z) (-> z <-)) (lenv '((□? (z)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(λ (x y) (-> (app x y) <-)) (lenv '((□? (x y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app x (-> y <-)) (lenv '((□? (x y)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (-> x <-) y) (lenv '((□? (x y)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(top) (lenv '()))", 39,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (lenv '((□? (m n)))))", 1073,0,186,190,7,1,149,153,5,2,154,159,5,3,162,166,5,4,163,166,5
"ack", 2, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (lenv '((□? (m n)))))", 919,0,115,118,4,1,124,128,5,2,127,130,4,3,129,133,3,4,125,128,6
"ack", 2, "(list 'eval '(app + n (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app + (-> n <-) 1) (lenv '((□? (m n)))))", 916,0,143,147,4,1,145,149,6,2,142,146,4,3,141,144,5,4,139,143,5
"ack", 2, "(list 'eval '(app (-> + <-) n 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (lenv '((□? (m n)))))", 1054,0,154,158,5,1,174,179,6,2,176,181,6,3,154,159,8,4,174,178,5
"ack", 2, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (lenv '((□? (m n)))))", 940,0,130,133,4,1,140,143,5,2,142,147,8,3,127,131,4,4,138,142,4
"ack", 2, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - m (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> m <-) 1) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> - <-) m 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (lenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (lenv '((□? (m n)))))", 940,0,134,137,7,1,137,141,4,2,121,125,5,3,119,123,3,4,136,139,4
"ack", 2, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (lenv '((□? (m n)))))", 904,0,122,125,4,1,142,147,5,2,126,131,3,3,130,133,8,4,142,146,4
"ack", 2, "(list 'eval '(app ack m (-> (app - n 1) <-)) (lenv '((□? (m n)))))", 915,0,142,146,6,1,136,140,4,2,140,144,5,3,140,144,7,4,134,137,5
"ack", 2, "(list 'eval '(app - n (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> n <-) 1) (lenv '((□? (m n)))))", 915,0,113,117,3,1,126,130,6,2,122,126,4,3,127,131,6,4,122,125,3
"ack", 2, "(list 'eval '(app (-> - <-) n 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> m <-) (app - n 1)) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> ack <-) m (app - n 1)) (lenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - m (-> 1 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> m <-) 1) (lenv '((□? (m n)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> - <-) m 1) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (lenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (lenv '((□? (m n)))))", 919,0,140,144,5,1,120,123,6,2,117,120,4,3,122,125,3,4,129,132,6
"ack", 2, "(list 'eval '(app = n (-> 0 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app = (-> n <-) 0) (lenv '((□? (m n)))))", 916,0,132,135,3,1,129,133,5,2,128,132,4,3,118,121,4,4,183,186,51
"ack", 2, "(list 'eval '(app (-> = <-) n 0) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (lenv '((□? (m n)))))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app = m (-> 0 <-)) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app = (-> m <-) 0) (lenv '((□? (m n)))))", 17,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> = <-) m 0) (lenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (lenv '()))", 38,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack 3 (-> 12 <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> 3 <-) 12) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> ack <-) 3 12) (lenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(top) (lenv '()))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (lenv '((□? (x1)))))", 25,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (lenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (lenv '((□? (x2)) (□? (x1)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (lenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(λ (y1 y2) (-> y1 <-)) (lenv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (lenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (z) (-> (app z x1 x2) <-))
 (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app z x1 (-> x2 <-)) (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app z (-> x1 <-) x2) (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> z <-) x1 x2) (lenv '((□? (z)) (□? (x2)) (□? (x1)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (lenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (lenv '((□? (f2)) (□? (x1)))))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let ((-> _ = (app f2 #t) <-)) bod) (lenv '((□? (f2)) (□? (x1)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f2 (-> #t <-)) (lenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f2 <-) #t) (lenv '((□? (f2)) (□? (x1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (lenv '((□? (f2)) (□? (x1)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f2 (-> #f <-)) (lenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f2 <-) #f) (lenv '((□? (f2)) (□? (x1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (lenv '((□? (f1)))))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (lenv '((□? (f1)))))", 26,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f1 (-> #t <-)) (lenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f1 <-) #t) (lenv '((□? (f1)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (lenv '((□? (f1)))))", 26,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f1 (-> #f <-)) (lenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f1 <-) #f) (lenv '((□? (f1)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(top) (lenv '()))", 33,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(λ (y) (-> (app y y) <-)) (lenv '((□? (y)))))", 33,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app y (-> y <-)) (lenv '((□? (y)))))", 28,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> y <-) y) (lenv '((□? (y)))))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (lenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(λ (x) (-> (app x x) <-)) (lenv '((□? (x)))))", 34,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app x (-> x <-)) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> x <-) x) (lenv '((□? (x)))))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
