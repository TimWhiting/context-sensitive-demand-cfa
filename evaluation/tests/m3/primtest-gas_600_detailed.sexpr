'(clean-cache
  primtest
  3
  600
  219
  letrec*
  "'(eval ((top) letrec* (square ... byte-size) ...) (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (letrec* (... iterations (byte-size (-> 15 <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval\n  (letrec*\n   (... generate-fermat-prime (iterations (-> 10 <-)) byte-size ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-fermat-prime?\n    (generate-fermat-prime (-> (λ (byte-size iterations) ...) <-))\n    iterations\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  let
  "'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))"
  #f
  21
  17
  3
  1
  14
  2
  16
  1
  23/30
  16
  #f
  18/17
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))"
  #f
  11
  7
  3
  1
  6
  2
  8
  1
  3/4
  7
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (let (n) (-> (match (match (app not ...) ...) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  26
  22
  3
  1
  18
  2
  20
  1
  27/35
  16
  #f
  14/11
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  11
  7
  3
  1
  6
  2
  8
  1
  14/15
  7
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  11
  7
  3
  1
  6
  2
  8
  1
  14/15
  7
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> generate-fermat-prime <-) byte-size iterations)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match (-> (match (app not (app is-trivial-composite? ...)) ...) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app not (app is-trivial-composite? n))\n   (#f)\n   (_ (-> (match (app is-fermat-prime? n iterations) ...) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (-> (app is-fermat-prime? n iterations) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  11
  7
  3
  1
  6
  2
  8
  1
  3/4
  7
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  26
  22
  3
  1
  18
  2
  20
  1
  27/35
  16
  #f
  14/11
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n iterations)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app not (app is-trivial-composite? n)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (-> (app not (app is-trivial-composite? n)) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  26
  22
  3
  1
  18
  2
  20
  1
  27/35
  16
  #f
  14/11
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-trivial-composite? <-) n)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> not <-) (app is-trivial-composite? n))\n  (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-trivial-composite?\n    (is-fermat-prime? (-> (λ (n iterations) ...) <-))\n    generate-fermat-prime\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (λ (n iterations) (-> (match (app <= iterations 0) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app <= iterations 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app <= iterations 0)\n   ((#f) (-> (match (let* (byte-size ... a) ...) ...) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  let*
  "'(eval\n  (match (-> (let* (byte-size ... a) ...) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log ...) (app log ...))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))"
  #f
  133
  121
  6
  6
  78
  3
  81
  1
  1207/1760
  74
  #f
  168/121
  (8 8 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app log (-> 2 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> log <-) 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))"
  #f
  75
  63
  6
  6
  43
  3
  46
  1
  159/220
  28
  #f
  14/9
  (6 6 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app log (-> n <-)) (env ((□? (n iterations)))))"
  #f
  51
  39
  6
  6
  29
  3
  32
  1
  407/540
  16
  #f
  62/39
  (4 4 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> log <-) n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> / <-) (app log n) (app log 2)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> ceiling <-) (app / (app log n) (app log 2)))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (let* (byte-size ... a) (-> (match (app = (app modulo-power ...) 1) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))"
  #f
  71
  59
  6
  6
  38
  3
  41
  1
  23/30
  43
  #f
  75/59
  (5 5 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app - iterations (-> 1 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))"
  #f
  69
  57
  6
  6
  38
  3
  41
  1
  2059/2640
  41
  #f
  73/57
  (5 5 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> - <-) iterations 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #f
  50
  38
  6
  6
  29
  3
  32
  1
  407/480
  16
  #f
  30/19
  (3 3 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (-> (app = (app modulo-power a (app - ...) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval\n  (app = (app modulo-power a (app - n 1) n) (-> 1 <-))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))"
  #f
  51
  39
  6
  6
  29
  3
  32
  1
  407/540
  16
  #f
  62/39
  (4 4 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))"
  #f
  87
  75
  6
  6
  50
  3
  53
  1
  32/45
  40
  #f
  22/15
  (6 6 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))"
  #f
  51
  39
  6
  6
  29
  3
  32
  1
  407/540
  16
  #f
  62/39
  (4 4 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) a (app - n 1) n) (env ((□? (n iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> = <-) (app modulo-power a (app - n 1) n) 1)\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (-> (app <= iterations 0) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  105
  93
  6
  6
  59
  3
  62
  1
  1327/1980
  69
  #f
  39/31
  (7 7 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app <= iterations (-> 0 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))"
  #f
  69
  57
  6
  6
  38
  3
  41
  1
  4153/5940
  41
  #f
  73/57
  (5 5 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> <= <-) iterations 0) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    modulo-power\n    (is-trivial-composite? (-> (λ (n) ...) <-))\n    is-fermat-prime?\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval (λ (n) (-> (match (app = (app modulo ...) 0) ...) <-)) (env ((□? (n)))))"
  #f
  330
  322
  5
  3
  295
  3
  298
  1
  463/495
  196
  #f
  32/23
  (7 7 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 2) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 2) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  300
  292
  5
  3
  265
  3
  268
  1
  413/445
  178
  #f
  203/146
  (7 7 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 3) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 3) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  270
  262
  5
  3
  235
  3
  238
  1
  363/395
  160
  #f
  182/131
  (10 10 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 5) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 5) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  240
  232
  5
  3
  205
  3
  208
  1
  313/345
  142
  #f
  161/116
  (10 10 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 7) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 7) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  210
  202
  5
  3
  175
  3
  178
  1
  263/295
  124
  #f
  140/101
  (5 5 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 11) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 11) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  180
  172
  5
  3
  145
  3
  148
  1
  213/245
  106
  #f
  119/86
  (5 5 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 13) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 13) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  150
  142
  5
  3
  115
  3
  118
  1
  163/195
  88
  #f
  98/71
  (4 4 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 17) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 17) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  120
  112
  5
  3
  85
  3
  88
  1
  113/145
  71
  #f
  153/112
  (4 4 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 19) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 19) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  88
  80
  5
  3
  55
  3
  58
  1
  131/190
  54
  #f
  53/40
  (3 3 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 23) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 23) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 23 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 23) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 23) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 19) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 19) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 19 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 19) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 19) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 17) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 17) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 17 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 17) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 17) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 13) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 13) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 13 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 13) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 13) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 11) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 11) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 11 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 11) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 11) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 7) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 7) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 7 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 7) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 7) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 5) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 5) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 5 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 5) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 5) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 3) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 3) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 3 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 3) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 3) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = (app modulo n 2) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  65
  57
  5
  3
  40
  3
  43
  1
  7/10
  36
  #f
  26/19
  (2 2 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = (app modulo n 2) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))"
  #f
  50
  42
  5
  3
  31
  3
  34
  1
  8/11
  26
  #f
  29/21
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app modulo n (-> 2 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))"
  #f
  35
  27
  5
  3
  22
  3
  25
  1
  31/40
  16
  #f
  38/27
  (1 1 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 2) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 2) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    square\n    (modulo-power (-> (λ (base exp n) ...) <-))\n    is-trivial-composite?\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (match (app = exp 0) (#f) (_ (-> 1 <-))) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  match
  "'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_ (-> (app modulo (app * base (app modulo-power ...)) n) <-)))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo (app * base (app modulo-power base (app - ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app - exp (-> 1 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> - <-) exp 1) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> * <-) base (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app * base (app modulo-power base (app - ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (match\n   (app odd? exp)\n   ((#f) (-> (app modulo (app square (app modulo-power ...)) n) <-))\n   _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo (app square (app modulo-power base (app / ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app modulo (-> (app square (app modulo-power base (app / ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app / exp (-> 2 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> / <-) exp 2) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> square <-) (app modulo-power base (app / exp 2) n))\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app square (app modulo-power base (app / ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> odd? <-) exp) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  number
  "'(eval (app = exp (-> 0 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> = <-) exp 0) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  lambda
  "'(eval\n  (letrec* (... () (square (-> (λ (x) ...) <-)) modulo-power ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app * x (-> x <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app * (-> x <-) x) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> * <-) x x) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  app
  "'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  3
  600
  219
  ref-or-constructor
  "'(eval (app (-> generate-fermat-prime <-) byte-size iterations) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
