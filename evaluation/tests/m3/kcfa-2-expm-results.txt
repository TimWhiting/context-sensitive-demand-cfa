'(expression:
  (app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'query:
 '(app z x1 (-> x2 <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (expenv
  '((((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (expenv
  '((((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (expenv
  '((((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> #f <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (expenv '()))
'(clos/con:
  ((λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> #t <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (expenv
  '((((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (expenv
  '((((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #t <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) #t)
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con:
  ((λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (expenv
  '((((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (z) (app z x1 x2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (expenv
  '((((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (z) (app z x1 x2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #t)
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #f)
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (expenv
  '((((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (expenv
  '((((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #t)
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (expenv '()))
'(clos/con: ((λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f1 #t) <-)) bod)
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (expenv
  '((((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (z) (app z x1 x2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (expenv
  '((((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (z) (app z x1 x2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2) y1))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          ()
          ()
          (bod
           (x1)
           (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))))
      app
      z
      x1
      x2)
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2) y1))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          ()
          ()
          (bod
           (x1)
           (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))))
      app
      z
      x1
      x2)
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2) y1))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          ()
          ()
          (bod
           (x1)
           (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))))
      app
      z
      x1
      x2)
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2) y1))
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          ()
          ()
          (bod
           (x1)
           (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))))
      app
      z
      x1
      x2)
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f))
    (((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #f)
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (expenv
  '((((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) #f)
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con:
  ((λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (expenv
  '((((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (expenv
  '((((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f1 #f) <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 #f) <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (y1 y2) y1)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #f <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (expenv
  '((((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #f <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (expenv
  '((((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (expenv
  '((((let-bod
       ((_ (app f2 #t)))
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #f)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 #f) <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        ()
        ()
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
      app
      (λ (z) (app z x1 x2))
      (λ (y1 y2) y1))
     ((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    (((let-bin
       _
       (app f2 #f)
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
      app
      f2
      #t)
     ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f))
    (((let-bod
       ((_ (app f1 #t)))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #f)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #t <-))
 (expenv
  '((((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
      app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     ((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
    (((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (expenv
  '((((let-bin
       _
       (app f1 #f)
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
             (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
         (top))))
      app
      f1
      #t)
     ((top)
      app
      (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))))))
'(clos/con: ((λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
