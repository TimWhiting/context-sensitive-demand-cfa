'(clean-cache
  loop2-1
  3
  1000
  45
  letrec
  "'(eval ((top) letrec (lp1) ...) (env ()))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  lambda
  "'(eval (letrec (... () (lp1 (-> (λ (i x) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  match
  "'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))"
  #f
  759
  642
  71
  46
  291
  57
  348
  1
  615421/1087065
  371
  #f
  991/642
  (685 695 9))
'(clean-cache
  loop2-1
  3
  1000
  45
  letrec
  "'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  lambda
  "'(eval\n  (letrec (... () (lp2 (-> (λ (j f y) ...) <-)) () ...) ...)\n  (env ((□? (i x)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  match
  "'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))"
  #f
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  (1 1 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  number
  "'(eval (app - i (-> 1 <-)) (env ((□? (j f y)) (□? (i x)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))"
  #f
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  (1 1 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> - <-) i 1) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> lp1 <-) (app - i 1) y) (env ((□? (j f y)) (□? (i x)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))"
  #f
  18
  9
  3
  6
  0
  0
  0
  1
  0
  9
  #t
  1
  (4 4 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  17
  8
  3
  6
  0
  0
  0
  1
  0
  8
  #t
  1
  (3 3 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  38
  29
  3
  6
  0
  0
  0
  1
  0
  17
  #f
  41/29
  (5 6 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  number
  "'(eval (app - j (-> 1 <-)) (env ((□? (j f y)) (□? (i x)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))"
  #f
  38
  29
  3
  6
  0
  0
  0
  1
  0
  17
  #f
  41/29
  (6 6 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> - <-) j 1) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval\n  (app (-> lp2 <-) (app - j 1) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))"
  #f
  60
  51
  3
  6
  0
  0
  0
  1
  0
  32
  #f
  70/51
  (11 11 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  39
  30
  3
  6
  0
  0
  0
  1
  0
  17
  #f
  43/30
  (7 7 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  number
  "'(eval (app = (-> 0 <-) j) (env ((□? (j f y)) (□? (i x)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> = <-) 0 j) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))"
  #f
  759
  642
  71
  46
  291
  57
  348
  1
  4886393/8282400
  371
  #f
  991/642
  (670 679 9))
'(clean-cache
  loop2-1
  3
  1000
  45
  lambda
  "'(eval (app lp2 10 (-> (λ (n) ...) <-) x) (env ((□? (i x)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))"
  #f
  23
  14
  3
  6
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  (1 1 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> + <-) n i) (env ((□? (n)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  number
  "'(eval (app lp2 (-> 10 <-) (λ (n) ...) x) (env ((□? (i x)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> lp2 <-) 10 (λ (n) ...) x) (env ((□? (i x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))"
  #f
  31
  23
  3
  5
  4
  2
  6
  1
  2/9
  16
  #f
  30/23
  (2 2 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))"
  #f
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  (1 1 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  number
  "'(eval (app = (-> 0 <-) i) (env ((□? (i x)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> = <-) 0 i) (env ((□? (i x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  app
  "'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  loop2-1
  3
  1000
  45
  number
  "'(eval (app lp1 10 (-> 0 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  number
  "'(eval (app lp1 (-> 10 <-) 0) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  3
  1000
  45
  ref-or-constructor
  "'(eval (app (-> lp1 <-) 10 0) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
