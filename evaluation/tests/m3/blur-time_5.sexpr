'(clean-cache
  blur
  3
  5
  43
  letrec
  "'(eval ((top) letrec (id ... lp) ...) (env ()))"
  #f
  #f)
'(clean-cache
  blur
  3
  5
  43
  lambda
  "'(eval (letrec (... blur (lp (-> (λ (a n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  match
  "'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))"
  #f
  168
  131
  32
  5
  124
  25
  149
  1
  1061/1110
  117
  #f
  145/131
  ((3 3 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))"
  #f
  109
  65
  37
  7
  57
  25
  82
  1
  274/315
  65
  #t
  1
  ((3 3 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app id (-> a <-)) (env ((□? (a n)))))"
  #f
  83
  47
  32
  4
  46
  25
  71
  1
  15/16
  47
  #t
  1
  ((1 1 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> id <-) a) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  let*
  "'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))"
  #f
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))"
  #f
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))"
  #f
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))"
  #f
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval\n  (let* (r ... s) (-> (app not (app (app blur ...) s (app - ...))) <-))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))"
  #f
  42
  26
  14
  2
  22
  10
  32
  1
  31/35
  22
  #f
  15/13
  ((1 1 0)))
'(clean-cache
  blur
  3
  5
  43
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (a n)))))"
  #f
  39
  23
  14
  2
  22
  10
  32
  1
  34/35
  20
  #f
  26/23
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))"
  #f
  31
  12
  12
  7
  2
  2
  4
  1
  1/6
  12
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))"
  #f
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app blur (-> lp <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) lp) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> not <-) (app (app blur lp) s (app - n 1))) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))"
  #f
  54
  38
  14
  2
  34
  10
  44
  1
  47/55
  33
  #f
  43/38
  ((1 1 0)))
'(clean-cache
  blur
  3
  5
  43
  number
  "'(eval (app <= n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))"
  #f
  39
  23
  14
  2
  22
  10
  32
  1
  7/8
  20
  #f
  26/23
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> <= <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  lambda
  "'(eval (letrec (... id (blur (-> (λ (y) ...) <-)) lp ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (λ (y) (-> y <-)) (env ((□? (y)))))"
  #f
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  lambda
  "'(eval (letrec (... () (id (-> (λ (x) ...) <-)) blur ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)))))"
  #f
  114
  67
  37
  10
  58
  25
  83
  1
  323/360
  66
  #f
  68/67
  ((3 3 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  blur
  3
  5
  43
  number
  "'(eval (app lp (app #f) (-> 2 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  app
  "'(eval (app lp (-> (app #f) <-) 2) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  3
  5
  43
  ref-or-constructor
  "'(eval (app (-> lp <-) (app #f) 2) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
