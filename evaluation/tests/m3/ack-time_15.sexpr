'(clean-cache
  ack
  3
  15
  40
  letrec*
  "'(eval ((top) letrec* (ack) ...) (env ()))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  lambda
  "'(eval (letrec* (... () (ack (-> (λ (m n) ...) <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  match
  "'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app + n (-> 1 <-)) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app + (-> n <-) 1) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> + <-) n 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  match
  "'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app ack (app - m 1) (-> 1 <-)) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app - m (-> 1 <-)) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) (app - m 1) 1) (env ((□? (m n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) m (app - n 1)) (env ((□? (m n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app - m (-> 1 <-)) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval\n  (app (-> ack <-) (app - m 1) (app ack m (app - n 1)))\n  (env ((□? (m n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app = n (-> 0 <-)) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app = (-> n <-) 0) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> = <-) n 0) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app = m (-> 0 <-)) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app = (-> m <-) 0) (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> = <-) m 0) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  app
  "'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app ack 3 (-> 12 <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  number
  "'(eval (app ack (-> 3 <-) 12) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  3
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) 3 12) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
