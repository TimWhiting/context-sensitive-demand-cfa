'(clean-cache
  simple-id
  3
  5
  12
  let*
  "'(eval ((top) let* (id ... b) ...) (env ()))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  app
  "'(eval (let* (... a (b (-> (app id (λ (bb) ...)) <-)) () ...) ...) (env ()))"
  #f
  9
  5
  3
  1
  5
  3
  8
  1
  1
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  lambda
  "'(eval (app id (-> (λ (bb) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  ref-or-constructor
  "'(eval (λ (bb) (-> bb <-)) (env ((□? (bb)))))"
  #f
  11
  3
  6
  2
  2
  6
  8
  1
  2/3
  2
  #f
  2/3
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (bb) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  app
  "'(eval (let* (... id (a (-> (app id (λ (aa) ...)) <-)) b ...) ...) (env ()))"
  #f
  9
  5
  3
  1
  5
  3
  8
  1
  1
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  lambda
  "'(eval (app id (-> (λ (aa) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  ref-or-constructor
  "'(eval (λ (aa) (-> aa <-)) (env ((□? (aa)))))"
  #f
  13
  3
  8
  2
  2
  8
  10
  1
  2/3
  2
  #f
  2/3
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (aa) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  lambda
  "'(eval (let* (... () (id (-> (λ (x) ...) <-)) a ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)))))"
  #f
  7
  3
  3
  1
  2
  3
  5
  1
  2/3
  2
  #f
  4/3
  ((0 0 0)))
'(clean-cache
  simple-id
  3
  5
  12
  ref-or-constructor
  "'(eval (let* (id ... b) (-> a <-)) (env ()))"
  #f
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0)))
