'(clean-cache
  eta
  3
  5
  23
  letrec*
  "'(eval ((top) letrec* (do-something ... id) ...) (env ()))"
  #f
  22
  12
  7
  3
  12
  7
  19
  1
  1
  12
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  lambda
  "'(eval\n  (letrec* (... do-something (id (-> (λ (y) ...) <-)) () ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  let
  "'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))"
  #f
  10
  6
  3
  1
  4
  3
  7
  1
  2/3
  4
  #f
  4/3
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  app
  "'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))"
  #f
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  ref-or-constructor
  "'(eval (app (-> do-something <-)) (env ((□? (y)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  ref-or-constructor
  "'(eval (let (_) (-> y <-)) (env ((□? (y)))))"
  #f
  7
  3
  3
  1
  2
  3
  5
  1
  2/3
  2
  #f
  4/3
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  lambda
  "'(eval\n  (letrec* (... () (do-something (-> (λ () ...) <-)) id ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  number
  "'(eval (λ () (-> 10 <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  let
  "'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))"
  #f
  21
  11
  7
  3
  11
  7
  18
  1
  1
  11
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  app
  "'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))"
  #f
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  app
  "'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  constructor
  "'(eval (app (-> #t <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  app
  "'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))"
  #f
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  lambda
  "'(eval (app id (-> (λ (a) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  ref-or-constructor
  "'(eval (λ (a) (-> a <-)) (env ((□? (a)))))"
  #f
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (a) ...)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  app
  "'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))"
  #f
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  app
  "'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  app
  "'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))"
  #f
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  lambda
  "'(eval (app id (-> (λ (b) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  ref-or-constructor
  "'(eval (λ (b) (-> b <-)) (env ((□? (b)))))"
  #f
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  3
  5
  23
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (b) ...)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
