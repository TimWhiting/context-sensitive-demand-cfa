'(clean-cache
  sat-2
  3
  15
  159
  letrec*
  "'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  6
  1
  0
  5
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  7
  1
  0
  6
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (λ (n7) (-> (app (app (app (...) ...) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app (...) ...) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (app (-> (app (app (app (...) ...) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  50
  21
  2
  27
  2
  2
  4
  1
  2/15
  21
  #t
  1
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app (...) ...) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (app (-> (app (app (app (...) ...) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  45
  18
  2
  25
  2
  2
  4
  1
  2/13
  18
  #t
  1
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app (...) ...) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (app (-> (app (app (app (...) ...) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  40
  15
  2
  23
  2
  2
  4
  1
  2/11
  15
  #t
  1
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app p ...) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (app (-> (app (app (app p ...) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  35
  12
  2
  21
  2
  2
  4
  1
  2/9
  12
  #t
  1
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  30
  9
  2
  19
  2
  2
  4
  1
  2/7
  9
  #t
  1
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  25
  6
  2
  17
  2
  2
  4
  1
  2/5
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  13
  3
  2
  8
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval (λ (f) (-> (match (app f (app #t ...)) ...) <-)) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (match (app f (app #t)) (#f) (_ (-> (app #t) <-))) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (app f (app #t)) ((#f) (-> (match (app f (app #f ...)) ...) <-)) _)\n  (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (match (app f (app #f)) (#f) (_ (-> (app #t) <-))) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (match (app f (app #f)) ((#f) (-> (app #f) <-)) _) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (match (-> (app f (app #f)) <-) (#f) _) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))"
  #f
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (match (-> (app f (app #t)) <-) (#f) _) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))"
  #f
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval (letrec* (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  6
  1
  0
  5
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  lambda
  "'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  7
  1
  0
  6
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (λ (x7) (-> (match (match x1 ...) ...) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x1 ...) ...) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x3 ...) ...) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (match x3 ...) (#f) (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match\n   (match (app not x4) ...)\n   (#f)\n   (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (match (app not x2) ...) (#f) (_ (-> (match (match x4 ...) ...) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (match x4 ...) (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (match x4 ...) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (-> (match x4 ...) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x4 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match x4 ((#f) (-> (match x2 ...) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  88
  29
  11
  48
  3
  2
  5
  1
  1/5
  24
  #f
  34/29
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x2 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x2 ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x2 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  54
  12
  11
  31
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x4 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  73
  12
  25
  36
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (match (app not x2) ...) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (-> (match (app not x2) ...) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  133
  54
  18
  61
  5
  2
  7
  1
  5/19
  41
  #f
  67/54
  ((8 8 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (-> (app not x3) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  87
  22
  18
  47
  5
  2
  7
  1
  5/14
  16
  #f
  14/11
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  61
  12
  17
  32
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #t
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (-> (app not x2) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  73
  20
  11
  42
  5
  2
  7
  1
  5/14
  15
  #f
  5/4
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  54
  12
  11
  31
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #t
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (match (app not x4) ...) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (-> (match (app not x4) ...) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (app not x4) (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (app not x4) ((#f) (-> (match x1 ...) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  63
  22
  6
  35
  8
  5
  13
  1
  8/15
  18
  #f
  13/11
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x1 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x1 ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x1 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (-> (app not x4) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  106
  24
  28
  54
  5
  2
  7
  1
  5/14
  17
  #f
  31/24
  ((5 5 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  73
  12
  25
  36
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #t
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (match x3 ...) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (-> (match x3 ...) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x3 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match x3 ((#f) (-> (match x4 ...) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  152
  49
  28
  75
  3
  2
  5
  1
  1/5
  42
  #f
  8/7
  ((8 8 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x4 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x4 ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x4 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  73
  12
  25
  36
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x3 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  61
  12
  17
  32
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (match x1 ...) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (-> (match x1 ...) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x1 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match x1 ((#f) (-> (match (app not x2) ...) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  133
  54
  18
  61
  5
  2
  7
  1
  5/19
  41
  #f
  67/54
  ((8 8 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (-> (app not x3) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  87
  22
  18
  47
  5
  2
  7
  1
  5/14
  16
  #f
  14/11
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  61
  12
  17
  32
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #t
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (-> (app not x2) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  73
  20
  11
  42
  5
  2
  7
  1
  5/14
  15
  #f
  5/4
  ((2 2 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  54
  12
  11
  31
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #t
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x1 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match (match x1 ...) ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match (-> (match x1 ...) <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x1 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  match
  "'(eval\n  (match x1 ((#f) (-> (match x2 ...) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  88
  29
  11
  48
  3
  2
  5
  1
  1/5
  24
  #f
  34/29
  ((3 3 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x2 (#f) (_ (-> (app #t) <-)))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval\n  (match x2 ((#f) (-> (app #f) <-)) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x2 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  54
  12
  11
  31
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval\n  (match (-> x1 <-) (#f) _)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-2
  3
  15
  159
  app
  "'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval (app sat-solve-7 (-> phi <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  3
  15
  159
  ref-or-constructor
  "'(eval (app (-> sat-solve-7 <-) phi) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
