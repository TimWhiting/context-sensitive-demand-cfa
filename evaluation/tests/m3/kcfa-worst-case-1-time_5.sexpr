'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  28
  15
  7
  6
  15
  7
  22
  1
  1
  15
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  app
  "'(eval (λ (x1) (-> (app (λ (z) ...) (λ (y1) ...)) <-)) (env ((□? (x1)))))"
  #f
  71
  40
  14
  17
  19
  9
  28
  1
  2441/3780
  30
  #f
  7/5
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  lambda
  "'(eval (app (λ (z) ...) (-> (λ (y1) ...) <-)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  ref-or-constructor
  "'(eval (λ (y1) (-> y1 <-)) (env ((□? (y1)) (□? (x1)))))"
  #f
  37
  14
  11
  12
  9
  7
  16
  1
  91/120
  12
  #f
  9/7
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  lambda
  "'(eval (app (-> (λ (z) ...) <-) (λ (y1) ...)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  app
  "'(eval (λ (z) (-> (app z x1) <-)) (env ((□? (z)) (□? (x1)))))"
  #f
  68
  37
  14
  17
  15
  9
  24
  1
  146/231
  27
  #f
  55/37
  ((2 2 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  ref-or-constructor
  "'(eval (app z (-> x1 <-)) (env ((□? (z)) (□? (x1)))))"
  #f
  12
  6
  3
  3
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  ref-or-constructor
  "'(eval (app (-> z <-) x1) (env ((□? (z)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  let
  "'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))"
  #f
  50
  28
  11
  11
  13
  7
  20
  1
  47/84
  28
  #t
  8/7
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  app
  "'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  48
  26
  11
  11
  12
  7
  19
  1
  22/39
  26
  #t
  15/13
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  app
  "'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  48
  26
  11
  11
  12
  7
  19
  1
  22/39
  26
  #t
  15/13
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-1
  3
  5
  19
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
