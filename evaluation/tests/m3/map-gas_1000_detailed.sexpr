'(clean-cache
  map
  3
  1000
  97
  lettypes
  "'(eval ((top) lettypes (cons ... nil) ...) (env ()))"
  #f
  185
  150
  16
  19
  86
  9
  95
  1
  231319/252000
  74
  #f
  17/6
  (161 164 2))
'(clean-cache
  map
  3
  1000
  97
  letrec*
  "'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))"
  #f
  184
  149
  16
  19
  85
  9
  94
  1
  227119/247800
  74
  #f
  423/149
  (158 160 1))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval (letrec* (... id (my-map (-> (λ (f l) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  let
  "'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))"
  #f
  261
  225
  16
  20
  108
  9
  117
  1
  165199/226800
  126
  #f
  64/25
  (179 182 3))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))"
  #f
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> debug-trace <-)) (env ((□? (f l)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  letrec
  "'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))"
  #f
  258
  222
  16
  20
  106
  9
  115
  1
  54133/74200
  126
  #f
  563/222
  (179 182 2))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval\n  (letrec (... () (lp (-> (λ (lst) ...) <-)) () ...) ...)\n  (env ((□? (f l)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  match
  "'(eval\n  (λ (lst) (-> (match (app not (app pair? ...)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  415
  377
  16
  22
  144
  9
  153
  1
  1586759/2263800
  244
  #f
  842/377
  (268 272 3))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (lst)) (□? (f l)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id ...) (app car ...)) (app lp (app cdr ...))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  387
  351
  16
  20
  146
  9
  155
  1
  52093/72800
  212
  #f
  853/351
  (326 334 4))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  151
  118
  14
  19
  57
  8
  65
  1
  150523/173250
  58
  #f
  182/59
  (119 123 1))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  150
  117
  14
  19
  57
  8
  65
  1
  109519/126000
  57
  #f
  121/39
  (157 161 2))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cdr <-) lst) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> lp <-) (app cdr lst)) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  355
  286
  51
  18
  156
  28
  184
  1
  10229/12810
  136
  #f
  631/286
  (197 203 2))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  203
  165
  16
  22
  70
  9
  79
  1
  120919/155400
  71
  #f
  509/165
  (229 235 2))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  150
  117
  14
  19
  57
  8
  65
  1
  109519/130200
  57
  #f
  121/39
  (159 164 2))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> car <-) lst) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))"
  #f
  32
  20
  7
  5
  11
  6
  17
  1
  25/36
  16
  #f
  6/5
  (3 3 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  21
  12
  7
  2
  11
  6
  17
  1
  9/10
  11
  #f
  13/12
  (1 1 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> id <-) f) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app (app id f) (app car lst)) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))"
  #f
  272
  234
  16
  22
  96
  9
  105
  1
  1518509/2032800
  134
  #f
  292/117
  (259 268 3))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  224
  186
  16
  22
  82
  9
  91
  1
  128119/168000
  99
  #f
  523/186
  (240 245 2))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))"
  #f
  150
  117
  14
  19
  57
  8
  65
  1
  109519/130200
  57
  #f
  121/39
  (157 160 2))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> pair? <-) lst) (env ((□? (lst)) (□? (f l)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> not <-) (app pair? lst)) (env ((□? (lst)) (□? (f l)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))"
  #f
  255
  219
  16
  20
  104
  9
  113
  1
  159599/218400
  126
  #f
  550/219
  (186 189 2))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app lp (-> l <-)) (env ((□? (f l)))))"
  #f
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> lp <-) l) (env ((□? (f l)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval\n  (letrec* (... debug-trace (id (-> (λ (xx) ...) <-)) my-map ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  let
  "'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))"
  #f
  30
  17
  7
  6
  11
  6
  17
  1
  49/60
  13
  #f
  21/17
  (2 2 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))"
  #f
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> debug-trace <-)) (env ((□? (xx)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))"
  #f
  27
  15
  7
  5
  11
  6
  17
  1
  13/15
  13
  #f
  17/15
  (1 1 0))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval\n  (letrec* (... pair? (debug-trace (-> (λ () ...) <-)) id ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  constructor
  "'(eval (app (-> #f <-)) (env ((□? ()))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval\n  (letrec* (... cdr (pair? (-> (λ (pair?-v) ...) <-)) debug-trace ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))"
  #f
  205
  166
  16
  23
  77
  9
  86
  1
  12475/16058
  86
  #f
  3
  (180 183 1))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))"
  #f
  167
  128
  16
  23
  57
  9
  66
  1
  177/217
  56
  #f
  417/128
  (165 168 1))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval\n  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) pair? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  152
  118
  14
  20
  57
  8
  65
  1
  107/124
  56
  #f
  187/59
  (124 126 1))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  150
  116
  14
  20
  57
  8
  65
  1
  11297/13020
  56
  #f
  91/29
  (113 115 1))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  148
  114
  14
  20
  57
  8
  65
  1
  8527/9765
  56
  #f
  176/57
  (105 107 1))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  183
  144
  16
  23
  65
  9
  74
  1
  5881/7378
  56
  #f
  121/36
  (186 188 1))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  175
  136
  16
  23
  61
  9
  70
  1
  11545/14322
  56
  #f
  117/34
  (179 182 1))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  167
  128
  16
  23
  57
  9
  66
  1
  177/217
  56
  #f
  417/128
  (168 171 1))
'(clean-cache
  map
  3
  1000
  97
  let
  "'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))"
  #f
  183
  148
  16
  19
  84
  9
  93
  1
  222919/243600
  74
  #f
  421/148
  (159 162 2))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (let (...\n        ()\n        (_\n         (-> (app my-map (app id (λ (a) ...)) (app cons 1 (app cons ...))) <-))\n        ()\n        ...)\n    ...)\n  (env ()))"
  #f
  182
  147
  16
  19
  83
  9
  92
  1
  218719/239400
  74
  #f
  419/147
  (156 158 1))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app cons 3 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app cons (-> 3 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 3 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app cons (-> 2 <-) (app cons 3 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 2 (app cons 3 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app cons (-> 1 <-) (app cons 2 (app cons 3 (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 1 (app cons 2 (app cons 3 (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons ...))))\n  (env ()))"
  #f
  12
  6
  4
  2
  6
  3
  9
  1
  1
  6
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval (app id (-> (λ (a) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))"
  #f
  332
  253
  50
  29
  114
  23
  137
  1
  234887/303600
  118
  #f
  58/23
  (325 330 4))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app + 1 (-> a <-)) (env ((□? (a)))))"
  #f
  308
  229
  50
  29
  102
  23
  125
  1
  224987/283800
  102
  #f
  606/229
  (310 315 4))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app + (-> 1 <-) a) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> + <-) 1 a) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (a) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval\n  (app\n   (-> my-map <-)\n   (app id (λ (a) ...))\n   (app cons 1 (app cons 2 (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (let (_)\n    (-> (app my-map (app id (λ (b) ...)) (app cons 7 (app cons ...))) <-))\n  (env ()))"
  #f
  182
  147
  16
  19
  83
  9
  92
  1
  218719/239400
  74
  #f
  419/147
  (155 157 2))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (app cons 9 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app cons (-> 9 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 9 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app cons (-> 8 <-) (app cons 9 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 8 (app cons 9 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app cons (-> 7 <-) (app cons 8 (app cons 9 (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 7 (app cons 8 (app cons 9 (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons ...))))\n  (env ()))"
  #f
  12
  6
  4
  2
  6
  3
  9
  1
  1
  6
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  lambda
  "'(eval (app id (-> (λ (b) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  app
  "'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))"
  #f
  332
  253
  50
  29
  114
  23
  137
  1
  234887/303600
  118
  #f
  58/23
  (323 328 4))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app + 1 (-> b <-)) (env ((□? (b)))))"
  #f
  308
  229
  50
  29
  102
  23
  125
  1
  224987/283800
  102
  #f
  606/229
  (305 310 4))
'(clean-cache
  map
  3
  1000
  97
  number
  "'(eval (app + (-> 1 <-) b) (env ((□? (b)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> + <-) 1 b) (env ((□? (b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (b) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  3
  1000
  97
  ref-or-constructor
  "'(eval\n  (app\n   (-> my-map <-)\n   (app id (λ (b) ...))\n   (app cons 7 (app cons 8 (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
