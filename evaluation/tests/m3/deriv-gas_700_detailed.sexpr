'(clean-cache
  deriv
  3
  700
  257
  lettypes
  "'(eval ((top) lettypes (cons ... error) ...) (env ()))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  letrec*
  "'(eval (lettypes cons ... error (letrec* (car ... deriv) ...)) (env ()))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval (letrec* (... pair? (deriv (-> (λ (a) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval (λ (a) (-> (match (app not (app pair? ...)) ...) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval\n  (match (app not (app pair? a)) (#f) (_ (-> (match (app eq? a 'x) ...) <-)))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  number
  "'(eval (match (app eq? a 'x) (#f) (_ (-> 1 <-))) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  number
  "'(eval (match (app eq? a 'x) ((#f) (-> 0 <-)) _) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (match (-> (app eq? a 'x) <-) (#f) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app eq? a (-> 'x <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app eq? (-> a <-) 'x) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) a 'x) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval\n  (match\n   (app not (app pair? a))\n   ((#f) (-> (match (app eq? (app car ...) '+) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '+)\n   (#f)\n   (_ (-> (app cons '+ (app map deriv (app cdr ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons '+ (-> (app map deriv (app cdr a)) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app map deriv (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app map (-> deriv <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> map <-) deriv (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> '+ <-) (app map deriv (app cdr a))) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) '+ (app map deriv (app cdr a))) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '+)\n   ((#f) (-> (match (app eq? (app car ...) '-) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '-)\n   (#f)\n   (_ (-> (app cons '- (app map deriv (app cdr ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons '- (-> (app map deriv (app cdr a)) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app map deriv (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app map (-> deriv <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> map <-) deriv (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> '- <-) (app map deriv (app cdr a))) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) '- (app map deriv (app cdr a))) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '-)\n   ((#f) (-> (match (app eq? (app car ...) '*) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '*)\n   (#f)\n   (_ (-> (app cons '* (app cons a (app cons ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons '* (-> (app cons a (app cons (app cons ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons a (-> (app cons (app cons '+ (app map ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '+ (app map (λ (a) ...) (app cdr ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '+ (app map (λ (a) ...) (app cdr ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons '+ (-> (app map (λ (a) ...) (app cdr a)) <-))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app map (λ (a) ...) (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval (app map (-> (λ (a) ...) <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (λ (a) (-> (app cons '/ (app cons (app deriv ...) (app cons ...))) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons '/ (-> (app cons (app deriv a) (app cons a (app nil ...))) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons (app deriv a) (-> (app cons a (app nil)) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons a (-> (app nil) <-)) (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cons (-> a <-) (app nil)) (env ((□? (a)) (□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) a (app nil)) (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons (-> (app deriv a) <-) (app cons a (app nil)))\n  (env ((□? (a)) (□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app deriv (-> a <-)) (env ((□? (a)) (□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) a) (env ((□? (a)) (□? (a)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app deriv a) (app cons a (app nil)))\n  (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app cons (-> '/ <-) (app cons (app deriv a) (app cons a (app nil ...))))\n  (env ((□? (a)) (□? (a)))))"
  (quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '/ (app cons (app deriv a) (app cons a (app nil ...))))\n  (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> map <-) (λ (a) ...) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app cons (-> '+ <-) (app map (λ (a) ...) (app cdr a)))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '+ (app map (λ (a) ...) (app cdr a)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '+ (app map (λ (a) ...) (app cdr ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app cons (-> a <-) (app cons (app cons '+ (app map ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) a (app cons (app cons '+ (app map ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons a (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons a (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '*)\n   ((#f) (-> (match (app eq? (app car ...) '/) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '/)\n   (#f)\n   (_ (-> (app cons '- (app cons (app cons ...) (app cons ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   '-\n   (->\n    (app\n     cons\n     (app cons '/ (app cons ...))\n     (app cons (app cons ...) (app nil ...)))\n    <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '/ (app cons (app deriv ...) (app cons ...)))\n   (-> (app cons (app cons '/ (app cons ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '/ (app cons (app cadr ...) (app cons ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '/ (app cons (app cadr ...) (app cons ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   '/\n   (-> (app cons (app cadr a) (app cons (app cons ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cadr a)\n   (-> (app cons (app cons '* (app cons ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons (app caddr ...) (app cons ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons (app caddr ...) (app cons ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   '*\n   (-> (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app deriv (app caddr ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons (app deriv (app caddr a)) (-> (app nil) <-)) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons (-> (app deriv (app caddr a)) <-) (app nil)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app deriv (-> (app caddr a) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) (app caddr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) (app deriv (app caddr a)) (app nil)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app deriv (app caddr ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app caddr a)\n   (app cons (app deriv (app caddr ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app caddr a)\n   (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '* <-)\n   (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '*\n   (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons (app caddr ...) (app cons ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cadr a) <-)\n   (app cons (app cons '* (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cadr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cadr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cadr a)\n   (app cons (app cons '* (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '/ <-)\n   (app cons (app cadr a) (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '/\n   (app cons (app cadr a) (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '/ (app cons (app cadr ...) (app cons ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '/ (app cons (app deriv ...) (app cons ...))) <-)\n   (app cons (app cons '/ (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   '/\n   (->\n    (app\n     cons\n     (app deriv (app cadr ...))\n     (app cons (app caddr ...) (app nil ...)))\n    <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app deriv (app cadr a))\n   (-> (app cons (app caddr a) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons (app caddr a) (-> (app nil) <-)) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons (-> (app caddr a) <-) (app nil)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) (app caddr a) (app nil)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app deriv (app cadr a)) <-)\n   (app cons (app caddr a) (app nil)))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app deriv (-> (app cadr a) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cadr (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cadr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) (app cadr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app deriv (app cadr a))\n   (app cons (app caddr a) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '/ <-)\n   (app\n    cons\n    (app deriv (app cadr ...))\n    (app cons (app caddr ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '/\n   (app\n    cons\n    (app deriv (app cadr ...))\n    (app cons (app caddr ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '/ (app cons (app deriv ...) (app cons ...)))\n   (app cons (app cons '/ (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '- <-)\n   (app\n    cons\n    (app cons '/ (app cons ...))\n    (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '-\n   (app\n    cons\n    (app cons '/ (app cons ...))\n    (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '/)\n   ((#f) (-> (app error (app #f) \"No derivation method available\") <-))\n   _)\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  string
  "'(eval\n  (app error (app #f) (-> \"No derivation method available\" <-))\n  (env ((□? (a)))))"
  (string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app error (-> (app #f) <-) \"No derivation method available\")\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> error <-) (app #f) \"No derivation method available\")\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (match (-> (app eq? (app car a) '/) <-) (#f) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app eq? (app car a) (-> '/ <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '/) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '/) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (match (-> (app eq? (app car a) '*) <-) (#f) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app eq? (app car a) (-> '* <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '*) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '*) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (match (-> (app eq? (app car a) '-) <-) (#f) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app eq? (app car a) (-> '- <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '-) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '-) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (match (-> (app eq? (app car a) '+) <-) (#f) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app eq? (app car a) (-> '+ <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '+) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '+) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (match (-> (app not (app pair? a)) <-) (#f) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app not (-> (app pair? a) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app pair? (-> a <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> pair? <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> not <-) (app pair? a)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval\n  (letrec* (... map (pair? (-> (λ (pair?-v) ...) <-)) deriv ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval\n  (letrec* (... caddr (map (-> (λ (map-f map-l) ...) <-)) pair? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval (λ (map-f map-l) (-> (match map-l ...) <-)) (env ((□? (map-f map-l)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match map-l (cons map-c map-d) ((nil) (-> (app nil) <-)))\n  (env ((□? (map-f map-l)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (map-f map-l)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (match\n   map-l\n   ((cons map-c map-d)\n    (-> (app cons (app map-f map-c) (app map map-f map-d)) <-))\n   (nil))\n  (env ((□? (map-f map-l)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons (app map-f map-c) (-> (app map map-f map-d) <-))\n  (env ((□? (map-f map-l)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app map map-f (-> map-d <-)) (env ((□? (map-f map-l)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app map (-> map-f <-) map-d) (env ((□? (map-f map-l)))))"
  #f
  32
  17
  5
  10
  5
  1
  6
  1
  17/65
  7
  #f
  27/17
  (11 12 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> map <-) map-f map-d) (env ((□? (map-f map-l)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons (-> (app map-f map-c) <-) (app map map-f map-d))\n  (env ((□? (map-f map-l)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app map-f (-> map-c <-)) (env ((□? (map-f map-l)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> map-f <-) map-c) (env ((□? (map-f map-l)))))"
  #f
  33
  18
  5
  10
  5
  1
  6
  1
  17/78
  7
  #f
  29/18
  (14 15 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app map-f map-c) (app map map-f map-d))\n  (env ((□? (map-f map-l)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (match (-> map-l <-) (cons map-c map-d) (nil))\n  (env ((□? (map-f map-l)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval\n  (letrec* (... cadr (caddr (-> (λ (cadr-v) ...) <-)) map ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr ...))) <-))\n  (env ((□? (cadr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) cadr-v) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) (app cdr cadr-v)) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr (app cdr cadr-v))) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval\n  (letrec* (... cdr (cadr (-> (λ (cadr-v) ...) <-)) caddr ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) cadr-v) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr cadr-v)) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) cadr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (letrec* (car ... deriv) (-> (app deriv (app cons '+ (app cons ...))) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app deriv (-> (app cons '+ (app cons (app cons ...) (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   '+\n   (->\n    (app\n     cons\n     (app cons '* (app cons ...))\n     (app cons (app cons ...) (app cons ...)))\n    <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 3 (app cons ...)))\n   (->\n    (app\n     cons\n     (app cons '* (app cons ...))\n     (app cons (app cons ...) (app cons ...)))\n    <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 'a (app cons ...)))\n   (-> (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 'b (app cons ...)))\n   (-> (app cons 5 (app nil)) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 5 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  number
  "'(eval (app cons (-> 5 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 5 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'b (app cons ...))) <-)\n   (app cons 5 (app nil)))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 'b (app cons 'x (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 'b (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> 'b <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'b (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 'b (app cons 'x (app nil ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 'b (app cons 'x (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 'b (app cons ...)))\n   (app cons 5 (app nil)))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'a (app cons ...))) <-)\n   (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 'a (app cons 'x (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons 'a (-> (app cons 'x (app cons 'x (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app cons (-> 'a <-) (app cons 'x (app cons 'x (app nil ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) 'a (app cons 'x (app cons 'x (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 'a (app cons 'x (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 'a (app cons 'x (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 'a (app cons ...)))\n   (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 3 (app cons ...))) <-)\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 3 (app cons 'x (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 3 (-> (app cons 'x (app cons 'x (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  number
  "'(eval (app cons (-> 3 <-) (app cons 'x (app cons 'x (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 3 (app cons 'x (app cons 'x (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 3 (app cons 'x (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 3 (app cons 'x (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 3 (app cons ...)))\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '+ <-)\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '+\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  3
  700
  257
  ref-or-constructor
  "'(eval\n  (app (-> deriv <-) (app cons '+ (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
